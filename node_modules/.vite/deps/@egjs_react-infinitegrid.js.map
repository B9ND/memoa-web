{
  "version": 3,
  "sources": ["../../@egjs/component/src/utils.ts", "../../@egjs/component/src/ActualComponentEvent.ts", "../../@egjs/component/src/Component.ts", "../../@egjs/component/src/ComponentEvent.ts", "../../@egjs/component/src/index.ts", "../../@egjs/list-differ/src/PolyMap.ts", "../../@egjs/list-differ/src/HashMap.ts", "../../@egjs/list-differ/src/consts.ts", "../../@egjs/list-differ/src/Link.ts", "../../@egjs/list-differ/src/Result.ts", "../../@egjs/list-differ/src/utils.ts", "../../@egjs/list-differ/src/ListDiffer.ts", "../../@egjs/list-differ/src/index.ts", "../../@egjs/children-differ/src/consts.ts", "../../@egjs/children-differ/src/ChildrenDiffer.ts", "../../@egjs/children-differ/src/utils.ts", "../../@egjs/children-differ/src/index.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/core/utils.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/dom/utils.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/reactive/const.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/reactive/detectDependencies.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/reactive/Observer.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/reactive/ComputedObserver.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/reactive/decorators/Observe.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/reactive/decorators/ReactiveSubscribe.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/reactive/inline.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/reactive/utils.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/reactive/adaptReactive.ts", "../../@egjs/imready/node_modules/@cfcs/core/src/reactive/decorators/Computed.ts", "../../@egjs/imready/src/consts.ts", "../../@egjs/imready/src/utils.ts", "../../@egjs/imready/src/AutoSizer.ts", "../../@egjs/imready/src/loaders/Loader.ts", "../../@egjs/imready/src/loaders/ElementLoader.ts", "../../@egjs/imready/src/ImReadyManager.ts", "../../@egjs/imready/src/loaders/ImageLoader.ts", "../../@egjs/imready/src/loaders/VideoLoader.ts", "../../@egjs/imready/src/ImReady.ts", "../../@egjs/imready/src/reactive.ts", "../../@egjs/imready/src/index.ts", "../../@egjs/grid/src/consts.ts", "../../@egjs/grid/src/utils.ts", "../../@egjs/grid/src/ResizeWatcher.ts", "../../@egjs/grid/src/ContainerManager.ts", "../../@egjs/grid/src/ItemRenderer.ts", "../../@egjs/grid/src/GridItem.ts", "../../@egjs/grid/src/Grid.ts", "../../@egjs/grid/src/grids/MasonryGrid.ts", "../../@egjs/grid/src/grids/lib/dijkstra.ts", "../../@egjs/grid/src/grids/JustifiedGrid.ts", "../../@egjs/grid/src/grids/FrameGrid.ts", "../../@egjs/grid/src/grids/lib/BoxModel.ts", "../../@egjs/grid/src/grids/PackingGrid.ts", "../../@egjs/grid/src/index.ts", "../../@cfcs/core/src/core/utils.ts", "../../@cfcs/core/src/dom/utils.ts", "../../@cfcs/core/src/reactive/const.ts", "../../@cfcs/core/src/reactive/Observer.ts", "../../@cfcs/core/src/reactive/utils.ts", "../../@cfcs/core/src/reactive/Reactive.ts", "../../@cfcs/core/src/reactive/ReactiveSubscribe.ts", "../../@cfcs/core/src/reactive/inlineReactive.ts", "../../@cfcs/core/src/reactive/adaptReactive.ts", "../../@egjs/infinitegrid/src/consts.ts", "../../@egjs/infinitegrid/src/InfiniteGridItem.ts", "../../@egjs/infinitegrid/src/LoadingGrid.ts", "../../@egjs/infinitegrid/src/utils.ts", "../../@egjs/infinitegrid/src/GroupManager.ts", "../../@egjs/infinitegrid/src/Infinite.ts", "../../@egjs/infinitegrid/src/Renderer/Renderer.ts", "../../@egjs/infinitegrid/src/Renderer/VanillaRenderer.ts", "../../@egjs/infinitegrid/src/Renderer/VanillaGridRenderer.ts", "../../@egjs/infinitegrid/src/ScrollManager.ts", "../../@egjs/infinitegrid/src/InfiniteGrid.ts", "../../@egjs/infinitegrid/src/grids/MasonryInfiniteGrid.ts", "../../@egjs/infinitegrid/src/grids/JustifiedInfiniteGrid.ts", "../../@egjs/infinitegrid/src/grids/FrameInfiniteGrid.ts", "../../@egjs/infinitegrid/src/grids/PackingInfiniteGrid.ts", "../../@egjs/react-infinitegrid/src/consts.ts", "../../@egjs/react-infinitegrid/src/utils.ts", "../../@egjs/react-infinitegrid/src/InfiniteGrid.tsx", "../../@egjs/react-infinitegrid/src/grids/MasonryInfiniteGrid.tsx", "../../@egjs/react-infinitegrid/src/grids/JustifiedInfiniteGrid.tsx", "../../@egjs/react-infinitegrid/src/grids/FrameInfiniteGrid.tsx", "../../@egjs/react-infinitegrid/src/grids/PackingInfiniteGrid.tsx"],
  "sourcesContent": ["/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nexport const isUndefined = (value: any): value is undefined => typeof value === \"undefined\";\n", "import { DefaultProps } from \"./types\";\n\n// This class name is not matched to file name intentionally\n/**\n * Event class to provide additional properties\n * @ko Component에서 추가적인 프로퍼티를 제공하는 이벤트 클래스\n */\nclass ComponentEvent<PROPS extends Record<string, any>, TYPE extends string = string, THIS = any> implements DefaultProps<TYPE, THIS> {\n  /**\n   * A Component instance that triggered event.\n   * @type Component\n   * @ko 이벤트를 트리거한 Component 인스턴스.\n   * @example\n   * ```ts\n   * class ExtendedClass extends Component<{\n   *   someEvent: ComponentEvent<{ foo: number; bar: string }>\n   * }> {}\n   *\n   * new ExtendedClass().on(\"someEvent\", e => {\n   *   e.currentTarget; // ExtendedClass\n   * });\n   * ```\n   */\n  public currentTarget: THIS;\n\n  /**\n   * The name of the event.\n   * @type string\n   * @ko 이벤트 이름.\n   * @example\n   * ```ts\n   * class ExtendedClass extends Component<{\n   *   someEvent: ComponentEvent\n   * }> {}\n   *\n   * new ExtendedClass().on(\"someEvent\", e => {\n   *   e.eventType; // \"someEvent\"\n   * });\n   * ```\n   */\n  public eventType: TYPE;\n\n  private _canceled: boolean;\n\n  /**\n   * Create a new instance of ComponentEvent.\n   * @ko ComponentEvent의 새로운 인스턴스를 생성한다.\n   * @param eventType The name of the event.<ko>이벤트 이름.</ko>\n   * @param props An object that contains additional event properties.<ko>추가적인 이벤트 프로퍼티 오브젝트.</ko>\n   */\n  public constructor(\n    eventType: TYPE,\n    props: PROPS\n  ) {\n    this._canceled = false;\n\n    if (props) {\n      for (const key of Object.keys(props as Record<string, any>)) {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        this[key] = props[key];\n      }\n    }\n\n    this.eventType = eventType;\n  }\n\n  /**\n   * Stop the event. {@link ComponentEvent#isCanceled} will return `true` after.\n   * @ko 이벤트를 중단한다. 이후 {@link ComponentEvent#isCanceled}가 `true`를 반환한다.\n   */\n  public stop() {\n    this._canceled = true;\n  }\n\n  /**\n   * Returns a boolean value that indicates whether {@link ComponentEvent#stop} is called before.\n   * @ko {@link ComponentEvent#stop}이 호출되었는지 여부를 반환한다.\n   * @return {boolean} A boolean value that indicates whether {@link ComponentEvent#stop} is called before.<ko>이전에 {@link ComponentEvent#stop}이 불려졌는지 여부를 반환한다.</ko>\n   */\n  public isCanceled() {\n    return this._canceled;\n  }\n}\n\nexport default ComponentEvent;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport { isUndefined } from \"./utils\";\nimport { EventCallback, EventHash, EventKey, EventMap, EventTriggerParams } from \"./types\";\nimport ComponentEvent from \"./ComponentEvent\";\nimport ActualComponentEvent from \"./ActualComponentEvent\";\n\n/**\n * A class used to manage events in a component\n * @ko 컴포넌트의 이벤트을 관리할 수 있게 하는 클래스\n */\nclass Component<T extends EventMap> {\n  /**\n   * Version info string\n   * @ko 버전정보 문자열\n   * @name VERSION\n   * @static\n   * @example\n   * Component.VERSION;  // ex) 3.0.0\n   * @memberof Component\n   */\n  public static VERSION: string = \"#__VERSION__#\";\n\n  private _eventHandler: { [keys: string]: Array<(...args: any[]) => any> };\n\n  /**\n   * @support {\"ie\": \"7+\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"2.1+ (except 3.x)\"}\n   */\n  public constructor() {\n    this._eventHandler = {};\n  }\n\n  public trigger<K extends EventKey<T>>(event: ComponentEvent<T[K], K, this> & T[K]): this;\n  public trigger<K extends EventKey<T>>(event: K, ...params: EventTriggerParams<T, K>): this;\n  /**\n   * Trigger a custom event.\n   * @ko 커스텀 이벤트를 발생시킨다\n   * @param {string | ComponentEvent} event The name of the custom event to be triggered or an instance of the ComponentEvent<ko>발생할 커스텀 이벤트의 이름 또는 ComponentEvent의 인스턴스</ko>\n   * @param {any[]} params Event data to be sent when triggering a custom event <ko>커스텀 이벤트가 발생할 때 전달할 데이터</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   beforeHi: ComponentEvent<{ foo: number; bar: string }>;\n   *   hi: { foo: { a: number; b: boolean } };\n   *   someEvent: (foo: number, bar: string) => void;\n   *   someOtherEvent: void; // When there's no event argument\n   * }> {\n   *   some(){\n   *     if(this.trigger(\"beforeHi\")){ // When event call to stop return false.\n   *       this.trigger(\"hi\");// fire hi event.\n   *     }\n   *   }\n   * }\n   *\n   * const some = new Some();\n   * some.on(\"beforeHi\", e => {\n   *   if(condition){\n   *     e.stop(); // When event call to stop, `hi` event not call.\n   *   }\n   *   // `currentTarget` is component instance.\n   *   console.log(some === e.currentTarget); // true\n   *\n   *   typeof e.foo; // number\n   *   typeof e.bar; // string\n   * });\n   * some.on(\"hi\", e => {\n   *   typeof e.foo.b; // boolean\n   * });\n   * // If you want to more know event design. You can see article.\n   * // https://github.com/naver/egjs-component/wiki/How-to-make-Component-event-design%3F\n   * ```\n   */\n  public trigger<K extends EventKey<T>>(event: K | ComponentEvent<T[K], K, this>, ...params: EventTriggerParams<T, K> | void[]): this {\n    const eventName = (event as any) instanceof ActualComponentEvent\n      ? (event as ActualComponentEvent<T[K]>).eventType\n      : event as K;\n\n    const handlers = [...(this._eventHandler[eventName] || [])];\n\n    if (handlers.length <= 0) {\n      return this;\n    }\n\n    if ((event as any) instanceof ActualComponentEvent) {\n      (event as ActualComponentEvent<T[K]>).currentTarget = this;\n\n      handlers.forEach((handler: (event: ComponentEvent<T[K], K, this>) => any) => {\n        handler(event as ComponentEvent<T[K], K, this>);\n      });\n    } else {\n      handlers.forEach(handler => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        handler(...params);\n      });\n    }\n\n    return this;\n  }\n\n  public once<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this;\n  public once(eventHash: EventHash<T, this>): this;\n  /**\n   * Executed event just one time.\n   * @ko 이벤트가 한번만 실행된다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of the component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: ComponentEvent;\n   * }> {\n   *   hi() {\n   *     alert(\"hi\");\n   *   }\n   *   thing() {\n   *     this.once(\"hi\", this.hi);\n   *   }\n   * }\n   *\n   * var some = new Some();\n   * some.thing();\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // fire alert(\"hi\");\n   * some.trigger(new ComponentEvent(\"hi\"));\n   * // Nothing happens\n   * ```\n   */\n  public once<K extends EventKey<T>>(eventName: K | EventHash<T, this>, handlerToAttach?: EventCallback<T, K, this>): this {\n    if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n      const eventHash = eventName;\n\n      for (const key in eventHash) {\n        this.once((key as K), eventHash[key] as EventCallback<T, K, this>);\n      }\n      return this;\n    } else if (typeof eventName === \"string\" && typeof handlerToAttach === \"function\") {\n      const listener: any = (...args: any[]) => {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n        handlerToAttach(...args);\n        this.off(eventName, listener);\n      };\n\n      this.on(eventName, listener);\n    }\n\n    return this;\n  }\n\n  /**\n   * Checks whether an event has been attached to a component.\n   * @ko 컴포넌트에 이벤트가 등록됐는지 확인한다.\n   * @param {string} eventName The name of the event to be attached <ko>등록 여부를 확인할 이벤트의 이름</ko>\n   * @return {boolean} Indicates whether the event is attached. <ko>이벤트 등록 여부</ko>\n   * @example\n   * ```ts\n   * import Component from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   some() {\n   *     this.hasOn(\"hi\");// check hi event.\n   *   }\n   * }\n   * ```\n   */\n  public hasOn<K extends EventKey<T>>(eventName: K): boolean {\n    return !!this._eventHandler[eventName];\n  }\n\n  public on<K extends EventKey<T>>(eventName: K, handlerToAttach: EventCallback<T, K, this>): this;\n  public on(eventHash: EventHash<T, this>): this;\n  /**\n   * Attaches an event to a component.\n   * @ko 컴포넌트에 이벤트를 등록한다.\n   * @param {string} eventName The name of the event to be attached or an event name - event handler mapped object.<ko>등록할 이벤트의 이름 또는 이벤트 이름-핸들러 오브젝트</ko>\n   * @param {function} handlerToAttach The handler function of the event to be attached <ko>등록할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself<ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.on(\"hi\",this.hi); //attach event\n   *   }\n   * }\n   * ```\n   */\n  public on<K extends EventKey<T>>(eventName: K | EventHash<T, this>, handlerToAttach?: EventCallback<T, K, this>): this {\n    if (typeof eventName === \"object\" && isUndefined(handlerToAttach)) {\n      const eventHash = eventName;\n\n      for (const name in eventHash) {\n        this.on(name, eventHash[name] as any);\n      }\n\n      return this;\n    } else if (typeof eventName === \"string\" &&\n      typeof handlerToAttach === \"function\") {\n      let handlerList = this._eventHandler[eventName];\n\n      if (isUndefined(handlerList)) {\n        this._eventHandler[eventName] = [];\n        handlerList = this._eventHandler[eventName];\n      }\n\n      handlerList.push(handlerToAttach as EventCallback<T, EventKey<T>, this>);\n    }\n\n    return this;\n  }\n\n  public off(eventHash?: EventHash<T, this>): this;\n  public off<K extends EventKey<T>>(eventName: K, handlerToDetach?: EventCallback<T, K, this>): this;\n  /**\n   * Detaches an event from the component.<br/>If the `eventName` is not given this will detach all event handlers attached.<br/>If the `handlerToDetach` is not given, this will detach all event handlers for `eventName`.\n   * @ko 컴포넌트에 등록된 이벤트를 해제한다.<br/>`eventName`이 주어지지 않았을 경우 모든 이벤트 핸들러를 제거한다.<br/>`handlerToAttach`가 주어지지 않았을 경우 `eventName`에 해당하는 모든 이벤트 핸들러를 제거한다.\n   * @param {string?} eventName The name of the event to be detached <ko>해제할 이벤트의 이름</ko>\n   * @param {function?} handlerToDetach The handler function of the event to be detached <ko>해제할 이벤트의 핸들러 함수</ko>\n   * @return An instance of a component itself <ko>컴포넌트 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * import Component, { ComponentEvent } from \"@egjs/component\";\n   *\n   * class Some extends Component<{\n   *   hi: void;\n   * }> {\n   *   hi() {\n   *     console.log(\"hi\");\n   *   }\n   *   some() {\n   *     this.off(\"hi\",this.hi); //detach event\n   *   }\n   * }\n   * ```\n   */\n  public off<K extends EventKey<T>>(eventName?: K | EventHash<T, this>, handlerToDetach?: EventCallback<T, K, this>): this {\n    // Detach all event handlers.\n    if (isUndefined(eventName)) {\n      this._eventHandler = {};\n      return this;\n    }\n\n    // Detach all handlers for eventname or detach event handlers by object.\n    if (isUndefined(handlerToDetach)) {\n      if (typeof eventName === \"string\") {\n        delete this._eventHandler[eventName];\n        return this;\n      } else {\n        const eventHash = eventName;\n\n        for (const name in eventHash) {\n          this.off(name, eventHash[name] as any);\n        }\n        return this;\n      }\n    }\n\n    // Detach single event handler\n    const handlerList = this._eventHandler[eventName as K];\n\n    if (handlerList) {\n      const length = handlerList.length;\n\n      for (let i = 0; i < length; ++i) {\n        if (handlerList[i] === handlerToDetach) {\n          handlerList.splice(i, 1);\n\n          if (length <= 1) {\n            delete this._eventHandler[eventName as K];\n          }\n\n          break;\n        }\n      }\n    }\n\n    return this;\n  }\n}\n\nexport default Component;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport ActualComponentEvent from \"./ActualComponentEvent\";\nimport { ComponentEventConstructor, DefaultProps } from \"./types\";\n\n// eslint-disable-next-line @typescript-eslint/naming-convention, @typescript-eslint/no-unsafe-assignment\nconst ComponentEvent = ActualComponentEvent as ComponentEventConstructor;\n\n// eslint-disable-next-line @typescript-eslint/ban-types\ntype ComponentEvent<PROPS = {}, TYPE extends string = string, THIS = any> = DefaultProps<TYPE, THIS> & PROPS;\n\nexport default ComponentEvent;\n", "/*\n * Copyright (c) 2015 NAVER Corp.\n * egjs projects are licensed under the MIT license\n */\nimport Component from \"./Component\";\nimport ComponentEvent from \"./ComponentEvent\";\n\nexport { ComponentEvent };\nexport default Component;\n", "/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nexport default class PolyMap<T> {\n  private keys: T[] = [];\n  private values: number[] = [];\n  public get(key: T): number {\n    return this.values[this.keys.indexOf(key)];\n  }\n  public set(key: T, value: number) {\n    const keys = this.keys;\n    const values = this.values;\n    const prevIndex = keys.indexOf(key);\n    const index = prevIndex === -1 ? keys.length : prevIndex;\n\n    keys[index] = key;\n    values[index] = value;\n  }\n}\n", "/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nexport default class HashMap<T> {\n  private object = {};\n  public get(key: number | string): T {\n    return this.object[key];\n  }\n  public set(key: number | string, value: T) {\n    this.object[key] = value;\n  }\n};\n\n", "/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nexport const SUPPORT_MAP = typeof Map === \"function\";\n", "/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nexport default class Link {\n  prev?: Link;\n  next?: Link;\n\n  public connect(prevLink?: Link, nextLink?: Link) {\n    this.prev = prevLink;\n    this.next = nextLink;\n\n    prevLink && (prevLink.next = this);\n    nextLink && (nextLink.prev = this);\n  }\n  public disconnect() {\n    // In double linked list, diconnect the interconnected relationship.\n    const prevLink = this.prev;\n    const nextLink = this.next;\n    prevLink && (prevLink.next = nextLink);\n    nextLink && (nextLink.prev = prevLink);\n  }\n  public getIndex() {\n    let link: Link | undefined = this;\n    let index = -1;\n\n    while (link) {\n      link = link.prev;\n      ++index;\n    }\n    return index;\n  }\n}\n", "/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nimport Link from \"./Link\";\n\nfunction orderChanged(changed: number[][], fixed: boolean[]) {\n  // It is roughly in the order of these examples.\n  // 4, 6, 0, 2, 1, 3, 5, 7\n  const fromLinks: Link[] = [];\n  // 0, 1, 2, 3, 4, 5, 6, 7\n  const toLinks: Link[] = [];\n\n  changed.forEach(([from, to]) => {\n    const link = new Link();\n\n    fromLinks[from] = link;\n    toLinks[to] = link;\n  });\n  // `fromLinks` are connected to each other by double linked list.\n  fromLinks.forEach((link, i) => {\n    link.connect(fromLinks[i - 1]);\n  });\n\n  return changed.filter((_, i) => !fixed[i]).map(([from, to], i) => {\n    if (from === to) {\n      return [0, 0];\n    }\n    const fromLink = fromLinks[from];\n    const toLink = toLinks[to - 1];\n    const fromIndex = fromLink.getIndex();\n\n    // Disconnect the link connected to `fromLink`.\n    fromLink.disconnect();\n\n    // Connect `fromLink` to the right of `toLink`.\n    if (!toLink) {\n      fromLink.connect(undefined, fromLinks[0]);\n    } else {\n      fromLink.connect(toLink, toLink.next);\n    }\n    const toIndex = fromLink.getIndex();\n    return [fromIndex, toIndex];\n  });\n}\n\nexport default class Result<T = any> {\n  public prevList: T[];\n  public list: T[];\n  public added: number[];\n  public removed: number[];\n  public changed: number[][];\n  public maintained: number[][];\n  private changedBeforeAdded: number[][];\n  private fixed: boolean[];\n\n  private cacheOrdered: number[][];\n  private cachePureChanged: number[][];\n  constructor(\n    prevList: T[],\n    list: T[],\n    added: number[],\n    removed: number[],\n    changed: number[][],\n    maintained: number[][],\n    changedBeforeAdded: number[][],\n    fixed: boolean[],\n  ) {\n    this.prevList = prevList;\n    this.list = list;\n    this.added = added;\n    this.removed = removed;\n    this.changed = changed;\n    this.maintained = maintained;\n    this.changedBeforeAdded = changedBeforeAdded;\n    this.fixed = fixed;\n  }\n  get ordered(): number[][] {\n    if (!this.cacheOrdered) {\n      this.caculateOrdered();\n    }\n    return this.cacheOrdered;\n  }\n  get pureChanged(): number[][] {\n    if (!this.cachePureChanged) {\n      this.caculateOrdered();\n    }\n    return this.cachePureChanged;\n  }\n  private caculateOrdered() {\n    const ordered = orderChanged(this.changedBeforeAdded, this.fixed);\n    const changed: number[][] = this.changed;\n    const pureChanged: number[][] = [];\n\n    this.cacheOrdered = ordered.filter(([from, to], i) => {\n      const [fromBefore, toBefore] = changed[i];\n\n      if (from !== to) {\n        pureChanged.push([fromBefore, toBefore]);\n        return true;\n      }\n    });\n    this.cachePureChanged = pureChanged;\n  }\n}\n", "/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nimport { MapInteface, DiffResult } from \"./types\";\nimport PolyMap from \"./PolyMap\";\nimport HashMap from \"./HashMap\";\nimport { SUPPORT_MAP } from \"./consts\";\nimport Result from \"./Result\";\n\n/**\n *\n * @memberof eg.ListDiffer\n * @static\n * @function\n * @param - Previous List <ko> 이전 목록 </ko>\n * @param - List to Update <ko> 업데이트 할 목록 </ko>\n * @param - This callback function returns the key of the item. <ko> 아이템의 키를 반환하는 콜백 함수입니다.</ko>\n * @return - Returns the diff between `prevList` and `list` <ko> `prevList`와 `list`의 다른 점을 반환한다.</ko>\n * @example\n * import { diff } from \"@egjs/list-differ\";\n * // script => eg.ListDiffer.diff\n * const result = diff([0, 1, 2, 3, 4, 5], [7, 8, 0, 4, 3, 6, 2, 1], e => e);\n * // List before update\n * // [1, 2, 3, 4, 5]\n * console.log(result.prevList);\n * // Updated list\n * // [4, 3, 6, 2, 1]\n * console.log(result.list);\n * // Index array of values added to `list`\n * // [0, 1, 5]\n * console.log(result.added);\n * // Index array of values removed in `prevList`\n * // [5]\n * console.log(result.removed);\n * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`\n * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n * console.log(result.changed);\n * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)\n * // [[4, 3], [3, 4], [2, 6]]\n * console.log(result.pureChanged);\n * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)\n * // [[4, 1], [4, 2], [4, 3]]\n * console.log(result.ordered);\n * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved\n * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n * console.log(result.maintained);\n */\nexport function diff<T>(\n  prevList: T[],\n  list: T[],\n  findKeyCallback?: (e: T, i: number, arr: T[]) => any\n): DiffResult<T> {\n  const mapClass: new () => MapInteface<any, number> = SUPPORT_MAP ? Map : (findKeyCallback ? HashMap : PolyMap);\n  const callback = findKeyCallback || ((e: T) => e);\n  const added: number[] = [];\n  const removed: number[] = [];\n  const maintained: number[][] = [];\n  const prevKeys = prevList.map(callback);\n  const keys = list.map(callback);\n  const prevKeyMap: MapInteface<any, number> = new mapClass();\n  const keyMap: MapInteface<any, number> = new mapClass();\n  const changedBeforeAdded: number[][] = [];\n  const fixed: boolean[] = [];\n  const removedMap: object = {};\n  let changed: number[][] = [];\n  let addedCount = 0;\n  let removedCount = 0;\n\n  // Add prevKeys and keys to the hashmap.\n  prevKeys.forEach((key, prevListIndex) => {\n    prevKeyMap.set(key, prevListIndex);\n  });\n  keys.forEach((key, listIndex) => {\n    keyMap.set(key, listIndex);\n  });\n\n  // Compare `prevKeys` and `keys` and add them to `removed` if they are not in `keys`.\n  prevKeys.forEach((key, prevListIndex) => {\n    const listIndex = keyMap.get(key);\n\n    // In prevList, but not in list, it is removed.\n    if (typeof listIndex === \"undefined\") {\n      ++removedCount;\n      removed.push(prevListIndex);\n    } else {\n      removedMap[listIndex] = removedCount;\n    }\n  });\n\n  // Compare `prevKeys` and `keys` and add them to `added` if they are not in `prevKeys`.\n  keys.forEach((key, listIndex) => {\n    const prevListIndex = prevKeyMap.get(key);\n\n    // In list, but not in prevList, it is added.\n    if (typeof prevListIndex === \"undefined\") {\n      added.push(listIndex);\n      ++addedCount;\n    } else {\n      maintained.push([prevListIndex, listIndex]);\n      removedCount = removedMap[listIndex] || 0;\n\n      changedBeforeAdded.push([\n        prevListIndex - removedCount,\n        listIndex - addedCount,\n      ]);\n      fixed.push(listIndex === prevListIndex);\n      if (prevListIndex !== listIndex) {\n        changed.push([prevListIndex, listIndex]);\n      }\n    }\n  });\n  // Sort by ascending order of 'to(list's index).\n  removed.reverse();\n\n  return new Result(\n    prevList,\n    list,\n    added,\n    removed,\n    changed,\n    maintained,\n    changedBeforeAdded,\n    fixed,\n  );\n}\n", "/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nimport { DiffResult, ListFormat } from \"./types\";\nimport { diff } from \"./utils\";\n\n/**\n * A module that checks diff when values are added, removed, or changed in an array.\n * @ko 배열 또는 오브젝트에서 값이 추가되거나 삭제되거나 순서가 변경사항을 체크하는 모듈입니다.\n * @memberof eg\n */\nclass ListDiffer<T> {\n  private list: T[];\n  /**\n   * @param - Initializing Data Array. <ko> 초기 설정할 데이터 배열.</ko>\n   * @param - This callback function returns the key of the item. <ko> 아이템의 키를 반환하는 콜백 함수입니다.</ko>\n   * @example\n   * import ListDiffer from \"@egjs/list-differ\";\n   * // script => eg.ListDiffer\n   * const differ = new ListDiffer([0, 1, 2, 3, 4, 5], e => e);\n   * const result = differ.update([7, 8, 0, 4, 3, 6, 2, 1]);\n   * // List before update\n   * // [1, 2, 3, 4, 5]\n   * console.log(result.prevList);\n   * // Updated list\n   * // [4, 3, 6, 2, 1]\n   * console.log(result.list);\n   * // Index array of values added to `list`.\n   * // [0, 1, 5]\n   * console.log(result.added);\n   * // Index array of values removed in `prevList`.\n   * // [5]\n   * console.log(result.removed);\n   * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`.\n   * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n   * console.log(result.changed);\n   * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)\n   * // [[4, 3], [3, 4], [2, 6]]\n   * console.log(result.pureChanged);\n   * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)\n   * // [[4, 1], [4, 2], [4, 3]]\n   * console.log(result.ordered);\n   * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved.\n   * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n   * console.log(result.maintained);\n   */\n  constructor(\n    list: ListFormat<T> = [],\n    private findKeyCallback?: (e: T, i: number, arr: T[]) => number | string,\n  ) {\n    this.list = [].slice.call(list);\n  }\n  /**\n   * Update list.\n   * @ko 리스트를 업데이트를 합니다.\n   * @param - List to update <ko> 업데이트할 리스트 </ko>\n   * @return - Returns the results of an update from `prevList` to `list`.<ko> `prevList`에서 `list`로 업데이트한 결과를 반환한다. </ko>\n   */\n  public update(list: ListFormat<T>): DiffResult<T> {\n    const newData: T[] = [].slice.call(list);\n    const result = diff<T>(this.list, newData, this.findKeyCallback);\n\n    this.list = newData;\n    return result;\n  }\n}\n\nexport default ListDiffer;\n", "/*\negjs-list-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nimport ListDiffer from \"./ListDiffer\";\nexport default ListDiffer;\nexport { diff } from \"./utils\";\nexport * from \"./types\";\n", "/*\negjs-children-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nexport const findKeyCallback = typeof Map === \"function\"\n  ? undefined\n  : (() => {\n    let childrenCount = 0;\n\n    return (el: Element) => (el as any).__DIFF_KEY__ || ((el as any).__DIFF_KEY__ = ++childrenCount);\n  })();\n", "/*\negjs-children-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nimport ListDiffer, { ListFormat } from \"@egjs/list-differ\";\nimport { findKeyCallback } from \"./consts\";\n\n/**\n * A module that checks diff when child are added, removed, or changed .\n * @ko 자식 노드들에서 자식 노드가 추가되거나 삭제되거나 순서가 변경된 사항을 체크하는 모듈입니다.\n * @memberof eg\n * @extends eg.ListDiffer\n */\nclass ChildrenDiffer<T extends Element = Element> extends ListDiffer<T> {\n  /**\n   * @param - Initializing Children <ko> 초기 설정할 자식 노드들</ko>\n   */\n  constructor(\n    list: ListFormat<T> = [],\n  ) {\n    super(list, findKeyCallback);\n  }\n}\nexport default ChildrenDiffer;\n", "/*\negjs-children-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nimport {diff as listdiff} from \"@egjs/list-differ\";\nimport { findKeyCallback } from \"./consts\";\nimport { ChildrenDiffResult } from \"./types\";\n\n\n/**\n *\n * @memberof eg.ChildrenDiffer\n * @static\n * @function\n * @param - Previous List <ko> 이전 목록 </ko>\n * @param - List to Update <ko> 업데이트 할 목록 </ko>\n * @return - Returns the diff between `prevList` and `list` <ko> `prevList`와 `list`의 다른 점을 반환한다.</ko>\n * @example\n * import { diff } from \"@egjs/children-differ\";\n * // script => eg.ChildrenDiffer.diff\n * const result = diff([0, 1, 2, 3, 4, 5], [7, 8, 0, 4, 3, 6, 2, 1]);\n * // List before update\n * // [1, 2, 3, 4, 5]\n * console.log(result.prevList);\n * // Updated list\n * // [4, 3, 6, 2, 1]\n * console.log(result.list);\n * // Index array of values added to `list`\n * // [0, 1, 5]\n * console.log(result.added);\n * // Index array of values removed in `prevList`\n * // [5]\n * console.log(result.removed);\n * // An array of index pairs of `prevList` and `list` with different indexes from `prevList` and `list`\n * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n * console.log(result.changed);\n * // The subset of `changed` and an array of index pairs that moved data directly. Indicate an array of absolute index pairs of `ordered`.(Formatted by: Array<[index of prevList, index of list]>)\n * // [[4, 3], [3, 4], [2, 6]]\n * console.log(result.pureChanged);\n * // An array of index pairs to be `ordered` that can synchronize `list` before adding data. (Formatted by: Array<[prevIndex, nextIndex]>)\n * // [[4, 1], [4, 2], [4, 3]]\n * console.log(result.ordered);\n * // An array of index pairs of `prevList` and `list` that have not been added/removed so data is preserved\n * // [[0, 2], [4, 3], [3, 4], [2, 6], [1, 7]]\n * console.log(result.maintained);\n */\nexport function diff<T extends Element = Element>(\n  prevList: T[],\n  list: T[],\n): ChildrenDiffResult<T> {\n  return listdiff<T>(prevList, list, findKeyCallback);\n}\n", "/*\negjs-children-differ\nCopyright (c) 2019-present NAVER Corp.\nMIT license\n*/\nimport ChildrenDiffer from \"./ChildrenDiffer\";\nexport default ChildrenDiffer;\nexport { diff } from \"./utils\";\nexport * from \"./types\";\n", "/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\n\n\n/**\n * @hidden\n */\nexport function keys<T extends Record<string, any>>(obj: T): Array<keyof T> {\n  return Object.keys(obj);\n}\n\n/**\n * @hidden\n */\nexport function camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\n\n/**\n * @hidden\n */\nexport function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\n\n/**\n * @hidden\n */\nexport function isObject(val: any): val is object {\n  return typeof val === \"object\";\n}\n\n/**\n * @hidden\n */\nexport function isFunction(val: any): val is Function {\n  return typeof val === \"function\";\n}\n", "import { isString, Ref } from \"../core\";\n\n/**\n * @hidden\n */\nexport function findTarget<Target extends Element = Element>(target: string | Target | Ref<Target> | null): Target | null {\n  let el!: Target;\n\n  if (!target) {\n    return null;\n  } if (isString(target)) {\n    el = document.querySelector<Target>(target)!;\n  } else if (target instanceof Element) {\n    el = target;\n  } else if (\"value\" in target || \"current\" in target) {\n    el = target.value! || target.current!;\n  }\n\n  return el;\n}\n\n/**\n * @description Sets the name of the class method to be exposed to the outside.\n * @category DOM\n * @return Property Decorator\n * @example\n * ```ts\n * import { withClassMethods } from \"@cfcs/core\";\n *\n * class YourFrameworkComponent {\n *   @withClassMethod(METHOD_NAMES)\n *   inst = new YourComponent();\n * }\n * ```\n */\nexport function withClassMethods(methods: readonly string[]) {\n  return function (prototype: any, memberName: string) {\n    methods.forEach((name: string) => {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function (...args) {\n        const result = this[memberName][name](...args);\n\n        // fix `this` type to return your own `class` instance to the instance using the decorator.\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\n", "export const OBSERVERS_PATH = \"__observers__\";\nexport const COMPUTED_PATH = \"__computed__\";\nexport const CFCS_DETECTED_DEPENDENCIES_VERSION = 1;\nexport const CFCS_DETECTED_DEPENDENCIES = \"__CFCS_DETECTED_DEPENDENCIES__\";\n", "import {\n  CFCS_DETECTED_DEPENDENCIES,\n  CFCS_DETECTED_DEPENDENCIES_VERSION,\n} from \"./const\";\nimport { Observer } from \"./Observer\";\n\nexport interface Detected {\n  host: Observer<any>;\n  observers: Array<Observer<any>>;\n  push(observer: Observer<any>): void;\n}\n\nexport function getDetectedStack(): Array<Detected> {\n  // Version issues do not occur when you access the native object in the global.\n  (Object as any)[CFCS_DETECTED_DEPENDENCIES] = (Object as any)[CFCS_DETECTED_DEPENDENCIES] || {};\n  const versionList = (Object as any)[CFCS_DETECTED_DEPENDENCIES];\n\n  versionList[CFCS_DETECTED_DEPENDENCIES_VERSION] = versionList[CFCS_DETECTED_DEPENDENCIES_VERSION] || [];\n\n  return versionList[CFCS_DETECTED_DEPENDENCIES_VERSION];\n}\n\nexport function getCurrentDetected(): Detected | undefined {\n  const stack = getDetectedStack();\n\n  return stack[stack.length - 1];\n}\n\nexport function detectDependencies(host: Observer<any>) {\n  const stack = getDetectedStack();\n  const observers: Array<Observer> = [];\n  const detected: Detected = {\n    host,\n    observers,\n    push(observer: Observer<any>) {\n      if (host !== observer && observers.indexOf(observer) === -1) {\n        observers.push(observer);\n      }\n    },\n  };\n\n  stack.push(detected);\n  return detected;\n}\n\nexport function endDetectDependencies() {\n  const stack = getDetectedStack();\n\n  return stack.pop();\n}\n", "import Component from \"@egjs/component\";\nimport { getCurrentDetected } from \"./detectDependencies\";\n\ninterface EmitterEvents<Value> {\n  update: (value: Value, prevValue: Value) => void;\n}\n\n/**\n * Creates a mutable ref object. You can access the `.current` value and detect the value change through `.subscribe`.\n * @category Reactive\n * @see observe\n */\nexport class Observer<Value = any> {\n  protected _current: Value;\n  protected _emitter = new Component<EmitterEvents<Value>>();\n  /**\n   *\n   */\n  constructor(value?: Value) {\n    this._current = value as any;\n  }\n  /**\n   * return the current value.\n   */\n  public get current(): Value {\n    const currentDetected = getCurrentDetected();\n\n    currentDetected?.push(this);\n    return this._current as Value;\n  }\n  public set current(value: Value) {\n    this._setCurrent(value);\n  }\n  /**\n   * When the current value changes, the callback function is called.\n   */\n  public subscribe(callback: (value: Value, prevValue: Value) => void) {\n    this.current;\n    this._emitter.on(\"update\", callback);\n    return this;\n  }\n  /**\n   * Cancel the registered subscription through callback.\n   */\n  public unsubscribe(callback?: (value: Value, prevValue: Value) => void) {\n    this._emitter.off(\"update\", callback);\n    return this;\n  }\n  protected _setCurrent(value: Value) {\n    const prevValue = this._current;\n    const isUpdate = value !== prevValue;\n\n    this._current = value;\n\n    if (isUpdate) {\n      this._emitter.trigger(\"update\", value, prevValue);\n    }\n  }\n  /**\n   * @hidden\n   */\n  public toString() {\n    return `${this.current}`;\n  }\n  /**\n   * @hidden\n   */\n  public valueOf() {\n    return this.current;\n  }\n}\n", "import { detectDependencies, endDetectDependencies } from \"./detectDependencies\";\nimport { Observer } from \"./Observer\";\n\n/**\n * @category Reactive\n * @hidden\n */\nexport class ComputedObserver<T> extends Observer<T> {\n  private _registered: Array<Observer<any>> = [];\n  /**\n   * @description Creates a new computed observer from the values of other observers.\n   * It is read-only and if you change the value of the observer used inside the callback, its value will be automatically updated.\n   * @param _computedCallback A function for observers to be computed.\n   */\n  constructor(private _computedCallback: () => T) {\n    super();\n\n    this._current = this.current;\n  }\n\n  get current() {\n    detectDependencies(this);\n    const value = this._computedCallback();\n    const results = endDetectDependencies()!;\n\n    this._registered.forEach(observer => {\n      observer.unsubscribe(this._onCheckUpdate);\n    });\n    results.observers.forEach(observer => {\n      observer.subscribe(this._onCheckUpdate);\n    });\n    this._registered = results.observers;\n\n    return value;\n  }\n\n  private _onCheckUpdate = () => {\n    this._setCurrent(this.current);\n  }\n}\n", "import { getObserver } from \"../utils\";\n\n\nfunction injectObserve(prototype: any, memberName: string, publicName = memberName) {\n  const nextAttributes: PropertyDescriptor = {\n    configurable: true,\n    get: function () {\n      return getObserver(this, publicName).current;\n    },\n    set: function (value: any) {\n      getObserver(this, publicName, value).current = value;\n    },\n  };\n  Object.defineProperty(prototype, memberName, nextAttributes);\n  if (publicName !== memberName) {\n    Object.defineProperty(prototype, publicName, {\n      configurable: true,\n      get: function () {\n        return getObserver(this, publicName).current;\n      },\n    });\n  }\n}\n\nexport function Observe(protoype: any, memberName: string): void;\nexport function Observe(name?: string): (protoype: any, memberName: string) => void;\n/**\n * @description `Observe` is a property decorator and converts the property into a `reactive state`. You can detect its status through `.subscribe`.\n * @category Reactive-Decorator\n * @see ReactiveSubscribe\n * @example\n* ```ts\nimport { ReactiveSubscribe, Observe } from \"@cfcs/core\";\n\n@ReactiveSubscribe\nclass Component {\n  // The public name and state name are the same.\n  @Observe value1 = 1;\n  // If you want to set public name and private properties separately\n  @Observe(\"value2\") _value2 = 1;\n\n  constructor() {\n    requestAnimationFrame(() => {\n      this.value1 = 2;\n    });\n  }\n}\ninterface C\n```\n */\nexport function Observe(...args: any[]) {\n  if (args.length > 1) {\n    return injectObserve(args[0], args[1]);\n  }\n\n  return (prototype: any, memberName: string) => injectObserve(prototype, memberName, args[0]);\n}\n\n\nexport function Reactive(protoype: any, memberName: string): void;\nexport function Reactive(name?: string): (protoype: any, memberName: string) => void;\n/**\n * @hidden\n */\nexport function Reactive(...args: any[]) {\n  return Observe(...args);\n}\n\n", "import { keys } from \"../../core\";\nimport { getObserver, getObservers } from \"../utils\";\n\n/**\n * @hidden\n */\nexport function injectReactiveSubscribe(object: Record<string, any>,) {\n  object[\"subscribe\"] = function (name: string, callback: (value: any) => void) {\n    this[name];\n    getObserver(this, name).subscribe(callback);\n  };\n  object[\"unsubscribe\"] = function (name?: string, callback?: (value: any) => void) {\n    if (!name) {\n      keys(getObservers(this)).forEach((observerName) => {\n        this.unsubscribe(observerName);\n      });\n      return;\n    }\n    if (!(name in this)) {\n      return;\n    }\n    getObserver(this, name).unsubscribe(callback);\n  };\n}\n\n\n/**\n * @description `ReactiveSubscribe` is a class decorator and adds `.subscribe` and `.unsubscribe` methods.\n * @category Reactive-Decorator\n * @see Observe\n * @example\n * ```ts\nimport { ReactiveSubscribe, Observe } from \"@cfcs/core\";\n\n@ReactiveSubscribe\nclass Component {\n  @Observe value1 = 1;\n\n  constructor() {\n    requestAnimationFrame(() => {\n      this.value1 = 2;\n    });\n  }\n}\n\ninterface Component extends ReactiveSubscribe<{\n  value1: number;\n  value2: number;\n}> {}\n\nconst component = new Component();\n\n// 1\nconsole.log(component.value1);\n\ncomponent.subscribe(\"value1\", nextValue => {\n  // When the change event occurs => (2, 2)\n  console.log(nextValue, component.value2);\n});\n```\n */\nexport function ReactiveSubscribe(Constructor: any) {\n  const prototype = Constructor.prototype;\n\n  injectReactiveSubscribe(prototype);\n}\n\n/**\n * `ReactiveSubscribe` is a class decorator and adds `.subscribe` and `.unsubscribe` methods.\n * @category Reactive\n */\nexport interface ReactiveSubscribe<State extends Record<string, any>> {\n  /**\n   * When the value of the property changes, the callback function is called.\n   */\n  subscribe<Name extends keyof State = keyof State>(\n    name: Name, callback: (value: State[Name]) => void): void;\n  /**\n   * Unregister the callback function corresponding to the property.\n   */\n  unsubscribe<Name extends keyof State = keyof State>(\n    name?: Name, callback?: (value: State[Name]) => void): void;\n}\n", "import { ComputedObserver } from \"./ComputedObserver\";\nimport { Observer } from \"./Observer\";\nimport { ExtractNever, isFunction, keys } from \"../core\";\nimport { Observe } from \"./decorators/Observe\";\nimport { injectReactiveSubscribe, ReactiveSubscribe } from \"./decorators/ReactiveSubscribe\";\nimport { defineObservers, isObserver, setObserver } from \"./utils\";\n\n\ntype ConvertValue<Object extends Record<string, any>> = {\n  [Key in keyof Object]: Object[Key] extends Observer<infer Type> ? Type : Object[Key];\n}\n\ntype PickObverser<Object extends Record<string, any>> = ExtractNever<{\n  [Key in keyof Object]: Object[Key] extends Observer<infer Type> ? Type : never;\n}>;\n\n/**\n * @typedef\n * @category Reactive\n */\nexport type ParitalReactiveObject<Object extends Record<string, any>>\n  = ConvertValue<Object> & ReactiveSubscribe<PickObverser<Object>>;\n\n\n/**\n * Result type of `reactive` function call\n * @category Reactive\n * @see reactive\n * @example\n *  ```js\n * import { reactive } from \"@cfcs/core\";\n *\n * // define reactive state\n * const obj = reactive({\n *   value1: 1,\n *   value2: 2,\n * });\n * ```\n */\nexport type ReactiveObject<Object extends Record<string, any>>\n= Object & ReactiveSubscribe<Object>;\n\nfunction makeReactiveObject<Object extends Record<string, any>>(\n  setup: Readonly<Object> | (() => Readonly<Object>),\n  all?: boolean,\n): ParitalReactiveObject<Object> {\n  const result = isFunction(setup) ? setup() : setup;\n  const reactiveObject: Record<string, any> = {};\n\n  defineObservers(reactiveObject);\n  keys(result).forEach((name: any) => {\n    const value = result[name];\n\n    if (isObserver(value)) {\n      setObserver(reactiveObject, name, value);\n    } else {\n      setObserver(reactiveObject, name, observe(value));\n    }\n    Observe(name)(reactiveObject, name);\n  });\n\n  injectReactiveSubscribe(reactiveObject);\n  return reactiveObject as ParitalReactiveObject<Object>;\n}\n\n/**\n * @description Make the return value of the corresponding object or function a reactive object.\n * @category Reactive\n * @param setup - The target object or function to which reactive is applied\n * @returns Makes all values into reactive objects.\n * @example\n * ```ts\n * import { reactive } from \"@cfcs/core\";\n *\n * const obj = reactive({\n *  value1: 1,\n *  value2: 2,\n * });\n *\n * obj.subscribe(\"value1\", value1 => {\n *   console.log(value1);\n * });\n * obj.value1 = 2;\n * ```\n */\nexport function reactive<Object extends Record<string, any>>(\n  setup: Readonly<Object> | (() => Readonly<Object>),\n): ReactiveObject<Object> {\n  return makeReactiveObject(setup, true) as ReactiveObject<Object>;\n}\n\n/**\n * @description Make the return value of the corresponding object or function a reactive object.\n * @category Reactive\n * @param setup - The target object or function to which reactive is applied\n * @returns Only the values to which observer is applied are objects to which reactive is applied.\n * @example\n * ```ts\n * import { partialReactive, observe } from \"@cfcs/core\";\n *\n * const value1 = observe(1);\n * const value2 = observe(2);\n * const obj = partialReactive({\n *  value1,\n *  value2,\n * });\n *\n * obj.subscribe(\"value1\", value1 => {\n *   console.log(value1);\n * });\n * value1.current = 2;\n * ```\n */\nexport function partialReactive<Object extends Record<string, any>>(\n  setup: Readonly<Object> | (() => Readonly<Object>),\n): ParitalReactiveObject<Object> {\n  return makeReactiveObject(setup);\n}\n\n/**\n * @description Creates a mutable ref object. You can access the `.current` value and detect the value change through `.subscribe`.\n * @category Reactive\n * @example\n * ```ts\n * import { observe } from \"@cfcs/core\";\n *\n * const ob1 = observe(1);\n *\n * ob1.subscribe(nextValue => {\n *   console.log(nextValue);\n * });\n *\n * ob1.current = 2;\n * ```\n */\nexport function observe<Type>(defaultValue?: Type): Observer<Type> {\n  return new Observer<Type>(defaultValue);\n}\n\n/**\n * @hidden\n */\nexport function computed<Type>(computedCallback: () => Type) {\n  return new ComputedObserver(computedCallback);\n}\n", "import { COMPUTED_PATH, OBSERVERS_PATH } from \"./const\";\nimport { Observer } from \"./Observer\";\nimport { ReactiveMethods } from \"./types\";\nimport { isObject, Ref } from \"../core\";\nimport { observe } from \"./inline\";\nimport { ReactiveSubscribe } from \"./decorators/ReactiveSubscribe\";\n\n/**\n * @hidden\n */\nexport function withReactiveMethods<\n  Instance,\n  Names extends keyof Partial<Instance>,\n  Return extends ReactiveMethods<Instance, Names>\n>(ref: Ref<Instance>, methods?: readonly Names[]): Return {\n  const obj: Record<any, any> = {};\n\n  if (!methods) {\n    return obj;\n  }\n\n  methods.forEach(name => {\n    obj[name] = function (...args: any[]) {\n      const current: any = ref.current || ref.value;\n\n      return current[name](...args);\n    };\n  });\n  return obj as Return;\n}\n\n/**\n * @hidden\n */\nexport function defineObservers(instance: any) {\n  const observers: Record<string, Observer<any>> = {};\n\n  Object.defineProperty(instance, OBSERVERS_PATH, {\n    get() {\n      return observers;\n    },\n  });\n\n  return observers;\n}\n\n/**\n * @hidden\n */\nexport function getObservers(instance: any): Record<string, Observer<any>> {\n  if (!instance[OBSERVERS_PATH]) {\n    defineObservers(instance);\n  }\n  const observers = instance[OBSERVERS_PATH];\n  const computedList = instance?.constructor?.prototype?.[COMPUTED_PATH];\n\n  if (computedList) {\n    computedList.forEach(name => {\n      if (!(name in observers) && name in instance) {\n        instance[name];\n      }\n    });\n  }\n  return observers;\n}\n\n/**\n * @hidden\n */\nexport function getObserver(instance: any, name: string, defaultValue?: any): Observer<any> {\n  const observers = getObservers(instance);\n\n  if (!observers[name]) {\n    observers[name] = observe(defaultValue);\n  }\n  return observers[name];\n}\n\n/**\n * @hidden\n */\nexport function setObserver(instance: any, name: string, observer: Observer<any>) {\n  const observers = getObservers(instance);\n\n  observers[name] = observer;\n}\n\n/**\n * @description Whether that object is an observer instance\n * @category Reactive\n */\nexport function isObserver(val: any): val is Observer {\n  return val && isObject(val) && \"current\" in val && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n\n/**\n * @description Whether the object is reactive\n * @category Reactive\n */\nexport function isReactive(val: any): val is ReactiveSubscribe<any> {\n  return val && !isObserver(val) && \"subscribe\" in val && \"unsubscribe\" in val;\n}\n", "import { isFunction, keys } from \"../core\";\nimport { Ref } from \"../core/types\";\nimport { ReactiveAdapter, ReactiveAdapterParam } from \"./ReactiveAdapter\";\nimport { ReactiveSubscribe } from \"./decorators/ReactiveSubscribe\";\nimport { ReactiveEventCallback, ReactiveState } from \"./types\";\nimport { getObservers, withReactiveMethods } from \"./utils\";\nimport Component from \"@egjs/component\";\nimport { EventKey, EventTriggerParams } from \"@egjs/component/declaration/types\";\n\n/**\n * @category Reactive\n * @hidden\n */\nexport function adaptReactive<\n  Instance extends ReactiveSubscribe<Record<string, any>>,\n  State extends Record<string, any> = ReactiveState<Instance>,\n  Methods extends keyof Partial<Instance> = never,\n  Props = any,\n  Events extends Record<string, any> = {},\n>(adapter: ReactiveAdapterParam<Instance, State, Methods, Props, Events>, props?: () => Props) {\n  const objectAdapter: ReactiveAdapter<Instance, State, Methods, Props, Events> = isFunction(adapter) ? {\n    setup: adapter,\n  } : adapter;\n\n  function getProps(): Props {\n    return props?.() ?? objectAdapter.props?.() ?? objectAdapter.data?.() ?? {} as Props;\n  }\n\n  const eventEmitter = new Component<Events>();\n  const mountedHooks: Array<(props: Props, instance?: Instance | null) => Instance | void> = [];\n  const initHooks: Array<(instance: Instance, props: Props) => void> = [];\n  const destroyHooks: Array<(instance: Instance, props: Props) => void> = [];\n  const onHooks: Array<<EventName extends EventKey<Events>>(instance: Instance, eventName: EventName, listener: ReactiveEventCallback<Events, EventName>) => void | (() => void)> = [];\n  const instanceRef: Ref<Instance> = { current: null };\n  let offHooksList: Array<Array<() => void>> = [];\n  let initialState: State | null = null;\n  let eventNames: readonly (keyof Events)[] = [];\n  let methodNames: readonly Methods[] = [];\n\n\n  const onMounted = (callback: (props: Props, instance?: Instance | null) => Instance | void) => {\n    mountedHooks.push(callback);\n  };\n  const onInit = (callback: (instance: Instance, props: Props) => void) => {\n    initHooks.push(callback);\n  };\n  const onDestroy = (callback: (instance: Instance, props: Props) => void): void => {\n    destroyHooks.push(callback)\n  };\n  const on = (callback: <EventName extends EventKey<Events>>(instance: Instance, eventName: EventName, listener: ReactiveEventCallback<Events, EventName>) => void | (() => void)) => {\n    onHooks.push(callback);\n  };\n  const emit = <EventName extends EventKey<Events>>(eventName: EventName, ...params: EventTriggerParams<Events, EventName>) => {\n    eventEmitter.trigger(eventName, ...params);\n  };\n\n  const setInitialState = (state: State) => {\n    initialState = state;\n  };\n  const setEvents = (events: readonly (keyof Events)[]) => {\n    eventNames = events;\n  }\n  const setMethods = (methods: readonly Methods[]) => {\n    methodNames = methods;\n  }\n\n  if (objectAdapter.setup) {\n    instanceRef.current = objectAdapter.setup({\n      getProps,\n      setInitialState,\n      setEvents,\n      setMethods,\n      onMounted,\n      onDestroy,\n      onInit,\n      emit,\n      on,\n    }) || null;\n  }\n\n  if (objectAdapter.created) {\n    instanceRef.current = objectAdapter.created(getProps()) || null;\n  }\n\n  if (objectAdapter.events) {\n    setEvents(objectAdapter.events);\n  }\n  if (objectAdapter.state) {\n    setInitialState(objectAdapter.state);\n  }\n  if (objectAdapter.methods) {\n    setMethods(objectAdapter.methods);\n  }\n  if (objectAdapter.mounted) {\n    onMounted(objectAdapter.mounted);\n  }\n  if (objectAdapter.destroy) {\n    destroyHooks.push(objectAdapter.destroy);\n  }\n  if (objectAdapter.init) {\n    initHooks.push(objectAdapter.init);\n  }\n  if (objectAdapter.on) {\n    onHooks.push((instance, eventName, listener) => {\n      const off = objectAdapter.on!(instance, eventName, listener);\n\n      return () => {\n        off && off();\n        objectAdapter.off?.(instance, eventName, listener);\n      };\n    });\n  }\n\n  return {\n    events: () => eventNames,\n    state(): State {\n      const inst = instanceRef.current;\n\n      if (initialState) {\n        return initialState;\n      }\n      if (inst) {\n        const observers = getObservers(inst);\n\n        setInitialState(keys(observers).reduce((prev, cur) => {\n          prev[cur] = observers[cur].current;\n          return prev;\n        }, {} as any));\n      }\n      return initialState || {} as State;\n    },\n    instance() {\n      return instanceRef.current;\n    },\n    mounted(): void {\n      const props = getProps();\n\n      mountedHooks.forEach(hook => {\n        instanceRef.current = hook(props, instanceRef.current) || instanceRef.current;\n      });\n\n    },\n    init(): void {\n      // on events\n      const instance = instanceRef.current!;\n      const props = getProps();\n\n      offHooksList = (eventNames as string[]).map(eventName => {\n        const listener = (...params: any[]) => {\n          (eventEmitter as any).trigger(eventName, ...params);\n        };\n\n        const instance = instanceRef.current!;\n\n        return onHooks.map(hook => hook(instance, eventName, listener as any)).filter(Boolean) as Array<() => void>;\n      });\n\n      // init\n      initHooks.forEach(hook => {\n        hook(instance, props);\n      });\n    },\n    destroy(): void {\n      // off events\n      offHooksList.forEach(offHooks => {\n        offHooks.forEach(hook => {\n          hook();\n        });\n      });\n\n      // destroy\n      eventEmitter.off();\n      const instance = instanceRef.current!;\n      const props = getProps();\n\n      destroyHooks.forEach(hook => {\n        hook(instance, props);\n      });\n    },\n    methods() {\n      return withReactiveMethods<any, any, any>(instanceRef, methodNames);\n    },\n    on(eventName: string, listener: ReactiveEventCallback<any, any>) {\n      eventEmitter.on(eventName, listener);\n    },\n    off(eventName: string, listener: ReactiveEventCallback<any, any>) {\n      eventEmitter.off(eventName, listener);\n    },\n  };\n}\n", "import { COMPUTED_PATH } from \"../const\";\nimport { computed } from \"../inline\";\nimport { getObserver, getObservers } from \"../utils\";\n\n\n/**\n * @description `Computed` is a property decorator.\n * Changes in computed state values are also recognized according to changes in observers used within the getter function.\n * You can detect its status through `.subscribe`.\n * @hidden\n * @category Reactive-Decorator\n * @see ReactiveSubscribe\n * @example\n * ```ts\nconst ob1 = observe(0);\nconst ob2 = observe(1);\n\n// When\n@ReactiveSubscribe\nclass TestComputed {\n    @Computed\n    get ob3() {\n        return ob1.current + ob2.current;\n    }\n}\nconst inst = new TestComputed();\n\ninst.subscribe(\"ob3\", ob3 => {\n  console.log(ob3);\n});\n\nob1.current = 1;\n```\n */\nexport function Computed(prototype: any, memberName: string, attributes: PropertyDescriptor): PropertyDescriptor {\n  const get = attributes.get!;\n  function getComputed() {\n    const observers = getObservers(this);\n\n    if (!(memberName in observers)) {\n      observers[memberName] = computed(get.bind(this));\n    }\n    return getObserver(this, memberName).current;\n  }\n  const nextAttributes: PropertyDescriptor = {\n    configurable: true,\n    get: getComputed,\n  }\n\n  if (COMPUTED_PATH in prototype) {\n    prototype[COMPUTED_PATH] ||= [];\n    const computedList = prototype[COMPUTED_PATH];\n\n    if (computedList.indexOf(memberName) === -1) {\n      computedList.push(memberName);\n    }\n  }\n  Object.defineProperty(prototype, memberName, nextAttributes);\n\n  return nextAttributes;\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nconst isWindow = typeof window !== \"undefined\";\nconst ua = isWindow ? window.navigator.userAgent : \"\";\nexport const SUPPORT_COMPUTEDSTYLE = isWindow ? !!(\"getComputedStyle\" in window) : false;\nexport const IS_IE = /MSIE|Trident|Windows Phone|Edge/.test(ua);\nexport const SUPPORT_ADDEVENTLISTENER = isWindow ? !!(\"addEventListener\" in document) : false;\nexport const WIDTH = \"width\";\nexport const HEIGHT = \"height\";\n\nexport const PROPS = [\n  \"prefix\",\n  \"loaders\",\n] as const;\n\nexport const EVENTS = [\n  \"preReadyElement\",\n  \"readyElement\",\n  \"error\",\n  \"preReady\",\n  \"ready\",\n] as const;\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport { ArrayFormat } from \"./types\";\n\nimport { SUPPORT_ADDEVENTLISTENER, SUPPORT_COMPUTEDSTYLE } from \"./consts\";\n\nexport function getAttribute(el: HTMLElement, name: string): string {\n  return el.getAttribute(name) || \"\";\n}\n\nexport function toArray<T>(arr: ArrayFormat<T>): T[] {\n  return [].slice.call(arr);\n}\nexport function hasSizeAttribute(target: HTMLElement, prefix = \"data-\"): boolean {\n  return !!target.getAttribute(`${prefix}width`);\n}\nexport function hasLoadingAttribute(target: HTMLElement, prefix = \"data-\"): target is HTMLImageElement {\n  return ((\"loading\" in target) && (target as HTMLImageElement).getAttribute(\"loading\") === \"lazy\")\n    || !!target.getAttribute(`${prefix}lazy`);\n}\nexport function hasSkipAttribute(target: HTMLElement, prefix = \"data-\"): boolean {\n  return !!target.getAttribute(`${prefix}skip`);\n}\nexport function addEvent(\n  element: EventTarget,\n  type: string,\n  handler: (...args: any[]) => void,\n) {\n  if (SUPPORT_ADDEVENTLISTENER) {\n    element.addEventListener(type, handler, false);\n  } else if ((element as any).attachEvent) {\n    (element as any).attachEvent(`on${type}`, handler);\n  } else {\n    (element as any)[`on${type}`] = handler;\n  }\n}\nexport function removeEvent(\n  element: EventTarget,\n  type: string,\n  handler: (...args: any[]) => void,\n) {\n  if (element.removeEventListener) {\n    element.removeEventListener(type, handler, false);\n  } else if ((element as any).detachEvent) {\n    (element as any).detachEvent(`on${type}`, handler);\n  } else {\n    (element as any)[`on${type}`] = null;\n  }\n}\n\nexport function innerWidth(el: HTMLElement) {\n  return getSize(el, \"Width\");\n}\nexport function innerHeight(el: HTMLElement) {\n  return getSize(el, \"Height\");\n}\nexport function getStyles(el: Element) {\n  return (SUPPORT_COMPUTEDSTYLE ?\n    window.getComputedStyle(el) : (el as any).currentStyle) || {};\n}\nfunction getSize(el: HTMLElement, name: \"Width\" | \"Height\") {\n  const size = (el as any)[`client${name}`] || (el as any)[`offset${name}`];\n\n  return parseFloat(size || getStyles(el)[name.toLowerCase()]) || 0;\n}\n\nexport function getContentElements(element: HTMLElement, tags: string[], prefix: string) {\n  const skipElements = toArray(element.querySelectorAll([\n    `[${prefix}skip] [${prefix}width]`,\n    ...tags.map(tag => ([\n      `[${prefix}skip] ${tag}`,\n      `${tag}[${prefix}skip]`,\n      `[${prefix}width] ${tag}`,\n    ]).join(\", \")),\n  ].join(\", \")));\n\n  return toArray<HTMLElement>(\n    element.querySelectorAll(`[${prefix}width], ${tags.join(\", \")}`),\n  ).filter(el => {\n    return skipElements.indexOf(el) === -1;\n  });\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport { addEvent, removeEvent, innerWidth, innerHeight, getAttribute } from \"./utils\";\nimport { WIDTH, HEIGHT } from \"./consts\";\nimport { AutoSizerElement } from \"./types\";\n\nconst elements: AutoSizerElement[] = [];\n\nexport function addAutoSizer(element: AutoSizerElement, prefix: string) {\n  !elements.length && addEvent(window, \"resize\", resizeAllAutoSizers);\n  element.__PREFIX__ = prefix;\n  elements.push(element);\n  resize(element);\n}\nexport function removeAutoSizer(element: AutoSizerElement, prefix: string) {\n  const index = elements.indexOf(element);\n\n  if (index < 0) {\n    return;\n  }\n  const fixed = getAttribute(element, `${prefix}fixed`);\n\n  delete element.__PREFIX__;\n  element.style[fixed === HEIGHT ? WIDTH : HEIGHT] = \"\";\n  elements.splice(index, 1);\n\n  !elements.length && removeEvent(window, \"resize\", resizeAllAutoSizers);\n}\nfunction resize(element: AutoSizerElement, prefix = \"data-\") {\n  const elementPrefix = element.__PREFIX__ || prefix;\n  const dataWidth = parseInt(getAttribute(element, `${elementPrefix}${WIDTH}`), 10) || 0;\n  const dataHeight = parseInt(getAttribute(element, `${elementPrefix}${HEIGHT}`), 10) || 0;\n  const fixed = getAttribute(element, `${elementPrefix}fixed`);\n\n  if (fixed === HEIGHT) {\n    const size = innerHeight(element) || dataHeight;\n\n    element.style[WIDTH] = `${dataWidth / dataHeight * size}px`;\n  } else {\n    const size = innerWidth(element) || dataWidth;\n\n    element.style[HEIGHT] = `${dataHeight / dataWidth * size}px`;\n  }\n}\nexport function resizeAllAutoSizers() {\n  elements.forEach(element => {\n    resize(element);\n  });\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport Component from \"@egjs/component\";\nimport { addAutoSizer, removeAutoSizer } from \"../AutoSizer\";\nimport { ImReadyLoaderEvents, ImReadyLoaderOptions } from \"../types\";\nimport { removeEvent, hasSizeAttribute, hasLoadingAttribute, addEvent, hasSkipAttribute } from \"../utils\";\n\n\nexport default abstract class Loader<T extends HTMLElement = any> extends Component<ImReadyLoaderEvents> {\n  public static EVENTS: string[] = [];\n  public options!: ImReadyLoaderOptions;\n  public abstract checkElement(): boolean;\n  protected element!: T;\n  protected isReady = false;\n  protected isPreReady = false;\n  protected hasDataSize = false;\n  protected hasLoading = false;\n  protected isSkip = false;\n\n  constructor(element: HTMLElement, options: Partial<ImReadyLoaderOptions> = {}) {\n    super();\n    this.options = {\n      prefix: \"data-\",\n      ...options,\n    };\n    this.element = element as T;\n    const prefix = this.options.prefix;\n\n    this.hasDataSize = hasSizeAttribute(element, prefix);\n    this.isSkip = hasSkipAttribute(element, prefix);\n    this.hasLoading = hasLoadingAttribute(element, prefix);\n  }\n  public check() {\n    if (this.isSkip || !this.checkElement()) {\n      // I'm Ready\n      this.onAlreadyReady(true);\n      return false;\n    }\n\n    if (this.hasDataSize) {\n      addAutoSizer(this.element, this.options.prefix);\n    }\n    if (this.hasDataSize || this.hasLoading) {\n      // I'm Pre Ready\n      this.onAlreadyPreReady();\n    }\n    // Wati Pre Ready, Ready\n    return true;\n  }\n  public addEvents() {\n    const element = this.element;\n    (this.constructor as typeof Loader).EVENTS.forEach(name => {\n      addEvent(element, name, this.onCheck);\n    });\n  }\n  public clear() {\n    const element = this.element;\n    (this.constructor as typeof Loader).EVENTS.forEach(name => {\n      removeEvent(element, name, this.onCheck);\n    });\n    this.removeAutoSizer();\n  }\n  public destroy() {\n    this.clear();\n    this.off();\n  }\n  public removeAutoSizer() {\n    if (this.hasDataSize) {\n      // I'm already ready.\n      const { prefix } = this.options;\n\n      removeAutoSizer(this.element, prefix);\n    }\n  }\n  public onCheck = (e?: Event) => {\n    this.clear();\n\n\n    if (e && e.type === \"error\") {\n      this.onError(this.element);\n    }\n    if (this.hasLoading && this.checkElement()) {\n      // I'm not ready\n      return;\n    }\n    // I'm pre-ready and ready!\n    const withPreReady = !this.hasDataSize && !this.hasLoading;\n\n    this.onReady(withPreReady);\n  };\n  public onError(target: HTMLElement) {\n    this.trigger(\"error\", {\n      element: this.element,\n      target: target,\n    });\n  }\n  public onPreReady() {\n    if (this.isPreReady) {\n      return;\n    }\n    this.isPreReady = true;\n    this.trigger(\"preReady\", {\n      element: this.element,\n      hasLoading: this.hasLoading,\n      isSkip: this.isSkip,\n    });\n  }\n  public onReady(withPreReady: boolean) {\n    if (this.isReady) {\n      return;\n    }\n    withPreReady = !this.isPreReady && withPreReady;\n\n    if (withPreReady) {\n      this.isPreReady = true;\n    }\n    this.removeAutoSizer();\n    this.isReady = true;\n    this.trigger(\"ready\", {\n      element: this.element,\n      withPreReady,\n      hasLoading: this.hasLoading,\n      isSkip: this.isSkip,\n    });\n  }\n  public onAlreadyError(target: HTMLElement) {\n    setTimeout(() => {\n      this.onError(target);\n    });\n  }\n  public onAlreadyPreReady() {\n    setTimeout(() => {\n      this.onPreReady();\n    });\n  }\n  public onAlreadyReady(withPreReady: boolean) {\n    setTimeout(() => {\n      this.onReady(withPreReady);\n    });\n  }\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport { addAutoSizer } from \"../AutoSizer\";\nimport { ImReadyLoaderOptions } from \"../types\";\nimport Loader from \"./Loader\";\n\n\nexport class ElementLoader<T extends HTMLElement> extends Loader<T> {\n  public static EVENTS: string[] = [];\n  public options!: ImReadyLoaderOptions;\n\n  public setHasLoading(hasLoading: boolean) {\n    this.hasLoading = hasLoading;\n  }\n  public check() {\n    if (this.isSkip) {\n      // I'm Ready\n      this.onAlreadyReady(true);\n      return false;\n    }\n\n    if (this.hasDataSize) {\n      addAutoSizer(this.element, this.options.prefix);\n      this.onAlreadyPreReady();\n    } else {\n      // has not data size\n      this.trigger(\"requestChildren\");\n    }\n    return true;\n  }\n  public checkElement() {\n    return true;\n  }\n  public destroy() {\n    this.clear();\n    this.trigger(\"requestDestroy\");\n    this.off();\n  }\n  public onAlreadyPreReady() {\n    // has data size\n    super.onAlreadyPreReady();\n    this.trigger(\"reqeustReadyChildren\");\n  }\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport Component, { ComponentEvent } from \"@egjs/component\";\nimport { ElementLoader } from \"./loaders/ElementLoader\";\nimport { ArrayFormat, ElementInfo, ImReadyEvents, ImReadyLoaderOptions, ImReadyOptions } from \"./types\";\nimport { toArray, getContentElements, hasLoadingAttribute } from \"./utils\";\n/**\n * @alias eg.ImReady\n * @extends eg.Component\n */\nclass ImReadyManager extends Component<ImReadyEvents> {\n  public options!: ImReadyOptions;\n  private readyCount = 0;\n  private preReadyCount = 0;\n  private totalCount = 0;\n  private totalErrorCount = 0;\n  private isPreReadyOver = true;\n  private elementInfos: ElementInfo[] = [];\n  /**\n   * @param - ImReady's options\n   */\n  constructor(options: Partial<ImReadyOptions> = {}) {\n    super();\n    this.options = {\n      loaders: {},\n      prefix: \"data-\",\n      ...options,\n    };\n  }\n  /**\n   * Checks whether elements are in the ready state.\n   * @ko 엘리먼트가 준비 상태인지 체크한다.\n   * @elements - Elements to check ready status. <ko> 준비 상태를 체크할 엘리먼트들.</ko>\n   * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReadyElement: e => {\n     *     // 1, 3\n     *     // 2, 3\n     *     // 3, 3\n     *     console.log(e.preReadyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n   */\n  public check(elements: ArrayFormat<HTMLElement>): this {\n    const { prefix } = this.options;\n\n    this.clear();\n    this.elementInfos = toArray(elements).map((element, index) => {\n      const loader = this.getLoader(element, { prefix });\n\n      loader.check();\n      loader.on(\"error\", e => {\n        this.onError(index, e.target);\n      }).on(\"preReady\", e => {\n        const info = this.elementInfos[index];\n\n        info.hasLoading = e.hasLoading;\n        info.isSkip = e.isSkip;\n        const isPreReady = this.checkPreReady(index);\n\n        this.onPreReadyElement(index);\n\n        isPreReady && this.onPreReady();\n      }).on(\"ready\", ({ withPreReady, hasLoading, isSkip }) => {\n        const info = this.elementInfos[index];\n\n        info.hasLoading = hasLoading;\n        info.isSkip = isSkip;\n\n        const isPreReady = withPreReady && this.checkPreReady(index);\n        const isReady = this.checkReady(index);\n\n        // Pre-ready and ready occur simultaneously\n        withPreReady && this.onPreReadyElement(index);\n        this.onReadyElement(index);\n\n        isPreReady && this.onPreReady();\n        isReady && this.onReady();\n      });\n\n      return {\n        loader,\n        element,\n        hasLoading: false,\n        hasError: false,\n        isPreReady: false,\n        isReady: false,\n        isSkip: false,\n      };\n    });\n\n    const length = this.elementInfos.length;\n\n    this.totalCount = length;\n    if (!length) {\n      setTimeout(() => {\n        this.onPreReady();\n        this.onReady();\n      });\n    }\n    return this;\n  }\n  /**\n   * Gets the total count of elements to be checked.\n   * @ko 체크하는 element의 총 개수를 가져온다.\n   */\n  public getTotalCount() {\n    return this.totalCount;\n  }\n  /**\n   * Whether the elements are all pre-ready. (all sizes are known)\n   * @ko 엘리먼트들이 모두 사전 준비가 됐는지 (사이즈를 전부 알 수 있는지) 여부.\n   */\n  public isPreReady() {\n    return this.elementInfos.every(info => info.isPreReady);\n  }\n  /**\n   * Whether the elements are all ready.\n   * @ko 엘리먼트들이 모두 준비가 됐는지 여부.\n   */\n  public isReady() {\n    return this.elementInfos.every(info => info.isReady);\n  }\n  /**\n   * Whether an error has occurred in the elements in the current state.\n   * @ko 현재 상태에서 엘리먼트들이 에러가 발생했는지 여부.\n   */\n  public hasError() {\n    return this.totalErrorCount > 0;\n  }\n  /**\n   * Clears events of elements being checked.\n   * @ko 체크 중인 엘리먼트들의 이벤트를 해제 한다.\n   */\n  public clear() {\n    this.isPreReadyOver = false;\n    this.totalCount = 0;\n    this.preReadyCount = 0;\n    this.readyCount = 0;\n    this.totalErrorCount = 0;\n    this.elementInfos.forEach(info => {\n      if (info.loader) {\n        info.loader.destroy();\n      }\n    });\n    this.elementInfos = [];\n  }\n  /**\n   * Destory all events.\n   * @ko 모든 이벤트를 해제 한다.\n   */\n  public destroy() {\n    this.clear();\n    this.off();\n  }\n  private getLoader(element: HTMLElement, options: ImReadyLoaderOptions) {\n    const tagName = element.tagName.toLowerCase();\n    const loaders = this.options.loaders;\n    const prefix = options.prefix;\n    const tags = Object.keys(loaders);\n\n    if (loaders[tagName]) {\n      return new loaders[tagName](element, options);\n    }\n    const loader = new ElementLoader(element, options);\n    const children = toArray(element.querySelectorAll<HTMLElement>(tags.join(\", \")));\n\n    loader.setHasLoading(children.some(el => hasLoadingAttribute(el, prefix)));\n    let withPreReady = false;\n\n    const childrenImReady = this.clone().on(\"error\", e => {\n      loader.onError(e.target);\n    }).on(\"ready\", () => {\n      loader.onReady(withPreReady);\n    });\n\n    loader.on(\"requestChildren\", () => {\n      // has not data size\n      const contentElements = getContentElements(element, tags, this.options.prefix);\n\n      childrenImReady.check(contentElements).on(\"preReady\", e => {\n        withPreReady = e.isReady;\n        if (!withPreReady) {\n          loader.onPreReady();\n        }\n      });\n    }).on(\"reqeustReadyChildren\", () => {\n      // has data size\n      // loader call preReady\n      // check only video, image elements\n      childrenImReady.check(children);\n    }).on(\"requestDestroy\", () => {\n      childrenImReady.destroy();\n    });\n\n    return loader;\n  }\n  private clone() {\n    return new ImReadyManager({ ...this.options });\n  }\n  private checkPreReady(index: number) {\n    this.elementInfos[index].isPreReady = true;\n    ++this.preReadyCount;\n\n\n    if (this.preReadyCount < this.totalCount) {\n      return false;\n    }\n    return true;\n  }\n  private checkReady(index: number) {\n    this.elementInfos[index].isReady = true;\n    ++this.readyCount;\n\n    if (this.readyCount < this.totalCount) {\n      return false;\n    }\n    return true;\n  }\n\n\n  private onError(index: number, target: HTMLElement) {\n    const info = this.elementInfos[index];\n\n    info.hasError = true;\n    /**\n     * An event occurs if the image, video fails to load.\n     * @ko 이미지, 비디오가 로딩에 실패하면 이벤트가 발생한다.\n     * @event eg.ImReady#error\n     * @param {eg.ImReady.OnError} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\"/>\n     *    <img src=\"ERR\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check([document.querySelector(\"div\")]).on({\n     *   error: e => {\n     *     // <div>...</div>, 0, <img src=\"ERR\"/>\n     *     console.log(e.element, e.index, e.target),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new ComponentEvent(\"error\", {\n      element: info.element,\n      index,\n      target,\n      errorCount: this.getErrorCount(),\n      totalErrorCount: ++this.totalErrorCount,\n    }));\n  }\n  private onPreReadyElement(index: number) {\n    const info = this.elementInfos[index];\n    /**\n     * An event occurs when the element is pre-ready (when the loading attribute is applied or the size is known)\n     * @ko 해당 엘리먼트가 사전 준비되었을 때(loading 속성이 적용되었거나 사이즈를 알 수 있을 때) 이벤트가 발생한다.\n     * @event eg.ImReady#preReadyElement\n     * @param {eg.ImReady.OnPreReadyElement} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReadyElement: e => {\n     *     // 1, 3\n     *     // 2, 3\n     *     // 3, 3\n     *     console.log(e.preReadyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new ComponentEvent(\"preReadyElement\", {\n      element: info.element,\n      index,\n\n      preReadyCount: this.preReadyCount,\n      readyCount: this.readyCount,\n      totalCount: this.totalCount,\n\n      isPreReady: this.isPreReady(),\n      isReady: this.isReady(),\n      hasLoading: info.hasLoading,\n      isSkip: info.isSkip,\n    }));\n  }\n  private onPreReady() {\n    this.isPreReadyOver = true;\n    /**\n     * An event occurs when all element are pre-ready (When all elements have the loading attribute applied or the size is known)\n     * @ko 모든 엘리먼트들이 사전 준비된 경우 (모든 엘리먼트들이 loading 속성이 적용되었거나 사이즈를 알 수 있는 경우) 이벤트가 발생한다.\n     * @event eg.ImReady#preReady\n     * @param {eg.ImReady.OnPreReady} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReady: e => {\n     *     // 0, 3\n     *     console.log(e.readyCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new ComponentEvent(\"preReady\", {\n      readyCount: this.readyCount,\n      totalCount: this.totalCount,\n      isReady: this.isReady(),\n      hasLoading: this.hasLoading(),\n    }));\n  }\n  private onReadyElement(index: number) {\n    const info = this.elementInfos[index];\n    /**\n     * An event occurs when the element is ready\n     * @ko 해당 엘리먼트가 준비가 되었을 때 이벤트가 발생한다.\n     * @event eg.ImReady#readyElement\n     * @param {eg.ImReady.OnReadyElement} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   readyElement: e => {\n     *     // 1, 0, false, 3\n     *     // 2, 1, false, 3\n     *     // 3, 2, true, 3\n     *     console.log(e.readyCount, e.index, e.hasError, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new ComponentEvent(\"readyElement\", {\n      index,\n      element: info.element,\n\n      hasError: info.hasError,\n      errorCount: this.getErrorCount(),\n      totalErrorCount: this.totalErrorCount,\n\n      preReadyCount: this.preReadyCount,\n      readyCount: this.readyCount,\n      totalCount: this.totalCount,\n\n      isPreReady: this.isPreReady(),\n      isReady: this.isReady(),\n\n      hasLoading: info.hasLoading,\n      isPreReadyOver: this.isPreReadyOver,\n      isSkip: info.isSkip,\n    }));\n  }\n  private onReady() {\n    /**\n     * An event occurs when all element are ready\n     * @ko 모든 엘리먼트들이 준비된 경우 이벤트가 발생한다.\n     * @event eg.ImReady#ready\n     * @param {eg.ImReady.OnReady} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```html\n     * <div>\n     *    <img src=\"./1.jpg\" data-width=\"1280\" data-height=\"853\" style=\"width:100%\"/>\n     *    <img src=\"./2.jpg\" data-width=\"1280\" data-height=\"853\"/>\n     *    <img src=\"ERR\" data-width=\"1280\" data-height=\"853\"/>\n     * </div>\n     * ```\n     * ## Javascript\n     * ```js\n     * import ImReady from \"@egjs/imready\";\n     *\n     * const im = new ImReady(); // umd: eg.ImReady\n     * im.check(document.querySelectorAll(\"img\")).on({\n     *   preReady: e => {\n     *     // 0, 3\n     *     console.log(e.readyCount, e.totalCount),\n     *   },\n     *   ready: e => {\n     *     // 1, 3\n     *     console.log(e.errorCount, e.totalCount),\n     *   },\n     * });\n     * ```\n     */\n    this.trigger(new ComponentEvent(\"ready\", {\n      errorCount: this.getErrorCount(),\n      totalErrorCount: this.totalErrorCount,\n      totalCount: this.totalCount,\n    }));\n  }\n  private getErrorCount() {\n    return this.elementInfos.filter(info => info.hasError).length;\n  }\n  private hasLoading() {\n    return this.elementInfos.some(info => info.hasLoading);\n  }\n}\n\nexport default ImReadyManager;\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport { IS_IE } from \"../consts\";\nimport Loader from \"./Loader\";\n\nexport default class ImageLoader extends Loader<HTMLImageElement> {\n  public static EVENTS = [\"load\", \"error\"];\n  public checkElement() {\n    const element = this.element;\n    const src = element.getAttribute(\"src\");\n\n    if (element.complete) {\n      if (src) {\n        // complete\n        if (!element.naturalWidth) {\n          this.onAlreadyError(element);\n        }\n        return false;\n      } else {\n        // Using an external lazy loading module\n        this.onAlreadyPreReady();\n      }\n    }\n    this.addEvents();\n    IS_IE && element.setAttribute(\"src\", src!);\n    return true;\n  }\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport Loader from \"./Loader\";\n\nexport default class VideoLoader extends Loader<HTMLVideoElement> {\n  public static EVENTS = [\"loadedmetadata\", \"error\"];\n  public checkElement() {\n    const element = this.element;\n    // HAVE_NOTHING: 0, no information whether or not the audio/video is ready\n    // HAVE_METADATA: 1, HAVE_METADATA - metadata for the audio/video is ready\n    // HAVE_CURRENT_DATA: 2, data for the current playback position is available, but not enough data to play next frame/millisecond\n    // HAVE_FUTURE_DATA: 3, data for the current and at least the next frame is available\n    // HAVE_ENOUGH_DATA: 4, enough data available to start playing\n    if (element.readyState >= 1) {\n      return false;\n    }\n    if (element.error) {\n      this.onAlreadyError(element);\n      return false;\n    }\n    this.addEvents();\n    return true;\n  }\n}\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport ImReadyManager from \"./ImReadyManager\";\nimport ImageLoader from \"./loaders/ImageLoader\";\nimport VideoLoader from \"./loaders/VideoLoader\";\nimport { ImReadyOptions } from \"./types\";\n\nclass ImReady extends ImReadyManager {\n  constructor(options: Partial<ImReadyOptions> = {}) {\n    super({\n      loaders: {\n        img: ImageLoader,\n        video: VideoLoader,\n      },\n      ...options,\n    });\n  }\n}\n\nexport default ImReady;\n", "import {\n  reactive,\n  ReactiveSetupAdapter,\n  ReactiveObject,\n  Ref,\n  isString,\n} from \"@cfcs/core\";\nimport { EVENTS } from \"./consts\";\nimport ImReady from \"./ImReady\";\nimport {\n  ImReadyEvents,\n  ImReadyReactiveProps,\n  ImReadyReactiveState,\n} from \"./types\";\nimport { toArray } from \"./utils\";\n\n\nexport type ReactiveImReady = ReactiveObject<{\n  preReadyCount: number;\n  readyCount: number;\n  errorCount: number;\n  totalErrorCount: number;\n  totalCount: number;\n  isPreReady: boolean;\n  isReady: boolean;\n  hasError: boolean;\n  isPreReadyOver: boolean;\n  add(element: HTMLElement): void;\n}>;\n\nexport const REACTIVE_IMREADY: ReactiveSetupAdapter<\n  ReactiveImReady,\n  ImReadyReactiveState,\n  \"add\",\n  Partial<ImReadyReactiveProps>,\n  ImReadyEvents\n> = ({ setEvents, setMethods, on, onInit, onDestroy, getProps }) => {\n  setEvents(EVENTS);\n  setMethods([\"add\"]);\n  const children: Array<HTMLElement | Ref<HTMLElement> | string> = [];\n  const reactiveImReady = reactive({\n    preReadyCount: 0,\n    readyCount: 0,\n    errorCount: 0,\n    totalErrorCount: 0,\n    totalCount: 0,\n    isPreReady: false,\n    isReady: false,\n    hasError: false,\n    isPreReadyOver: false,\n    add(element: HTMLElement | Ref<HTMLElement> | string) {\n      children.push(element);\n    },\n  });\n  const props = getProps() || {};\n  const imReady = new ImReady(props);\n\n  imReady\n    .on(\"error\", (e) => {\n      reactiveImReady.hasError = true;\n      reactiveImReady.errorCount = e.errorCount;\n      reactiveImReady.totalErrorCount = e.totalErrorCount;\n    })\n    .on(\"preReadyElement\", (e) => {\n      reactiveImReady.preReadyCount = e.preReadyCount;\n    })\n    .on(\"readyElement\", (e) => {\n      reactiveImReady.readyCount = e.readyCount;\n      reactiveImReady.isPreReadyOver = e.isPreReadyOver;\n    })\n    .on(\"preReady\", () => {\n      reactiveImReady.isPreReady = true;\n    })\n    .on(\"ready\", () => {\n      reactiveImReady.isReady = true;\n    });\n\n  on((_, name, callback) => {\n    imReady.on(name, callback);\n\n    return () => {\n      imReady.off(name, callback);\n    };\n  });\n  onInit(() => {\n    const selector = props?.selector;\n    let checkedElements: HTMLElement[] = [];\n\n    children.forEach((child) => {\n      if (!child) {\n        return;\n      }\n      if (isString(child)) {\n        checkedElements = [\n          ...checkedElements,\n          ...toArray(document.querySelectorAll<HTMLElement>(child)),\n        ];\n      } else if (child instanceof Element) {\n        checkedElements.push(child);\n      } else if (\"value\" in child || \"current\" in child) {\n        const element = child.value || child.current;\n\n        if (element) {\n          checkedElements.push(element);\n        }\n      }\n    });\n\n    if (selector) {\n      checkedElements = checkedElements.reduce((prev, cur) => {\n        return [\n          ...prev,\n          ...[].slice.call(cur.querySelectorAll<HTMLElement>(selector)),\n        ];\n      }, [] as HTMLElement[]);\n    }\n\n    reactiveImReady.totalCount = checkedElements.length;\n    imReady.check(checkedElements);\n  });\n  onDestroy(() => {\n    imReady.destroy();\n  });\n\n  return reactiveImReady;\n};\n", "/*\negjs-imready\nCopyright (c) 2020-present NAVER Corp.\nMIT license\n*/\nimport ImReady from \"./ImReady\";\nimport Manager from \"./ImReadyManager\";\nimport Loader from \"./loaders/Loader\";\nimport ImageLoader from \"./loaders/ImageLoader\";\nimport VideoLoader from \"./loaders/VideoLoader\";\n\nexport default ImReady;\nexport {\n  Manager,\n  VideoLoader,\n  ImageLoader,\n  Loader,\n};\nexport {\n  EVENTS,\n  PROPS,\n} from \"./consts\";\nexport * from \"./types\";\nexport * from \"./reactive\";\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport { GridOptions } from \"./types\";\n\nexport const DEFAULT_GRID_OPTIONS: Required<GridOptions> = {\n  horizontal: false,\n  useTransform: false,\n  percentage: false,\n  isEqualSize: false,\n  isConstantSize: false,\n  gap: 0,\n  attributePrefix: \"data-grid-\",\n  resizeDebounce: 100,\n  maxResizeDebounce: 0,\n  autoResize: true,\n  preserveUIOnDestroy: false,\n  defaultDirection: \"end\",\n  externalContainerManager: null,\n  externalItemRenderer: null,\n  renderOnPropertyChange: true,\n  useFit: true,\n  outlineLength: 0,\n  outlineSize: 0,\n  useRoundedSize: true,\n  useResizeObserver: false,\n  observeChildren: false,\n};\n\nexport enum PROPERTY_TYPE {\n  PROPERTY = 1,\n  RENDER_PROPERTY = 2,\n}\nexport enum MOUNT_STATE {\n  UNCHECKED = 1,\n  UNMOUNTED = 2,\n  MOUNTED = 3,\n}\nexport enum UPDATE_STATE {\n  NEED_UPDATE = 1,\n  WAIT_LOADING = 2,\n  UPDATED = 3,\n}\n\nexport const GRID_PROPERTY_TYPES = {\n  gap: PROPERTY_TYPE.RENDER_PROPERTY,\n  defaultDirection: PROPERTY_TYPE.PROPERTY,\n  renderOnPropertyChange: PROPERTY_TYPE.PROPERTY,\n  preserveUIOnDestroy: PROPERTY_TYPE.PROPERTY,\n  useFit: PROPERTY_TYPE.PROPERTY,\n  outlineSize: PROPERTY_TYPE.RENDER_PROPERTY,\n  outlineLength: PROPERTY_TYPE.RENDER_PROPERTY,\n};\n\nexport const GRID_METHODS = [\n  \"syncElements\",\n  \"updateItems\",\n  \"getItems\",\n  \"setItems\",\n  \"renderItems\",\n  \"getContainerInlineSize\",\n  \"getContainerElement\",\n] as const;\n\nexport const GRID_EVENTS = [\n  \"renderComplete\",\n  \"contentError\",\n] as const;\n\nexport const RECT_NAMES = {\n  horizontal: {\n    inlinePos: \"top\",\n    contentPos: \"left\",\n    inlineSize: \"height\",\n    contentSize: \"width\",\n  },\n  vertical: {\n    inlinePos: \"left\",\n    contentPos: \"top\",\n    inlineSize: \"width\",\n    contentSize: \"height\",\n  },\n} as const;\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"./Grid\";\nimport { GRID_METHODS, GRID_PROPERTY_TYPES, PROPERTY_TYPE } from \"./consts\";\nimport { GridItem } from \"./GridItem\";\nimport { ResizeWatcherEntry } from \"./ResizeWatcher\";\nimport { diff } from \"@egjs/children-differ\";\n\nexport function getKeys<T extends Record<string, any>>(obj: T): Array<keyof T> {\n  return Object.keys(obj);\n}\nexport function getUpdatedItems(items: GridItem[], entries: ResizeWatcherEntry[]) {\n  const mountedItems = getMountedItems(items);\n\n  return diff(\n    entries.map((entry) => entry.target),\n    mountedItems.map((item) => item.element!),\n  ).maintained.filter(([prevIndex, nextIndex]) => {\n    const entrySize = entries[prevIndex].size!;\n    const item = items[nextIndex];\n\n    return !item.inlineSize || !item.contentSize\n      || entrySize.inlineSize !== item.computedInlineSize\n      || entrySize.blockSize !== item.computedContentSize;\n  }).map(([, nextIndex]) => items[nextIndex]);\n}\nexport function getMountedItems(items: GridItem[]) {\n  return items.filter((item) => item.element);\n}\nexport function getMountedElements(items: GridItem[]) {\n  return getMountedItems(items).map((item) => item.element!);\n}\nexport function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\nexport function isObject(val: any): val is object {\n  return typeof val === \"object\";\n}\nexport function isNumber(val: any): val is number {\n  return typeof val === \"number\";\n}\nexport function camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\nexport function sum(arr: number[]) {\n  return arr.reduce((a, b) => a + b, 0);\n}\n\nexport function getDataAttributes(element: HTMLElement, attributePrefix: string) {\n  const dataAttributes: Record<string, string> = {};\n  const attributes = element.attributes;\n  const length = attributes.length;\n\n  for (let i = 0; i < length; ++i) {\n    const attribute = attributes[i];\n    const { name, value } = attribute;\n    if (name.indexOf(attributePrefix) === -1) {\n      continue;\n    }\n    dataAttributes[camelize(name.replace(attributePrefix, \"\"))] = value;\n  }\n\n  return dataAttributes;\n}\n\n/* Class Decorator */\nexport function GetterSetter(component: {\n  prototype: Grid<any>,\n  propertyTypes: typeof GRID_PROPERTY_TYPES,\n}) {\n  const {\n    prototype,\n    propertyTypes,\n  } = component;\n  for (const name in propertyTypes) {\n    const shouldRender = propertyTypes[name] === PROPERTY_TYPE.RENDER_PROPERTY;\n\n    const descriptor = Object.getOwnPropertyDescriptor(prototype, name) || {};\n\n    const getter = descriptor.get || function get(this: Grid) {\n      return this.options[name];\n    };\n    const setter = descriptor.set || function set(this: Grid, value: any) {\n      const options = this.options;\n      const prevValue = options[name];\n\n      if (prevValue === value) {\n        return;\n      }\n      options[name] = value;\n\n      if (shouldRender && options.renderOnPropertyChange) {\n        this.scheduleRender();\n      }\n    };\n    const attributes: Record<string, any> = {\n      enumerable: true,\n      configurable: true,\n      get: getter,\n      set: setter,\n    };\n    Object.defineProperty(prototype, name, attributes);\n  }\n}\n\nexport function withMethods(methods: readonly string[]) {\n  return function (prototype: any, memberName: string) {\n    methods.forEach((name: string) => {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function (...args) {\n        const result = this[memberName][name](...args);\n\n        // fix `this` type to return your own `class` instance to the instance using the decorator.\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\n\nexport function range(length: number): number[] {\n  const arr: number[] = [];\n  for (let i = 0; i < length; ++i) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function getRangeCost(value: number, valueRange: number[]) {\n  return Math.max(value - valueRange[1], valueRange[0] - value, 0) + 1;\n}\n\nexport function between(value: number, min: number, max: number) {\n  return Math.min(max, Math.max(value, min));\n}\n\nexport function throttle(num: number, unit?: number) {\n  if (!unit) {\n    return num;\n  }\n  const reverseUnit = 1 / unit;\n  return Math.round(num / unit) / reverseUnit;\n}\n\n/**\n * Decorator that makes the method of grid available in the framework.\n * @ko 프레임워크에서 그리드의 메소드를 사용할 수 있게 하는 데코레이터.\n * @memberof eg.Grid\n * @private\n * @example\n * ```js\n * import { withGridMethods } from \"@egjs/grid\";\n *\n * class Grid extends React.Component<Partial<GridProps & GridOptions>> {\n *   &#64;withGridMethods\n *   private grid: NativeGrid;\n * }\n * ```\n */\nexport const withGridMethods = withMethods(GRID_METHODS);\n", "import Component from \"@egjs/component\";\nimport { SizeRect } from \"./types\";\nimport { isString } from \"./utils\";\n\nexport interface ResizeWatherOptions {\n  resizeDebounce?: number;\n  maxResizeDebounce?: number;\n  useResizeObserver?: boolean;\n  useWindowResize?: boolean;\n  watchDirection?: \"width\" | \"height\" | \"box\" | false;\n  rectBox?: \"border-box\" | \"content-box\";\n  childrenRectBox?: \"border-box\" | \"content-box\";\n}\n\nexport interface ResizeWatcherResizeEvent {\n  isResizeContainer: boolean;\n  childEntries: ResizeWatcherEntry[];\n}\n\nexport interface ResizeWatcherEntry {\n  target: Element;\n  size?: { inlineSize: number, blockSize: number };\n}\n\nexport class ResizeWatcher {\n  private _resizeTimer = 0;\n  private _maxResizeDebounceTimer = 0;\n  private _emitter: Component<{ resize: ResizeWatcherResizeEvent }>;\n  private _observer: ResizeObserver | null;\n  protected container: HTMLElement;\n  protected rect: SizeRect = { width: 0, height: 0 };\n  private _options!: Required<ResizeWatherOptions>;\n  private _updatedEntries: ResizeWatcherEntry[] = [];\n\n  constructor(container: HTMLElement | string, options: ResizeWatherOptions = {}) {\n    this._options = {\n      resizeDebounce: 100,\n      maxResizeDebounce: 0,\n      useResizeObserver: false,\n      useWindowResize: true,\n      watchDirection: false,\n      rectBox: \"content-box\",\n      childrenRectBox: \"border-box\",\n      ...options,\n    };\n\n    this.container = isString(container) ? document.querySelector<HTMLElement>(container)! : container;\n    this._init();\n  }\n  public getRect() {\n    return this.rect;\n  }\n  public setRect(rect: SizeRect) {\n    this.rect = { ...rect };\n  }\n  public isObserverEnabled() {\n    return !!this._observer;\n  }\n  public resize() {\n    const container = this.container;\n\n    this.setRect(this._options.rectBox === \"border-box\" ? {\n      width: container.offsetWidth,\n      height: container.offsetHeight,\n    } : {\n      width: container.clientWidth,\n      height: container.clientHeight,\n    });\n  }\n  public observeChildren(children: Element[]) {\n    const observer = this._observer;\n\n    if (!observer) {\n      return;\n    }\n    const box = this._options.childrenRectBox;\n\n    children.forEach((element) => {\n      if (element) {\n        observer.observe(element, {\n          box,\n        });\n      }\n    });\n  }\n  public unobserveChildren(children: Element[]) {\n    const observer = this._observer;\n\n    if (!observer) {\n      return;\n    }\n    children.forEach((element) => {\n      if (element) {\n        observer.unobserve(element);\n      }\n    });\n  }\n  public listen(callback: (e: ResizeWatcherResizeEvent) => void) {\n    this._emitter.on(\"resize\", callback);\n    return this;\n  }\n  public destroy() {\n    this._observer?.disconnect();\n    if (this._options.useWindowResize) {\n      window.removeEventListener(\"resize\", this._onWindowResize);\n    }\n  }\n  private _init() {\n    const container = this.container;\n    const options = this._options;\n\n    this._emitter = new Component();\n    if (options.useResizeObserver && !!window.ResizeObserver) {\n      this._observer = new window.ResizeObserver(this._onObserve);\n      this._observer.observe(container, {\n        box: options.rectBox,\n      });\n    }\n    if (options.useWindowResize) {\n      window.addEventListener(\"resize\", this._onWindowResize);\n    }\n    this.resize();\n  }\n  private _onWindowResize = () => {\n    this._scheduleResize([{\n      target: this.container,\n    }]);\n  }\n  private _onObserve = (entries: ResizeObserverEntry[]) => {\n    const options = this._options;\n    const container = this.container;\n    const containerRectBox = options.rectBox;\n    const childrenRectBox = options.childrenRectBox;\n\n    this._scheduleResize(entries.map((entry) => {\n      const target = entry.target;\n      const rectBox = target === container ? containerRectBox : childrenRectBox;\n      let sizes = (rectBox === \"border-box\" ? entry.borderBoxSize : entry.contentBoxSize);\n\n      // Safari < 15.3\n      if (!sizes) {\n        const contentRect = entry.contentRect;\n\n        sizes = [{\n          inlineSize: contentRect.width,\n          blockSize: contentRect.height,\n        }];\n      }\n      return {\n        // not array in old browser\n        size: sizes[0] || sizes as any,\n        target: entry.target,\n      };\n    }));\n  }\n  private _scheduleResize = (entries: ResizeWatcherEntry[]) => {\n    const {\n      resizeDebounce,\n      maxResizeDebounce,\n    } = this._options;\n\n    const updatedEntries = this._updatedEntries;\n\n    updatedEntries.push(...entries);\n    this._updatedEntries = updatedEntries.filter((entry, index) => {\n      return updatedEntries.lastIndexOf(entry) === index;\n    });\n\n\n    if (!this._maxResizeDebounceTimer && maxResizeDebounce >= resizeDebounce) {\n      this._maxResizeDebounceTimer = window.setTimeout(this._onResize, maxResizeDebounce);\n    }\n    if (this._resizeTimer) {\n      clearTimeout(this._resizeTimer);\n      this._resizeTimer = 0;\n    }\n    this._resizeTimer = window.setTimeout(this._onResize, resizeDebounce);\n  }\n  private _onResize = () => {\n    clearTimeout(this._resizeTimer);\n    clearTimeout(this._maxResizeDebounceTimer);\n\n    this._maxResizeDebounceTimer = 0;\n    this._resizeTimer = 0;\n\n    const updated = this._updatedEntries;\n    const container = this.container;\n    let containerEntry!: ResizeWatcherEntry;\n    const childEntries = updated.filter((entry) => {\n      if (entry.target === container) {\n        containerEntry = entry;\n        return false;\n      } else {\n        return true;\n      }\n    });\n    const isResizeChildren = childEntries.length > 0;\n    let isResizeContainer = !!containerEntry;\n\n    if (isResizeContainer) {\n      const watchDirection = this._options.watchDirection;\n      const prevRect = this.rect;\n      const containerEntrySize = containerEntry.size;\n\n      if (containerEntrySize) {\n        // ResizeObserver\n        this.setRect({\n          width: containerEntrySize.inlineSize,\n          height: containerEntrySize.blockSize,\n        });\n      } else {\n        // window's resize event\n        this.resize();\n      }\n      const rect = this.rect;\n      const isWatchWidth = watchDirection === \"box\" || watchDirection === \"width\";\n      const isWatchHeight = watchDirection === \"box\" || watchDirection === \"height\";\n\n      isResizeContainer = !watchDirection\n        || (isWatchWidth && prevRect.width !== rect.width)\n        || (isWatchHeight && prevRect.height !== rect.height);\n    }\n    this._updatedEntries = [];\n\n    if (isResizeContainer || isResizeChildren) {\n      this._emitter.trigger(\"resize\", {\n        isResizeContainer,\n        childEntries,\n      });\n    }\n  }\n}\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Component from \"@egjs/component\";\nimport { DestroyOptions, SizeRect } from \"./types\";\nimport { ResizeWatcherResizeEvent, ResizeWatcher } from \"./ResizeWatcher\";\nimport { DEFAULT_GRID_OPTIONS, RECT_NAMES } from \"./consts\";\n\nexport interface ContainerManagerOptions {\n  horizontal?: boolean;\n  autoResize?: boolean;\n  resizeDebounce?: number;\n  maxResizeDebounce?: number;\n  useResizeObserver?: boolean;\n}\n\nexport interface ContainerManagerStatus {\n  rect: SizeRect;\n}\nexport interface ContainerManagerEvents {\n  resize: ResizeWatcherResizeEvent;\n}\nexport class ContainerManager extends Component<ContainerManagerEvents> {\n  protected options: Required<ContainerManagerOptions>;\n  protected orgCSSText: string;\n  protected _watcher: ResizeWatcher;\n\n  constructor(protected container: HTMLElement, options: ContainerManagerOptions) {\n    super();\n    this.options = {\n      horizontal: DEFAULT_GRID_OPTIONS.horizontal,\n      autoResize: DEFAULT_GRID_OPTIONS.autoResize,\n      resizeDebounce: DEFAULT_GRID_OPTIONS.resizeDebounce,\n      maxResizeDebounce: DEFAULT_GRID_OPTIONS.maxResizeDebounce,\n      useResizeObserver: DEFAULT_GRID_OPTIONS.useResizeObserver,\n      ...options,\n    };\n\n    this._init();\n  }\n  public resize() {\n    const container = this.container;\n\n    this.setRect({\n      width: container.clientWidth,\n      height: container.clientHeight,\n    });\n  }\n  public isObserverEnabled() {\n    return this._watcher.isObserverEnabled();\n  }\n  public getRect() {\n    return this._watcher.getRect();\n  }\n  public observeChildren(children: Element[]) {\n    this._watcher.observeChildren(children);\n  }\n  public unobserveChildren(children: Element[]) {\n    this._watcher.unobserveChildren(children);\n  }\n  public setRect(rect: SizeRect) {\n    this._watcher.setRect(rect);\n  }\n  public getInlineSize() {\n    return this.getRect()[this._names.inlineSize];\n  }\n  public getContentSize() {\n    return this.getRect()[this._names.contentSize];\n  }\n  public getStatus() {\n    return { rect: this._watcher.getRect() };\n  }\n  public setStatus(status: ContainerManagerStatus) {\n    this.setRect(status.rect);\n    this.setContentSize(this.getContentSize());\n  }\n  public setContentSize(size: number) {\n    const sizeName = this.options.horizontal ? \"width\" : \"height\";\n    this.setRect({\n      ...this.getRect(),\n      [sizeName]: size,\n    });\n    this.container.style[sizeName] = `${size}px`;\n  }\n  public destroy(options: DestroyOptions = {}) {\n    this._watcher.destroy();\n\n    if (!options.preserveUI) {\n      this.container.style.cssText = this.orgCSSText;\n    }\n  }\n  private _init() {\n    const container = this.container;\n    const style = window.getComputedStyle(container);\n\n    this.orgCSSText = container.style.cssText;\n\n    if (style.position === \"static\") {\n      container.style.position = \"relative\";\n    }\n    const options = this.options;\n\n    this._watcher = new ResizeWatcher(container, {\n      useWindowResize: options.autoResize,\n      useResizeObserver: options.useResizeObserver,\n      resizeDebounce: options.resizeDebounce,\n      maxResizeDebounce: options.maxResizeDebounce,\n      watchDirection: options.useResizeObserver ? this._names.inlineSize : false,\n    }).listen(this._onResize);\n  }\n  private _onResize = (e: ResizeWatcherResizeEvent) => {\n    this.trigger(\"resize\", e);\n  }\n  private get _names() {\n    return RECT_NAMES[this.options.horizontal ? \"horizontal\" : \"vertical\"];\n  }\n}\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport { DEFAULT_GRID_OPTIONS, MOUNT_STATE, RECT_NAMES, UPDATE_STATE } from \"./consts\";\nimport { GridItem } from \"./GridItem\";\nimport { DOMRect } from \"./types\";\nimport { getDataAttributes, getKeys } from \"./utils\";\n\nexport interface ItemRendererOptions {\n  attributePrefix?: string;\n  useTransform?: boolean;\n  horizontal?: boolean;\n  percentage?: Array<\"position\" | \"size\"> | boolean;\n  isEqualSize?: boolean;\n  isConstantSize?: boolean;\n  useRoundedSize?: boolean;\n}\nexport interface ItemRendererStatus {\n  initialRects: Record<string, Required<DOMRect>>;\n}\n\nexport class ItemRenderer {\n  protected options: Required<ItemRendererOptions>;\n  protected containerRect: DOMRect;\n  protected initialRects: Record<string, Required<DOMRect>> = {};\n  protected sizePercetage = false;\n  protected posPercetage = false;\n\n  constructor(options: ItemRendererOptions) {\n    this.options = {\n      attributePrefix: DEFAULT_GRID_OPTIONS.attributePrefix,\n      useTransform: DEFAULT_GRID_OPTIONS.useTransform,\n      horizontal: DEFAULT_GRID_OPTIONS.horizontal,\n      percentage: DEFAULT_GRID_OPTIONS.percentage,\n      isEqualSize: DEFAULT_GRID_OPTIONS.isEqualSize,\n      isConstantSize: DEFAULT_GRID_OPTIONS.isConstantSize,\n      useRoundedSize: DEFAULT_GRID_OPTIONS.useRoundedSize,\n      ...options,\n    };\n    this._init();\n  }\n  public resize() {\n    this.initialRects = {};\n  }\n  public renderItems(items: GridItem[]) {\n    items.forEach((item) => {\n      this._renderItem(item);\n    });\n  }\n  public getInlineSize() {\n    return this.containerRect[this.options.horizontal ? \"height\" : \"width\"]!;\n  }\n  public setContainerRect(rect: DOMRect) {\n    this.containerRect = rect;\n  }\n  public updateEqualSizeItems(items: GridItem[], totalItems: GridItem[]) {\n    this.updateItems(items);\n\n    const hasSizeGroup = items.some((item) => item.attributes.sizeGroup);\n\n    // Check the rest of the items(totalItems) except `items`.\n    if (this.options.isEqualSize || hasSizeGroup) {\n      const updatedItem = items.some((item) => item.updateState === UPDATE_STATE.UPDATED);\n\n      if (updatedItem) {\n        totalItems.forEach((item) => {\n          if (items.indexOf(item) === -1) {\n            this.updateItem(item, true);\n          }\n        });\n      }\n    }\n  }\n  public updateItems(items: GridItem[]) {\n    items.forEach((item) => {\n      this.updateItem(item);\n    });\n  }\n  public getStatus(): ItemRendererStatus {\n    return {\n      initialRects: this.initialRects,\n    };\n  }\n  public setStatus(status: ItemRendererStatus) {\n    this.initialRects = status.initialRects;\n  }\n  private _init() {\n    const { percentage } = this.options;\n\n    let sizePercentage = false;\n    let posPercentage = false;\n\n    if (percentage === true) {\n      sizePercentage = true;\n      posPercentage = true;\n    } else if (percentage) {\n      if (percentage.indexOf(\"position\") > -1) {\n        posPercentage = true;\n      }\n      if (percentage.indexOf(\"size\") > -1) {\n        sizePercentage = true;\n      }\n    }\n\n    this.posPercetage = posPercentage;\n    this.sizePercetage = sizePercentage;\n  }\n  public updateItem(item: GridItem, checkSizeGroup?: boolean) {\n    const { isEqualSize, isConstantSize, useRoundedSize } = this.options;\n    const initialRects = this.initialRects;\n    const { orgRect, element } = item;\n    const isLoading = item.updateState === UPDATE_STATE.WAIT_LOADING;\n    const hasOrgSize = orgRect && orgRect.width && orgRect.height;\n    let rect: Required<DOMRect>;\n\n    const attributes: Record<string, string> = element\n      ? getDataAttributes(element, this.options.attributePrefix)\n      : item.attributes;\n    const sizeGroup = attributes.sizeGroup ?? \"\";\n    const isNotEqualSize = attributes.notEqualSize;\n\n    if (sizeGroup !== \"\" && initialRects[sizeGroup]) {\n      rect = initialRects[sizeGroup];\n    } else if (isEqualSize && !isNotEqualSize && !sizeGroup && initialRects[\"\"]) {\n      rect = initialRects[\"\"];\n    } else if (isConstantSize && hasOrgSize && !isLoading) {\n      rect = orgRect;\n    } else if (checkSizeGroup || !element) {\n      return;\n    } else {\n      rect = {\n        left: element.offsetLeft,\n        top: element.offsetTop,\n        width: 0,\n        height: 0,\n      };\n      if (useRoundedSize) {\n        rect.width = element.offsetWidth;\n        rect.height = element.offsetHeight;\n      } else {\n        const clientRect = element.getBoundingClientRect();\n\n        rect.width = clientRect.width;\n        rect.height = clientRect.height;\n      }\n    }\n    item.attributes = attributes;\n    item.shouldReupdate = false;\n\n    if (!item.isFirstUpdate || !hasOrgSize) {\n      item.orgRect = { ...rect };\n    }\n    item.rect = { ...rect };\n\n    // If it's equal size items, it doesn't affect the state.\n    if (!checkSizeGroup) {\n      if (item.element) {\n        item.mountState = MOUNT_STATE.MOUNTED;\n      }\n\n      if (item.updateState === UPDATE_STATE.NEED_UPDATE) {\n        item.updateState = UPDATE_STATE.UPDATED;\n        item.isFirstUpdate = true;\n      }\n      if (!isLoading && !isNotEqualSize && !initialRects[sizeGroup]) {\n        initialRects[sizeGroup] = { ...rect };\n      }\n    }\n\n    return rect;\n  }\n  private _renderItem(item: GridItem) {\n    const element = item.element;\n    const cssRect = item.cssRect;\n\n    if (!element || !cssRect) {\n      return;\n    }\n\n    const {\n      horizontal,\n      useTransform,\n    } = this.options;\n    const posPercentage = this.posPercetage;\n    const sizePercentage = this.sizePercetage;\n    const cssTexts: string[] = [\"position: absolute;\"];\n    const {\n      inlineSize: sizeName,\n      inlinePos: posName,\n    } = RECT_NAMES[horizontal ? \"horizontal\" : \"vertical\"];\n    const inlineSize = this.getInlineSize();\n    let keys = getKeys(cssRect);\n    const hasRectProperties = keys.length > 0;\n\n    if (useTransform) {\n      keys = keys.filter((key) => key !== \"top\" && key !== \"left\");\n\n      cssTexts.push(`transform: `\n        + `translate(${cssRect.left || 0}px, ${cssRect.top || 0}px);`\n      );\n    }\n    cssTexts.push(...keys.map((name) => {\n      const value = cssRect[name]!;\n\n      if (\n        (name === sizeName && sizePercentage) ||\n        (name === posName && posPercentage)\n      ) {\n        return `${name}: ${(value / inlineSize) * 100}%;`;\n      }\n      return `${name}: ${value}px;`;\n    }));\n\n    if (hasRectProperties) {\n      element.style.cssText += cssTexts.join(\"\");\n    }\n  }\n}\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport { DOMRect, GridRect } from \"./types\";\nimport { MOUNT_STATE, RECT_NAMES, UPDATE_STATE } from \"./consts\";\n\n/**\n * @typedef\n * @memberof Grid.GridItem\n * @property - The item key. <ko>아이템 키.</ko>\n * @property - The item index. <ko>아이템 index.</ko>\n * @property - The element for the item. <ko>아이템에 있는 엘리먼트.</ko>\n * @property - State of whether the element has been added to the container. <ko>element가 container에 추가되었는지 상태.</ko>\n * @property - The update state of the element's rect. <ko>element의 rect의 업데이트 상태.</ko>\n * @property - Whether the element's rect was updated for the first time. <ko>처음으로 element의 rect를 업데이트 했는지 여부.</ko>\n * @property - Attributes set as `data-grid-` of element. <ko>element의 `data-grid-`으로 설정된 속성들.</ko>\n * @property - cssText of the first style when an element is added to the container. <ko>element가 container에 추가됐을 때 처음 style의 cssText.</ko>\n * @property - The element's rect before first rendering. <ko>처음 렌더링 하기 전 엘리먼트의 rect.</ko>\n * @property - The updated element's rect before rendering. <ko>렌더링 하기 전 업데이트 된 엘리먼트의 rect.</ko>\n * @property - The CSS rect of the item to be rendered by being applied to the Grid. <ko>Grid에 적용되어 렌더링을 하기 위한 item의 CSS rect</ko>\n * @property - Additional data of the item. <ko>item의 추가적인 데이터들.</ko>\n * @property - Grid ready data for rendering. <ko>렌더링을 하기 위한 grid의 준비 데이터.</ko>\n */\nexport interface GridItemStatus {\n  key?: string | number;\n  index?: number;\n  element?: HTMLElement | null;\n  mountState?: MOUNT_STATE;\n  updateState?: UPDATE_STATE;\n  isFirstUpdate?: boolean;\n  attributes?: Record<string, any>;\n  orgCSSText?: string;\n  orgRect?: Required<DOMRect>;\n  rect?: Required<DOMRect>;\n  cssRect?: DOMRect;\n  data?: Record<string, any>;\n  gridData?: Record<string, any>;\n}\n\n/**\n * @memberof Grid\n * @implements Grid.GridItem.GridItemStatus\n */\nclass GridItem {\n  /**\n   * Whether or not it will be updated upon request.\n   * @inner\n   */\n  public isUpdating = false;\n  /**\n   * Whether the item needs to be updated again\n   * @inner\n   */\n  public shouldReupdate = false;\n  public hasTransition = false;\n  public transitionDuration = \"\";\n  public isRestoreOrgCSSText = true;\n\n  /**\n   * @constructor\n   * @param horizontal - Direction of the scroll movement. (true: horizontal, false: vertical) <ko>스크롤 이동 방향. (true: 가로방향, false: 세로방향)</ko>\n   * @param itemStatus - Default status object of GridItem module. <ko>GridItem 모듈의 기본 status 객체.</ko>\n   */\n  constructor(\n    protected horizontal: boolean,\n    itemStatus: Partial<GridItemStatus> = {},\n  ) {\n    const element = itemStatus.element;\n    const status: Required<GridItemStatus> = {\n      key: \"\",\n      index: 0,\n      orgRect: { left: 0, top: 0, width: 0, height: 0 },\n      rect: { left: 0, top: 0, width: 0, height: 0 },\n      cssRect: {},\n      attributes: {},\n      data: {},\n      isFirstUpdate: false,\n      mountState: MOUNT_STATE.UNCHECKED,\n      updateState: UPDATE_STATE.NEED_UPDATE,\n      element: element || null,\n      orgCSSText: element?.style.cssText ?? \"\",\n      gridData: {},\n      ...itemStatus,\n    };\n\n    for (const name in status) {\n      this[name] = status[name];\n    }\n  }\n  /**\n   * The size in inline direction before first rendering. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko 첫 렌더링 되기 전의 inline 방향의 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#orgInlineSize\n   */\n  public get orgInlineSize() {\n    const name = this._names.inlineSize;\n\n    return this.orgRect[name] || this.rect[name];\n  }\n  /**\n   * The size in content direction before first rendering. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko 첫 렌더링 되기 전의 content 방향의 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#orgContentSize\n   */\n  public get orgContentSize() {\n    const name = this._names.contentSize;\n\n    return this.orgRect[name] || this.rect[name];\n  }\n  /**\n   * The size in inline direction. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko inline 방향의 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#inlineSize\n   */\n  public get inlineSize() {\n    return this.rect[this._names.inlineSize];\n  }\n  /**\n   * The size in content direction. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko content 방향의 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#contentSize\n   */\n  public get contentSize() {\n    return this.rect[this._names.contentSize];\n  }\n  /**\n   * The CSS size in inline direction applied to the Grid. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko Grid에 적용된 inline 방향의 CSS 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#cssInlineSize\n   */\n  public get cssInlineSize() {\n    return this.cssRect[this._names.inlineSize];\n  }\n  /**\n   * The CSS size in content direction applied to the Grid. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko Grid에 적용된 content 방향의 CSS 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#cssContentSize\n   */\n  public get cssContentSize() {\n    return this.cssRect[this._names.contentSize];\n  }\n  /**\n   * The CSS pos in inline direction applied to the Grid. \"left\" if horizontal is false, \"top\" otherwise.\n   * @ko Grid에 적용된 inline 방향의 CSS 포지션. horizontal이 false면 \"left\", 아니면 \"top\".\n   * @member Grid.GridItem#cssInlinePos\n   */\n  public get cssInlinePos() {\n    return this.cssRect[this._names.inlinePos];\n  }\n  /**\n   * The CSS pos in content direction applied to the Grid. \"top\" if horizontal is false, \"left\" otherwise.\n   * @ko Grid에 적용된 content 방향의 CSS 포지션. horizontal이 false면 \"top\", 아니면 \"left\".\n   * @member Grid.GridItem#cssContentPos\n   */\n  public get cssContentPos() {\n    return this.cssRect[this._names.contentPos];\n  }\n  public set cssInlinePos(inlinePos: number | undefined) {\n    this.cssRect[this._names.inlinePos] = inlinePos;\n  }\n  public set cssContentPos(contentPos: number | undefined) {\n    this.cssRect[this._names.contentPos] = contentPos;\n  }\n  public set cssInlineSize(inlineSize: number | undefined) {\n    this.cssRect[this._names.inlineSize] = inlineSize;\n  }\n  public set cssContentSize(contentSize: number | undefined) {\n    this.cssRect[this._names.contentSize] = contentSize;\n  }\n  /**\n   * Calculated size in the direction of the inline applied to the grid. \"width\" if horizontal is false, \"height\" otherwise.\n   * @ko Grid에 적용된 inline 방향의 계산된 사이즈. horizontal이 false면 \"width\", 아니면 \"height\".\n   * @member Grid.GridItem#computedInlineSize\n   */\n  public get computedInlineSize() {\n    const name = this._names.inlineSize;\n\n    return this.cssRect[name] || this.rect[name] || this.orgRect[name];\n  }\n  /**\n   * Calculated size in the direction of the content applied to the grid. \"height\" if horizontal is false, \"width\" otherwise.\n   * @ko Grid에 적용된 content 방향의 계산된 사이즈. horizontal이 false면 \"height\", 아니면 \"width\".\n   * @member Grid.GridItem#computedContentSize\n   */\n  public get computedContentSize() {\n    const name = this._names.contentSize;\n\n    return this.cssRect[name] || this.rect[name] || this.orgRect[name];\n  }\n  /**\n   * Calculated position in the direction of the inline applied to the grid. \"left\" if horizontal is false, \"top\" otherwise.\n   * @ko Grid에 적용된 content 방향의 계산된 포지션. horizontal이 false면 \"left\", 아니면 \"top\".\n   * @member Grid.GridItem#computedInlinePos\n   */\n  public get computedInlinePos() {\n    const name = this._names.inlinePos;\n\n    return this.cssRect[name] ?? this.rect[name];\n  }\n  /**\n   * Calculated position in the direction of the content applied to the grid. \"top\" if horizontal is false, \"left\" otherwise.\n   * @ko Grid에 적용된 content 방향의 계산된 포지션. horizontal이 false면 \"top\", 아니면 \"left\".\n   * @member Grid.GridItem#computedContentPos\n   */\n  public get computedContentPos() {\n    const name = this._names.contentPos;\n\n    return this.cssRect[name] ?? this.rect[name];\n  }\n  /**\n   * Set CSS Rect through GridRect.\n   * @ko GridRect을 통해 CSS Rect를 설정한다.\n   * @param - The style for setting CSS rect. <ko>CSS rect를 설정하기 위한 스타일.</ko>\n   */\n  public setCSSGridRect(gridRect: GridRect) {\n    const names = RECT_NAMES[this.horizontal ? \"horizontal\" : \"vertical\"];\n\n    const rect: DOMRect = {};\n\n    for (const name in gridRect) {\n      rect[names[name]] = gridRect[name];\n    }\n    this.cssRect = rect;\n  }\n  /**\n   * Returns the status of the item.\n   * @ko 아이템의 상태를 반환한다.\n   */\n  public getStatus(): Required<GridItemStatus> {\n    return {\n      index: this.index,\n      mountState: this.mountState,\n      updateState: this.updateState,\n      attributes: this.attributes,\n      orgCSSText: this.orgCSSText,\n      isFirstUpdate: this.isFirstUpdate,\n      element: null,\n      key: this.key,\n      orgRect: this.orgRect,\n      rect: this.rect,\n      cssRect: this.cssRect,\n      gridData: this.gridData,\n      data: this.data,\n    };\n  }\n  /**\n   * Returns minimized status of the item.\n   * @ko 아이템의 간소화된 상태를 반환한다.\n   */\n  public getMinimizedStatus(): Partial<GridItemStatus> {\n    const status: Partial<GridItemStatus> = {\n      orgRect: this.orgRect,\n      rect: this.rect,\n      cssRect: this.cssRect,\n      attributes: this.attributes,\n      gridData: this.gridData,\n    };\n\n    const {\n      key,\n      mountState,\n      updateState,\n      isFirstUpdate,\n      orgCSSText,\n    } = this;\n    if (typeof key !== \"undefined\") {\n      status.key = key;\n    }\n    if (mountState !== MOUNT_STATE.UNCHECKED) {\n      status.mountState = mountState;\n    }\n    if (updateState !== UPDATE_STATE.NEED_UPDATE) {\n      status.updateState = updateState;\n    }\n    if (isFirstUpdate) {\n      status.isFirstUpdate = true;\n    }\n    if (orgCSSText) {\n      status.orgCSSText = orgCSSText;\n    }\n    return status;\n  }\n  private get _names() {\n    return this.horizontal ? RECT_NAMES.horizontal : RECT_NAMES.vertical;\n  }\n}\n\ninterface GridItem extends Required<GridItemStatus> {\n}\nexport { GridItem };\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Component from \"@egjs/component\";\nimport { DEFAULT_GRID_OPTIONS, GRID_PROPERTY_TYPES, MOUNT_STATE, UPDATE_STATE } from \"./consts\";\nimport { ContainerManager } from \"./ContainerManager\";\nimport {\n  DestroyOptions, GridEvents, GridOptions,\n  GridOutlines, GridStatus, Properties, RenderOptions,\n  OnRenderComplete,\n} from \"./types\";\nimport ImReady from \"@egjs/imready\";\nimport { ItemRenderer } from \"./ItemRenderer\";\nimport { GetterSetter, getMountedElements, isNumber, isString, getUpdatedItems } from \"./utils\";\nimport { diff } from \"@egjs/children-differ\";\nimport { GridItem } from \"./GridItem\";\nimport { ResizeWatcherResizeEvent } from \"./ResizeWatcher\";\n\n/**\n * @extends eg.Component\n */\n@GetterSetter\nabstract class Grid<Options extends GridOptions = GridOptions> extends Component<GridEvents> {\n  public static defaultOptions: Required<GridOptions> = DEFAULT_GRID_OPTIONS;\n  public static propertyTypes = GRID_PROPERTY_TYPES;\n  public options: Required<Options>;\n  protected containerElement: HTMLElement;\n  protected containerManager: ContainerManager;\n  protected itemRenderer!: ItemRenderer;\n  protected items: GridItem[] = [];\n  protected outlines: GridOutlines = {\n    start: [],\n    end: [],\n  };\n  private _renderTimer = 0;\n  private _im: ImReady;\n\n  /**\n  * Apply the CSS rect of items to fit the Grid and calculate the outline.\n  * @ko  Grid에 맞게 아이템들의 CSS rect를 적용하고 outline을 계산한다.\n  * @abstract\n  * @method Grid#applyGrid\n  * @param {\"start\" | \"end\"} direcion - The direction to apply the Grid. (\"end\": start to end, \"start\": end to start) <ko>Grid를 적용할 방향. (\"end\": 시작에서 끝 방향, \"start\": 끝에서 시작 방향)</ko>\n  * @param {number[]} outline - The start outline to apply the Grid. <ko>Grid를 적용할 시작 outline.</ko>\n  */\n  public abstract applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines;\n\n  /**\n   * @param - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n   * @param - The option object of the Grid module <ko>Grid 모듈의 옵션 객체</ko>\n   */\n  constructor(containerElement: HTMLElement | string, options: Partial<Options> = {}) {\n    super();\n\n    this.options = {\n      ...((this.constructor as typeof Grid)\n        .defaultOptions as Required<Options>),\n      ...options,\n    };\n\n    this.containerElement = isString(containerElement)\n      ? document.querySelector<HTMLElement>(containerElement)!\n      : containerElement;\n\n    const {\n      isEqualSize,\n      isConstantSize,\n      useTransform,\n      horizontal,\n      percentage,\n      externalContainerManager,\n      externalItemRenderer,\n      resizeDebounce,\n      maxResizeDebounce,\n      autoResize,\n      useRoundedSize,\n      useResizeObserver,\n    } = this.options;\n\n    // TODO: 테스트용 설정\n    this.containerManager = externalContainerManager!\n      || new ContainerManager(this.containerElement, {\n        horizontal,\n        resizeDebounce,\n        maxResizeDebounce,\n        autoResize,\n        useResizeObserver,\n      }).on(\"resize\", this._onResize);\n    this.itemRenderer = externalItemRenderer!\n      || new ItemRenderer({\n        useTransform,\n        isEqualSize,\n        isConstantSize,\n        percentage,\n        useRoundedSize,\n      });\n\n    this._init();\n  }\n  /**\n   * Return Container Element.\n   * @ko 컨테이너 엘리먼트를 반환한다.\n   */\n  public getContainerElement(): HTMLElement {\n    return this.containerElement;\n  }\n  /**\n   * Return items.\n   * @ko 아이템들을 반환한다.\n   */\n  public getItems(): GridItem[] {\n    return this.items;\n  }\n  /**\n   * Returns the children of the container element.\n   * @ko 컨테이너 엘리먼트의 children을 반환한다.\n   */\n  public getChildren(): HTMLElement[] {\n    return [].slice.call(this.containerElement.children);\n  }\n  /**\n   * Set items.\n   * @ko 아이템들을 설정한다.\n   * @param items - The items to set. <ko>설정할 아이템들</ko>\n   */\n  public setItems(items: GridItem[]): this {\n    items.forEach((item, i) => {\n      item.index = i;\n    });\n    const options = this.options;\n\n    if (options.useResizeObserver && options.observeChildren) {\n      const containerManager = this.containerManager;\n\n      containerManager.unobserveChildren(getMountedElements(this.items));\n      containerManager.observeChildren(getMountedElements(items));\n    }\n    this.items = items;\n    return this;\n  }\n  /**\n   * Gets the container's inline size. (\"width\" if horizontal is false, otherwise \"height\")\n   * @ko container의 inline 사이즈를 가져온다. (horizontal이 false면 \"width\", 아니면 \"height\")\n   */\n  public getContainerInlineSize(): number {\n    return this.containerManager.getInlineSize()!;\n  }\n  /**\n   * Returns the outlines of the start and end of the Grid.\n   * @ko Grid의 처음과 끝의 outline을 반환한다.\n   */\n  public getOutlines(): GridOutlines {\n    return this.outlines;\n  }\n  /**\n   * Set outlines.\n   * @ko 아웃라인을 설정한다.\n   * @param outlines - The outlines to set. <ko>설정할 아웃라인.</ko>\n   */\n  public setOutlines(outlines: GridOutlines) {\n    this.outlines = outlines;\n    return this;\n  }\n  /**\n   * When elements change, it synchronizes and renders items.\n   * @ko elements가 바뀐 경우 동기화를 하고 렌더링을 한다.\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public syncElements(options: RenderOptions = {}) {\n    const items = this.items;\n    const { horizontal } = this.options;\n    const elements: HTMLElement[] = this.getChildren();\n    const { added, maintained, changed, removed } = diff(this.items.map((item) => item.element!), elements);\n\n    const nextItems: GridItem[] = [];\n\n    maintained.forEach(([beforeIndex, afterIndex]) => {\n      nextItems[afterIndex] = items[beforeIndex];\n    });\n    added.forEach((index) => {\n      nextItems[index] = new GridItem(horizontal!, {\n        element: elements[index],\n      });\n    });\n\n    this.setItems(nextItems);\n\n    if (added.length || removed.length || changed.length) {\n      this.renderItems(options);\n    }\n    return this;\n  }\n  /**\n   * Update the size of the items and render them.\n   * @ko 아이템들의 사이즈를 업데이트하고 렌더링을 한다.\n   * @param - Items to be updated. <ko>업데이트할 아이템들.</ko>\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public updateItems(items: GridItem[] = this.items, options: RenderOptions = {}) {\n    const useOrgResize = options.useOrgResize;\n\n    items.forEach((item) => {\n      if (useOrgResize) {\n        const orgRect = item.orgRect;\n\n        orgRect.width = 0;\n        orgRect.height = 0;\n      }\n      item.updateState = UPDATE_STATE.NEED_UPDATE;\n    });\n    this.checkReady(options);\n    return this;\n  }\n  /**\n   * Rearrange items to fit the grid and render them. When rearrange is complete, the `renderComplete` event is fired.\n   * @ko grid에 맞게 아이템을 재배치하고 렌더링을 한다. 배치가 완료되면 `renderComplete` 이벤트가 발생한다.\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   * @example\n   * ```js\n   * import { MasonryGrid } from \"@egjs/grid\";\n   * const grid = new MasonryGrid();\n   *\n   * grid.on(\"renderComplete\", e => {\n   *   console.log(e);\n   * });\n   * grid.renderItems();\n   * ```\n   */\n  public renderItems(options: RenderOptions = {}) {\n    this._renderItems(options);\n    return this;\n  }\n  /**\n   * Returns current status such as item's position, size. The returned status can be restored with the setStatus() method.\n   * @ko 아이템의 위치, 사이즈 등 현재 상태를 반환한다. 반환한 상태는 setStatus() 메서드로 복원할 수 있다.\n   * @param - Whether to minimize the status of the item. (default: false) <ko>item의 status를 최소화할지 여부. (default: false)</ko>\n   */\n  public getStatus(minimize?: boolean): GridStatus {\n    return {\n      outlines: this.outlines,\n      items: this.items.map((item) => minimize ? item.getMinimizedStatus() : item.getStatus()),\n      containerManager: this.containerManager.getStatus(),\n      itemRenderer: this.itemRenderer.getStatus(),\n    };\n  }\n  /**\n   * Set status of the Grid module with the status returned through a call to the getStatus() method.\n   * @ko getStatus() 메서드에 대한 호출을 통해 반환된 상태로 Grid 모듈의 상태를 설정한다.\n   */\n  public setStatus(status: GridStatus) {\n    const horizontal = this.options.horizontal;\n    const containerManager = this.containerManager;\n    const prevInlineSize = containerManager.getInlineSize();\n    const children = this.getChildren();\n\n    this.itemRenderer.setStatus(status.itemRenderer);\n    containerManager.setStatus(status.containerManager);\n    this.outlines = status.outlines;\n    this.items = status.items.map((item, i) => new GridItem(horizontal!, {\n      ...item,\n      element: children[i],\n    }));\n\n    this.itemRenderer.renderItems(this.items);\n\n    if (prevInlineSize !== containerManager.getInlineSize()) {\n      this.renderItems({\n        useResize: true,\n      });\n    } else {\n      window.setTimeout(() => {\n        this._renderComplete({\n          direction: this.defaultDirection,\n          mounted: this.items,\n          updated: [],\n          isResize: false,\n        });\n      });\n    }\n    return this;\n  }\n  /**\n   * Get the inline size corresponding to outline.\n   * @ko outline에 해당하는 inline 사이즈를 구한다.\n   * @param items - Items to get outline size. <ko>outline 사이즈를 구하기 위한 아이템들.</ko>\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public getComputedOutlineSize(items: GridItem[] = this.items) {\n    return this.options.outlineSize! || this.getContainerInlineSize();\n  }\n  /**\n   * Get the length corresponding to outline.\n   * @ko outline에 해당하는 length를 가져온다.\n   * @param items - Items to get outline length. <ko>outline length를 구하기 위한 아이템들.</ko>\n   */\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public getComputedOutlineLength(items: GridItem[] = this.items): number {\n    return this.options.outlineLength! || 1;\n  }\n\n  /**\n   * Releases the instnace and events and returns the CSS of the container and elements.\n   * @ko 인스턴스와 이벤트를 해제하고 컨테이너와 엘리먼트들의 CSS를 되돌린다.\n   * @param Options for destroy. <ko>destory()를 위한 옵션</ko>\n   */\n  public destroy(options: DestroyOptions = {}) {\n    const {\n      preserveUI = this.options.preserveUIOnDestroy,\n    } = options;\n    this.containerManager.destroy({\n      preserveUI,\n    });\n\n    if (!preserveUI) {\n      this.items.forEach(({ element, orgCSSText }) => {\n        if (element) {\n          element.style.cssText = orgCSSText;\n        }\n      });\n    }\n\n    this._im?.destroy();\n  }\n  protected getInlineGap(): number {\n    return this._getDirectionalGap('inline');\n  }\n  protected getContentGap(): number {\n    return this._getDirectionalGap('content');\n  }\n  protected checkReady(options: RenderOptions = {}) {\n    // Grid: renderItems => checkReady => readyItems => applyGrid\n    const items = this.items;\n    const updated = items.filter((item) => item.element?.parentNode && item.updateState !== UPDATE_STATE.UPDATED);\n    const mounted = items.filter((item) => item.element?.parentNode && item.mountState !== MOUNT_STATE.MOUNTED);\n    const moreUpdated: GridItem[] = [];\n\n    mounted.filter((item) => {\n      if (item.hasTransition) {\n        return true;\n      } else {\n        const element = item.element!;\n        const transitionDuration = parseFloat(getComputedStyle(element).transitionDuration);\n\n        if (transitionDuration > 0) {\n          item.hasTransition = true;\n          item.transitionDuration = element.style.transitionDuration;\n          return true;\n        }\n      }\n      return false;\n    }).forEach((item) => {\n      item.element!.style.transitionDuration = \"0s\";\n    });\n    this._im?.destroy();\n    this._im = new ImReady({\n      prefix: this.options.attributePrefix,\n    }).on(\"preReadyElement\", (e) => {\n      updated[e.index].updateState = UPDATE_STATE.WAIT_LOADING;\n    }).on(\"preReady\", () => {\n      // reset org size\n      updated.forEach((item) => {\n        const hasOrgSize = item.orgRect.width && item.orgRect.height;\n        const hasCSSSize = item.cssRect.width || item.cssRect.height;\n\n        if (!hasOrgSize && hasCSSSize) {\n          item.element!.style.cssText = item.orgCSSText;\n        }\n      });\n      this._updateItems(updated);\n      this.readyItems(mounted, updated, options);\n    }).on(\"readyElement\", (e) => {\n      const item = updated[e.index];\n\n      item.updateState = UPDATE_STATE.NEED_UPDATE;\n      // after preReady\n      if (e.isPreReadyOver) {\n        if (item.isRestoreOrgCSSText) {\n          item.element!.style.cssText = item.orgCSSText;\n        }\n        this._updateItems([item]);\n        this.readyItems([], [item], options);\n      }\n    }).on(\"error\", (e) => {\n      const item = updated[e.index];\n      /**\n       * This event is fired when an error occurs in the content.\n       * @ko 콘텐츠 로드에 에러가 날 때 발생하는 이벤트.\n       * @event Grid#contentError\n       * @param {Grid.OnContentError} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n       * @example\n       * ```js\n       * grid.on(\"contentError\", e => {\n       *   e.update();\n       * });\n       * ```\n      */\n      this.trigger(\"contentError\", {\n        element: e.element,\n        target: e.target,\n        item,\n        update: () => {\n          moreUpdated.push(item);\n        },\n      });\n    }).on(\"ready\", () => {\n      if (moreUpdated.length) {\n        this.updateItems(moreUpdated);\n      }\n    }).check(updated.map((item) => item.element!));\n  }\n\n  protected scheduleRender() {\n    this._clearRenderTimer();\n    this._renderTimer = window.setTimeout(() => {\n      this.renderItems();\n    });\n  }\n  protected fitOutlines(useFit = this.useFit) {\n    const outlines = this.outlines;\n    const startOutline = outlines.start;\n    const endOutline = outlines.end;\n    const outlineOffset = startOutline.length ? Math.min(...startOutline) : 0;\n\n    // If the outline is less than 0, a fit occurs forcibly.\n    if (!useFit && outlineOffset > 0) {\n      return;\n    }\n\n    outlines.start = startOutline.map((point) => point - outlineOffset);\n    outlines.end = endOutline.map((point) => point - outlineOffset);\n\n    this.items.forEach((item) => {\n      const contentPos = item.cssContentPos;\n\n      if (!isNumber(contentPos)) {\n        return;\n      }\n      item.cssContentPos = contentPos - outlineOffset;\n    });\n  }\n  protected readyItems(mounted: GridItem[], updated: GridItem[], options: RenderOptions) {\n    const prevOutlines = this.outlines;\n    const direction = options.direction || this.options.defaultDirection!;\n    const prevOutline = options.outline || prevOutlines[direction === \"end\" ? \"start\" : \"end\"];\n    const items = this.items;\n    let nextOutlines = {\n      start: [...prevOutline],\n      end: [...prevOutline],\n    };\n\n    mounted.forEach((item) => {\n      item.mountState = MOUNT_STATE.MOUNTED;\n    });\n    updated.forEach((item) => {\n      item.isUpdating = true;\n    });\n    if (items.length) {\n      nextOutlines = this.applyGrid(this.items, direction, prevOutline);\n    }\n    updated.forEach((item) => {\n      item.isUpdating = false;\n    });\n    this.setOutlines(nextOutlines);\n    this.fitOutlines();\n    this.itemRenderer.renderItems(this.items);\n    this._refreshContainerContentSize();\n\n    const transitionMounted = mounted.filter((item) => item.hasTransition);\n\n    if (transitionMounted.length) {\n      this.containerManager.resize();\n      transitionMounted.forEach((item) => {\n        const element = item.element!;\n\n        element.style.transitionDuration = item.transitionDuration;\n      });\n    }\n    this._renderComplete({\n      direction,\n      mounted,\n      updated,\n      isResize: !!options.useResize,\n    });\n    const shouldReupdateItems = updated.filter((item) => item.shouldReupdate);\n\n    if (shouldReupdateItems.length) {\n      this.updateItems(shouldReupdateItems);\n    }\n  }\n  protected _isObserverEnabled() {\n    return this.containerManager.isObserverEnabled();\n  }\n  protected _updateItems(items: GridItem[]) {\n    this.itemRenderer.updateEqualSizeItems(items, this.getItems());\n  }\n  private _getDirectionalGap(direction: 'inline' | 'content'): number {\n    const horizontal = this.options.horizontal!;\n    const gap = this.options.gap!;\n    if (typeof gap === 'number') return gap;\n    const isVerticalGap = horizontal && direction === 'inline' || !horizontal && direction === 'content';\n    return (isVerticalGap ? (gap as any).vertical : (gap as any).horizontal) ?? (DEFAULT_GRID_OPTIONS[\"gap\"] as number);\n  }\n  private _renderComplete(e: OnRenderComplete) {\n    /**\n     * This event is fired when the Grid has completed rendering.\n     * @ko Grid가 렌더링이 완료됐을 때  발생하는 이벤트이다.\n     * @event Grid#renderComplete\n     * @param {Grid.OnRenderComplete} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     * @example\n     * ```js\n     * grid.on(\"renderComplete\", e => {\n     *   console.log(e.mounted, e.updated, e.useResize);\n     * });\n     * ```\n     */\n    this.trigger(\"renderComplete\", e);\n  }\n  private _clearRenderTimer() {\n    clearTimeout(this._renderTimer);\n    this._renderTimer = 0;\n  }\n  private _refreshContainerContentSize() {\n    const {\n      start: startOutline,\n      end: endOutline,\n    } = this.outlines;\n    const contentGap = this.getContentGap();\n\n    const endPoint = endOutline.length ? Math.max(...endOutline) : 0;\n    const startPoint = startOutline.length ? Math.max(...startOutline) : 0;\n    const contentSize = Math.max(startPoint, endPoint - contentGap);\n\n    this.containerManager.setContentSize(contentSize);\n  }\n  private _resizeContainer() {\n    this.containerManager.resize();\n    this.itemRenderer.setContainerRect(this.containerManager.getRect());\n  }\n  private _onResize = (e: ResizeWatcherResizeEvent) => {\n    if (e.isResizeContainer) {\n      this._renderItems({\n        useResize: true,\n      }, true);\n    } else {\n      const updatedItems = getUpdatedItems(this.items, e.childEntries);\n\n      if (updatedItems.length > 0) {\n        this.updateItems(updatedItems);\n      }\n    }\n  }\n  private _init() {\n    this._resizeContainer();\n  }\n  private _renderItems(options: RenderOptions = {}, isTrusted?: boolean) {\n    this._clearRenderTimer();\n\n    const isResize = options.useResize || options.useOrgResize;\n\n\n    if (isResize && !isTrusted) {\n      // Resize container\n      // isTrusted has already been resized internally.\n      this._resizeContainer();\n      this.itemRenderer.resize();\n    }\n\n    if (!this.getItems().length && this.getChildren().length) {\n      this.syncElements(options);\n    } else if (isResize) {\n      // Update all items\n      this.updateItems(this.items, options);\n    } else {\n      // Update only items that need to be updated.\n      this.checkReady(options);\n    }\n  }\n}\n\ninterface Grid extends Properties<typeof Grid> { }\n\nexport default Grid;\n\n/**\n * Gap used to create space around items.\n * @ko 아이템들 사이의 공간.\n * @name Grid#gap\n * @type {$ts:Grid.GridOptions[\"gap\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   gap: 0,\n * });\n *\n * grid.gap = 5;\n * ```\n */\n\n/**\n * The default direction value when direction is not set in the render option.\n * @ko render옵션에서 direction을 미설정시의 기본 방향값.\n * @name Grid#defaultDirection\n * @type {$ts:Grid.GridOptions[\"defaultDirection\"]}\n * @default \"end\"\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   defaultDirection: \"end\",\n * });\n *\n * grid.defaultDirection = \"start\";\n * ```\n */\n\n\n/**\n * Whether to move the outline to 0 when the top is empty when rendering. However, if it overflows above the top, the outline is forced to 0. (default: true)\n * @ko 렌더링시 상단이 비어있을 때 아웃라인을 0으로 이동시킬지 여부. 하지만 상단보다 넘치는 경우 아웃라인을 0으로 강제 이동한다. (default: true)\n * @name Grid#useFit\n * @type {$ts:Grid.GridOptions[\"useFit\"]}\n * @default true\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   useFit: true,\n * });\n *\n * grid.useFit = false;\n * ```\n */\n\n/**\n * Whether to preserve the UI of the existing container or item when destroying.\n * @ko destroy 시 기존 컨테이너, 아이템의 UI를 보존할지 여부.\n * @name Grid#preserveUIOnDestroy\n * @type {$ts:Grid.GridOptions[\"preserveUIOnDestroy\"]}\n * @default false\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   preserveUIOnDestroy: false,\n * });\n *\n * grid.preserveUIOnDestroy = true;\n * ```\n */\n\n\n/**\n * The number of outlines. If the number of outlines is 0, it is calculated according to the type of grid.\n * @ko outline의 개수. 아웃라인의 개수가 0이라면 grid의 종류에 따라 계산이 된다.\n * @name Grid#outlineLength\n * @type {$ts:Grid.GridOptions[\"outlineLength\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   outlineLength: 0,\n *   outlineSize: 0,\n * });\n *\n * grid.outlineLength = 3;\n * ```\n */\n\n\n/**\n * The size of the outline. If the outline size is 0, it is calculated according to the grid type.\n * @ko outline의 사이즈. 만약 outline의 사이즈가 0이면, grid의 종류에 따라 계산이 된다.\n * @name Grid#outlineSize\n * @type {$ts:Grid.GridOptions[\"outlineSize\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   outlineLength: 0,\n *   outlineSize: 0,\n * });\n *\n * grid.outlineSize = 300;\n * ```\n */\n\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"../Grid\";\nimport { PROPERTY_TYPE, UPDATE_STATE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines, GridAlign, MasonryGridVerticalAlign } from \"../types\";\nimport { range, GetterSetter } from \"../utils\";\nimport { GridItem } from \"../GridItem\";\n\n\nfunction getColumnPoint(\n  outline: number[],\n  columnIndex: number,\n  columnCount: number,\n  pointCaculationName: \"max\" | \"min\",\n) {\n  return Math[pointCaculationName](...outline.slice(columnIndex, columnIndex + columnCount));\n}\n\nfunction getColumnIndex(\n  outline: number[],\n  columnCount: number,\n  nearestCalculationName: \"max\" | \"min\",\n  startPos: number,\n) {\n  const length = outline.length - columnCount + 1;\n  const pointCaculationName = nearestCalculationName === \"max\" ? \"min\" : \"max\";\n  const indexCaculationName = nearestCalculationName === \"max\" ? \"lastIndexOf\" : \"indexOf\";\n  const points = range(length).map((index) => {\n    const point = getColumnPoint(outline, index, columnCount, pointCaculationName);\n\n    return Math[pointCaculationName](startPos, point);\n  });\n\n  return points[indexCaculationName](Math[nearestCalculationName](...points));\n}\n\n/**\n * @typedef\n * @memberof Grid.MasonryGrid\n * @extends Grid.GridOptions\n */\nexport interface MasonryGridOptions extends GridOptions {\n  /**\n   * The number of columns. If the number of columns is 0, it is automatically calculated according to the size of the container. Can be used instead of outlineLength.\n   * <ko>열의 개수. 열의 개수가 0이라면, 컨테이너의 사이즈에 의해 계산이 된다. outlineLength 대신 사용할 수 있다.</ko>\n   * @default 0\n   */\n  column?: number;\n  /**\n   * The size of the columns. If it is 0, it is calculated as the size of the first item in items. Can be used instead of outlineSize.\n   * <ko>열의 사이즈. 만약 열의 사이즈가 0이면, 아이템들의 첫번째 아이템의 사이즈로 계산이 된다. outlineSize 대신 사용할 수 있다.</ko>\n   * @default 0\n   */\n  columnSize?: number;\n  /**\n   * The size ratio(inlineSize / contentSize) of the columns. 0 is not set.\n   * <ko>열의 사이즈 비율(inlineSize / contentSize). 0은 미설정이다.</ko>\n   * @default 0\n   */\n  columnSizeRatio?: number;\n  /**\n   * Align of the position of the items. If you want to use `stretch`, be sure to set `column`, `columnSize` or `maxStretchColumnSize` option. (\"start\", \"center\", \"end\", \"justify\", \"stretch\")\n   * <ko>아이템들의 위치의 정렬. `stretch`를 사용하고 싶다면 `column`, `columnSize` 또는 `maxStretchColumnSize` 옵션을 설정해라.  (\"start\", \"center\", \"end\", \"justify\", \"stretch\")</ko>\n   * @default \"justify\"\n   */\n  align?: GridAlign;\n  /**\n   * Content direction alignment of items. “Masonry” is sorted in the form of masonry. Others are applied as content direction alignment, similar to vertical-align of inline-block.\n   * If you set multiple columns (`data-grid-column`), the screen may look strange.\n   * <ko>아이템들의 Content 방향의 정렬. \"masonry\"는 masonry 형태로 정렬이 된다. 그 외는 inline-block의 vertical-align과 유사하게 content 방향 정렬로 적용이 된다.칼럼(`data-grid-column` )을 여러개 설정하면 화면이 이상하게 보일 수 있다. </ko>\n   * @default \"masonry\"\n   */\n  contentAlign?: MasonryGridVerticalAlign;\n  /**\n   * Difference Threshold for Counting Columns. Since offsetSize is calculated by rounding, the number of columns may not be accurate.\n   * <ko>칼럼 개수를 계산하기 위한 차이 임계값. offset 사이즈는 반올림으로 게산하기 때문에 정확하지 않을 수 있다.</ko>\n   * @default 1\n   */\n  columnCalculationThreshold?: number;\n  /**\n   * If stretch is used, the column can be automatically calculated by setting the maximum size of the column that can be stretched.\n   * <ko>stretch를 사용한 경우 최대로 늘릴 수 있는 column의 사이즈를 설정하여 column을 자동 계산할 수 있다.</ko>\n   * @default Infinity\n   */\n  maxStretchColumnSize?: number;\n}\n\n/**\n * MasonryGrid is a grid that stacks items with the same width as a stack of bricks. Adjust the width of all images to the same size, find the lowest height column, and insert a new item.\n * @ko MasonryGrid는 벽돌을 쌓아 올린 모양처럼 동일한 너비를 가진 아이템를 쌓는 레이아웃이다. 모든 이미지의 너비를 동일한 크기로 조정하고, 가장 높이가 낮은 열을 찾아 새로운 이미지를 삽입한다. 따라서 배치된 아이템 사이에 빈 공간이 생기지는 않지만 배치된 레이아웃의 아래쪽은 울퉁불퉁해진다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.MasonryGrid.MasonryGridOptions} options - The option object of the MasonryGrid module <ko>MasonryGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class MasonryGrid extends Grid<MasonryGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    column: PROPERTY_TYPE.RENDER_PROPERTY,\n    columnSize: PROPERTY_TYPE.RENDER_PROPERTY,\n    columnSizeRatio: PROPERTY_TYPE.RENDER_PROPERTY,\n    align: PROPERTY_TYPE.RENDER_PROPERTY,\n    columnCalculationThreshold: PROPERTY_TYPE.RENDER_PROPERTY,\n    maxStretchColumnSize: PROPERTY_TYPE.RENDER_PROPERTY,\n    contentAlign: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<MasonryGridOptions> = {\n    ...Grid.defaultOptions,\n    align: \"justify\",\n    column: 0,\n    columnSize: 0,\n    columnSizeRatio: 0,\n    columnCalculationThreshold: 0.5,\n    maxStretchColumnSize: Infinity,\n    contentAlign: \"masonry\",\n  };\n\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    items.forEach((item) => {\n      item.isRestoreOrgCSSText = false;\n    });\n    const columnSize = this.getComputedOutlineSize(items);\n    const column = this.getComputedOutlineLength(items);\n\n    const {\n      align,\n      observeChildren,\n      columnSizeRatio,\n      contentAlign,\n    } = this.options;\n    const inlineGap = this.getContentGap();\n    const contentGap = this.getContentGap();\n    const outlineLength = outline.length;\n    const itemsLength = items.length;\n    const alignPoses = this._getAlignPoses(column, columnSize);\n    const isEndDirection = direction === \"end\";\n    const nearestCalculationName = isEndDirection ? \"min\" : \"max\";\n    const pointCalculationName = isEndDirection ? \"max\" : \"min\";\n    let startOutline = [0];\n\n    if (outlineLength === column) {\n      startOutline = outline.slice();\n    } else {\n      const point = outlineLength ? Math[pointCalculationName](...outline) : 0;\n\n      startOutline = range(column).map(() => point);\n    }\n    let endOutline = startOutline.slice();\n    const columnDist = column > 1 ? alignPoses[1] - alignPoses[0] : 0;\n    const isStretch = align === \"stretch\";\n    const isStartContentAlign = isEndDirection && contentAlign === \"start\";\n\n\n    let startPos = isEndDirection ? -Infinity : Infinity;\n\n\n    if (isStartContentAlign) {\n      // support only end direction\n      startPos = Math.min(...endOutline);\n    }\n\n    for (let i = 0; i < itemsLength; ++i) {\n      const item = items[isEndDirection ? i : itemsLength - 1 - i];\n      const columnAttribute = parseInt(item.attributes.column || \"1\", 10);\n      const maxColumnAttribute = parseInt(item.attributes.maxColumn || \"1\", 10);\n      let contentSize = item.contentSize;\n      let columnCount = Math.min(\n        column,\n        columnAttribute || Math.max(1, Math.ceil((item.inlineSize + inlineGap) / columnDist)),\n      );\n      const maxColumnCount = Math.min(column, Math.max(columnCount, maxColumnAttribute));\n      let columnIndex = getColumnIndex(endOutline, columnCount, nearestCalculationName, startPos);\n      let contentPos = getColumnPoint(endOutline, columnIndex, columnCount, pointCalculationName);\n\n      if (isStartContentAlign && startPos !== contentPos) {\n        startPos = Math.max(...endOutline);\n        endOutline = endOutline.map(() => startPos);\n        contentPos = startPos;\n        columnIndex = 0;\n      }\n\n      while (columnCount < maxColumnCount) {\n        const nextEndColumnIndex = columnIndex + columnCount;\n        const nextColumnIndex = columnIndex - 1;\n\n        if (isEndDirection && (nextEndColumnIndex >= column || endOutline[nextEndColumnIndex] > contentPos)) {\n          break;\n        }\n        if (!isEndDirection && (nextColumnIndex < 0 || endOutline[nextColumnIndex] < contentPos)) {\n          break;\n        }\n        if (!isEndDirection) {\n          --columnIndex;\n        }\n        ++columnCount;\n      }\n\n      columnIndex = Math.max(0, columnIndex);\n      columnCount = Math.min(column - columnIndex, columnCount);\n\n      // stretch mode or data-grid-column > \"1\"\n      if ((columnAttribute > 0 && columnCount > 1) || isStretch) {\n        const nextInlineSize = (columnCount - 1) * columnDist + columnSize;\n\n        if ((!this._isObserverEnabled() || !observeChildren) && item.cssInlineSize !== nextInlineSize) {\n          item.shouldReupdate = true;\n        }\n        item.cssInlineSize = nextInlineSize;\n      }\n      if (columnSizeRatio > 0) {\n        contentSize = item.computedInlineSize / columnSizeRatio;\n        item.cssContentSize = contentSize;\n      }\n      const inlinePos = alignPoses[columnIndex];\n      contentPos = isEndDirection ? contentPos : contentPos - contentGap - contentSize;\n\n      item.cssInlinePos = inlinePos;\n      item.cssContentPos = contentPos;\n      const nextOutlinePoint = isEndDirection ? contentPos + contentSize + contentGap : contentPos;\n\n      range(columnCount).forEach((indexOffset) => {\n        endOutline[columnIndex + indexOffset] = nextOutlinePoint;\n      });\n    }\n\n    // Finally, check whether startPos and min of the outline match.\n    // If different, endOutline is updated.\n    if (isStartContentAlign && startPos !== Math.min(...endOutline)) {\n      startPos = Math.max(...endOutline);\n      endOutline = endOutline.map(() => startPos);\n    }\n\n    // if end items, startOutline is low, endOutline is high\n    // if start items, startOutline is high, endOutline is low\n    return {\n      start: isEndDirection ? startOutline : endOutline,\n      end: isEndDirection ? endOutline : startOutline,\n    };\n  }\n  public getComputedOutlineSize(items = this.items) {\n    const { align } = this.options;\n    const inlineGap = this.getInlineGap();\n    const containerInlineSize = this.getContainerInlineSize();\n    const columnSizeOption = this.columnSize || this.outlineSize;\n    const columnOption = this.column || this.outlineLength;\n    let column = columnOption || 1;\n\n    let columnSize = 0;\n\n    if (align === \"stretch\") {\n      if (!columnOption) {\n        const maxStretchColumnSize = this.maxStretchColumnSize || Infinity;\n\n        column = Math.max(1, Math.ceil((containerInlineSize + inlineGap) / (maxStretchColumnSize + inlineGap)));\n      }\n      columnSize = (containerInlineSize + inlineGap) / (column || 1) - inlineGap;\n    } else if (columnSizeOption) {\n      columnSize = columnSizeOption;\n    } else if (items.length) {\n      let checkedItem = items[0];\n\n      for (const item of items) {\n        const attributes = item.attributes;\n        const columnAttribute = parseInt(attributes.column || \"1\", 10);\n        const maxColumnAttribute = parseInt(attributes.maxColumn || \"1\", 10);\n\n        if (\n          item.updateState !== UPDATE_STATE.UPDATED\n          || !item.inlineSize\n          || columnAttribute !== 1\n          || maxColumnAttribute !== 1\n        ) {\n          continue;\n        }\n        checkedItem = item;\n        break;\n      }\n      const inlineSize = checkedItem.inlineSize || 0;\n\n      columnSize = inlineSize;\n    } else {\n      columnSize = containerInlineSize;\n    }\n    return columnSize || 0;\n  }\n  public getComputedOutlineLength(items = this.items) {\n    const inlineGap = this.getInlineGap();\n    const columnOption = this.column || this.outlineLength;\n    const columnCalculationThreshold = this.columnCalculationThreshold;\n    let column = 1;\n\n    if (columnOption) {\n      column = columnOption;\n    } else {\n      const columnSize = this.getComputedOutlineSize(items);\n\n      column = Math.min(\n        items.length,\n        Math.max(\n          1,\n          Math.floor(\n            (this.getContainerInlineSize() + inlineGap) /\n              (columnSize - columnCalculationThreshold + inlineGap)\n          )\n        )\n      );\n    }\n    return column;\n  }\n  private _getAlignPoses(column: number, columnSize: number) {\n    const { align } = this.options;\n    const inlineGap = this.getInlineGap();\n    const containerSize = this.getContainerInlineSize();\n    const indexes = range(column);\n\n    let offset = 0;\n    let dist = 0;\n\n    if (align === \"justify\" || align === \"stretch\") {\n      const countDist = column - 1;\n\n      dist = countDist ? Math.max((containerSize - columnSize) / countDist, columnSize + inlineGap) : 0;\n      offset = Math.min(0, containerSize / 2 - (countDist * dist + columnSize) / 2);\n    } else {\n      dist = columnSize + inlineGap;\n      const totalColumnSize = (column - 1) * dist + columnSize;\n\n      if (align === \"center\") {\n        offset = (containerSize - totalColumnSize) / 2;\n      } else if (align === \"end\") {\n        offset = containerSize - totalColumnSize;\n      }\n    }\n    return indexes.map((i) => {\n      return offset + i * dist;\n    });\n  }\n}\n\nexport interface MasonryGrid extends Properties<typeof MasonryGrid> {\n}\n\n\n/**\n * Align of the position of the items. If you want to use `stretch`, be sure to set `column` or `columnSize` option. (\"start\", \"center\", \"end\", \"justify\", \"stretch\")\n * @ko 아이템들의 위치의 정렬. `stretch`를 사용하고 싶다면 `column` 또는 `columnSize` 옵션을 설정해라.  (\"start\", \"center\", \"end\", \"justify\", \"stretch\")\n * @name Grid.MasonryGrid#align\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"align\"]}\n * @default \"justify\"\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   align: \"start\",\n * });\n *\n * grid.align = \"justify\";\n * ```\n */\n\n\n/**\n * The number of columns. If the number of columns is 0, it is automatically calculated according to the size of the container.  Can be used instead of outlineLength.\n * @ko 열의 개수. 열의 개수가 0이라면, 컨테이너의 사이즈에 의해 계산이 된다. outlineLength 대신 사용할 수 있다.\n * @name Grid.MasonryGrid#column\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"column\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   column: 0,\n * });\n *\n * grid.column = 4;\n * ```\n */\n\n\n/**\n * The size of the columns. If it is 0, it is calculated as the size of the first item in items. Can be used instead of outlineSize.\n * @ko 열의 사이즈. 만약 열의 사이즈가 0이면, 아이템들의 첫번째 아이템의 사이즈로 계산이 된다. outlineSize 대신 사용할 수 있다.\n * @name Grid.MasonryGrid#columnSize\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"columnSize\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   columnSize: 0,\n * });\n *\n * grid.columnSize = 200;\n * ```\n */\n\n\n/**\n * The size ratio(inlineSize / contentSize) of the columns. 0 is not set.\n * @ko 열의 사이즈 비율(inlineSize / contentSize). 0은 미설정이다.\n * @name Grid.MasonryGrid#columnSizeRatio\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"columnSizeRatio\"]}\n * @default 0\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   columnSizeRatio: 0,\n * });\n *\n * grid.columnSizeRatio = 0.5;\n * ```\n */\n\n\n/**\n * If stretch is used, the column can be automatically calculated by setting the maximum size of the column that can be stretched.\n * @ko stretch를 사용한 경우 최대로 늘릴 수 있는 column의 사이즈를 설정하여 column을 자동 계산할 수 있다.\n * @name Grid.MasonryGrid#maxStretchColumnSize\n * @type {$ts:Grid.MasonryGrid.MasonryGridOptions[\"maxStretchColumnSize\"]}\n * @default Infinity\n * @example\n * ```js\n * import { MasonryGrid } from \"@egjs/grid\";\n *\n * const grid = new MasonryGrid(container, {\n *   align: \"stretch\",\n *   maxStretchColumnSize: 0,\n * });\n *\n * grid.maxStretchColumnSize = 400;\n * ```\n */\n", "/* eslint-disable */\n/******************************************************************************\n * Created 2008-08-19.\n *\n * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n *\n * Copyright (C) 2008\n *   Wyatt Baldwin <self@wyattbaldwin.com>\n *   All rights reserved\n *\n * Licensed under the MIT license.\n *\n *   http://www.opensource.org/licenses/mit-license.php\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n *****************************************************************************/\nfunction single_source_shortest_paths(\n\tgraph: (x: string) => ({ [key: string]: number }),\n\ts: string,\n\td: string,\n) {\n\t// Predecessor map for each node that has been encountered.\n\t// node ID => predecessor node ID\n\tconst predecessors: { [key: string]: string } = {};\n\t// Costs of shortest paths from s to all nodes encountered.\n\t// node ID => cost\n\tconst costs: { [key: string]: number } = {};\n\tcosts[s] = 0;\n\n\t// Costs of shortest paths from s to all nodes encountered; differs from\n\t// `costs` in that it provides easy access to the node that currently has\n\t// the known shortest path from s.\n\t// XXX: Do we actually need both `costs` and `open`?\n\tconst open = new BinaryHeap<{ value: string, cost: number }>(x => x.cost);\n\topen.push({ value: s, cost: 0 });\n\n\tlet closest;\n\tlet u;\n\tlet cost_of_s_to_u;\n\tlet adjacent_nodes;\n\tlet cost_of_e;\n\tlet cost_of_s_to_u_plus_cost_of_e;\n\tlet cost_of_s_to_v;\n\tlet first_visit: boolean;\n\n\twhile (open.size()) {\n\t\t// In the nodes remaining in graph that have a known cost from s,\n\t\t// find the node, u, that currently has the shortest path from s.\n\t\tclosest = open.pop();\n\t\tu = closest.value;\n\t\tcost_of_s_to_u = closest.cost;\n\n\t\t// Get nodes adjacent to u...\n\t\tadjacent_nodes = graph(u) || {};\n\n\t\t// ...and explore the edges that connect u to those nodes, updating\n\t\t// the cost of the shortest paths to any or all of those nodes as\n\t\t// necessary. v is the node across the current edge from u.\n\t\tfor (const v in adjacent_nodes) {\n\t\t\t// Get the cost of the edge running from u to v.\n\t\t\tcost_of_e = adjacent_nodes[v];\n\n\t\t\t// Cost of s to u plus the cost of u to v across e--this is *a*\n\t\t\t// cost from s to v that may or may not be less than the current\n\t\t\t// known cost to v.\n\t\t\tcost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n\t\t\t// If we haven't visited v yet OR if the current known cost from s to\n\t\t\t// v is greater than the new cost we just found (cost of s to u plus\n\t\t\t// cost of u to v across e), update v's cost in the cost list and\n\t\t\t// update v's predecessor in the predecessor list (it's now u).\n\t\t\tcost_of_s_to_v = costs[v];\n\t\t\tfirst_visit = (typeof costs[v] === \"undefined\");\n\t\t\tif (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n\t\t\t\tcosts[v] = cost_of_s_to_u_plus_cost_of_e;\n\t\t\t\topen.push({ value: v, cost: cost_of_s_to_u_plus_cost_of_e });\n\t\t\t\tpredecessors[v] = u;\n\t\t\t}\n\t\t}\n\t}\n\n\tif (typeof costs[d] === \"undefined\") {\n\t\tconst msg = [\"Could not find a path from \", s, \" to \", d, \".\"].join(\"\");\n\t\tthrow new Error(msg);\n\t}\n\n\treturn predecessors;\n}\nfunction extract_shortest_path_from_predecessor_list(\n\tpredecessors: { [key: string]: string },\n\td: string,\n) {\n\tconst nodes: string[] = [];\n\tlet u = d;\n\n\twhile (u) {\n\t\tnodes.push(u);\n\t\tu = predecessors[u];\n\t}\n\tnodes.reverse();\n\treturn nodes;\n}\nfunction find_path(\n\tgraph: (x: string) => ({ [key: string]: number }),\n\ts: string,\n\td: string,\n) {\n\tconst predecessors = single_source_shortest_paths(graph, s, d);\n\n\treturn extract_shortest_path_from_predecessor_list(predecessors, d);\n}\n\nclass BinaryHeap<T> {\n\tprivate content: T[];\n\tprivate scoreFunction: (x: T) => number;\n\n\tconstructor(scoreFunction: (x: T) => number) {\n\t\tthis.content = [];\n\t\tthis.scoreFunction = scoreFunction;\n\t}\n\tpublic push(element: T) {\n\t\t// Add the new element to the end of the array.\n\t\tthis.content.push(element);\n\t\t// Allow it to bubble up.\n\t\tthis.bubbleUp(this.content.length - 1);\n\t}\n\tpublic pop() {\n\t\t// Store the first element so we can return it later.\n\t\tconst result = this.content[0];\n\t\t// Get the element at the end of the array.\n\t\tconst end = this.content.pop()!;\n\t\t// If there are any elements left, put the end element at the\n\t\t// start, and let it sink down.\n\t\tif (this.content.length > 0) {\n\t\t\tthis.content[0] = end;\n\t\t\tthis.sinkDown(0);\n\t\t}\n\t\treturn result;\n\t}\n\tpublic size() {\n\t\treturn this.content.length;\n\t}\n\tpublic bubbleUp(_n: number) {\n\t\tlet n = _n;\n\t\t// Fetch the element that has to be moved.\n\t\tconst element = this.content[n];\n\t\t// When at 0, an element can not go up any further.\n\t\twhile (n > 0) {\n\t\t\t// Compute the parent element's index, and fetch it.\n\t\t\tconst parentN = Math.floor((n + 1) / 2) - 1;\n\t\t\tconst parent = this.content[parentN];\n\n\t\t\t// Swap the elements if the parent is greater.\n\t\t\tif (this.scoreFunction(element) < this.scoreFunction(parent)) {\n\t\t\t\tthis.content[parentN] = element;\n\t\t\t\tthis.content[n] = parent;\n\t\t\t\t// Update 'n' to continue at the new position.\n\t\t\t\tn = parentN;\n\t\t\t} else {\n\t\t\t\t// Found a parent that is less, no need to move it further.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tpublic sinkDown(n: number) {\n\t\t// Look up the target element and its score.\n\t\tconst length = this.content.length;\n\t\tconst element = this.content[n];\n\t\tconst elemScore = this.scoreFunction(element);\n\t\tlet child1Score;\n\n\t\twhile (true) {\n\t\t\t// Compute the indices of the child elements.\n\t\t\tconst child2N = (n + 1) * 2;\n\t\t\tconst child1N = child2N - 1;\n\t\t\t// This is used to store the new position of the element,\n\t\t\t// if any.\n\t\t\tlet swap: number | null = null;\n\t\t\t// If the first child exists (is inside the array)...\n\t\t\tif (child1N < length) {\n\t\t\t\t// Look it up and compute its score.\n\t\t\t\tconst child1 = this.content[child1N];\n\t\t\t\tchild1Score = this.scoreFunction(child1);\n\t\t\t\t// If the score is less than our element's, we need to swap.\n\t\t\t\tif (child1Score < elemScore) {\n\t\t\t\t\tswap = child1N;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Do the same checks for the other child.\n\t\t\tif (child2N < length) {\n\t\t\t\tconst child2 = this.content[child2N];\n\t\t\t\tconst child2Score = this.scoreFunction(child2);\n\n\t\t\t\tif (child2Score < (swap == null ? elemScore : child1Score)) {\n\t\t\t\t\tswap = child2N;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If the element needs to be moved, swap it, and continue.\n\t\t\tif (swap !== null) {\n\t\t\t\tthis.content[n] = this.content[swap];\n\t\t\t\tthis.content[swap] = element;\n\t\t\t\tn = swap;\n\t\t\t} else {\n\t\t\t\t// Otherwise, we are done.\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport { find_path };\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"../Grid\";\nimport { MOUNT_STATE, PROPERTY_TYPE } from \"../consts\";\nimport { GridOptions, GridOutlines, Properties } from \"../types\";\nimport { between, getRangeCost, GetterSetter, isNumber, isObject, sum, throttle } from \"../utils\";\nimport { find_path } from \"./lib/dijkstra\";\nimport { GridItem } from \"../GridItem\";\n\n\ninterface Link {\n  path: number[];\n  cost: number;\n  length: number;\n  currentNode: number;\n  isOver?: boolean;\n}\n\nfunction splitItems(items: GridItem[], path: string[]) {\n  const length = path.length;\n  const groups: GridItem[][] = [];\n\n  for (let i = 0; i < length - 1; ++i) {\n    const path1 = parseInt(path[i], 10);\n    const path2 = parseInt(path[i + 1], 10);\n\n    groups.push(items.slice(path1, path2));\n  }\n  return groups;\n}\n\nfunction parseStretchSize(inlineSize: number, size: number | string) {\n  if (isNumber(size)) {\n    return size;\n  }\n  const signText = size.charAt(0);\n  const sign = signText === \"+\" ? 1 : (signText === \"-\" ? -1 : 0);\n  let nextSize = parseFloat(size);\n\n  if (size.match(/%$/g)) {\n    nextSize *= inlineSize / 100;\n  }\n  if (sign) {\n    return inlineSize + nextSize;\n  }\n  return nextSize;\n}\n\nfunction getExpectedItemInlineSize(item: GridItem, rowSize: number) {\n  const inlineSize = item.orgInlineSize;\n  const contentSize = item.orgContentSize;\n  const inlineOffset = item.gridData.inlineOffset || 0;\n  const contentOffset = item.gridData.contentOffset || 0;\n\n  if (!inlineSize || !contentSize) {\n    return rowSize;\n  }\n\n  const ratio = contentSize <= contentOffset ? 1 : (inlineSize - inlineOffset) / (contentSize - contentOffset);\n\n  return ratio * (rowSize - contentOffset) + inlineOffset;\n}\n\n/**\n * @typedef\n * @memberof Grid.JustifiedGrid\n * @extends Grid.GridOptions\n */\nexport interface JustifiedGridOptions extends GridOptions {\n  /**\n   * The minimum and maximum number of items per line.\n   * <ko> 한 줄에 들어가는 아이템의 최소, 최대 개수.</ko>\n   * @default [1, 8]\n   */\n  columnRange?: number | number[];\n  /**\n   * The minimum and maximum number of rows in a group, 0 is not set.\n   * <ko> 한 그룹에 들어가는 행의 최소, 최대 개수, 0은 미설정이다.</ko>\n   * @default 0\n   */\n  rowRange?: number | number[];\n  /**\n   * The minimum and maximum size by which the item is adjusted. If it is not calculated, it may deviate from the minimum and maximum sizes.\n   * <ko>아이템이 조정되는 최소, 최대 사이즈. 계산이 되지 않는 경우 최소, 최대 사이즈를 벗어날 수 있다.</ko>\n   * @default [0, Infinity]\n   */\n  sizeRange?: number | number[];\n  /**\n   * Maximum number of rows to be counted for container size. You can hide it on the screen by setting overflow: hidden. -1 is not set.\n   * <ko>컨테이너 크기에 계산될 최대 row 개수. overflow: hidden을 설정하면 화면에 가릴 수 있다. -1은 미설정이다.</ko>\n   * @default -1\n   */\n  displayedRow?: number;\n  /**\n   * Whether to crop when the row size is out of sizeRange. If set to true, this ratio can be broken.\n   * <ko>row사이즈가 sizeRange에 벗어나면 크롭할지 여부. true로 설정하면 비율이 깨질 수 있다.</ko>\n   * @default false\n   */\n  isCroppedSize?: boolean;\n  /**\n   * The ratio is maintained except for the offset value in the inline direction. If 'data-grid-inline-offset' is set in the element of each item, it will be applied first.\n   * <ko>inline 방향의 offset 수치 만큼 제외하고 비율을 유지한다. 각 아이템의 element에 'data-grid-inline-offset' 을 설정하면 우선 적용한다.</ko>\n   * @default 0\n   */\n  inlineOffset?: number;\n  /**\n   * The ratio is maintained except for the offset value in the content direction. If 'data-grid-content-offset' is set in the element or JSX of each item, it will be applied first.\n   * <ko>content 방향의 offset 수치 만큼 제외하고 비율을 유지한다. 각 아이템의 Element 또는 JSX에 'data-grid-content-offset' 을 설정하면 우선 적용한다.</ko>\n   * @default 0\n   */\n  contentOffset?: number;\n  /**\n   * it is possible to basically break the proportion of the item and stretch the inline size to fill the container.\n   * If you set the `sizeRange` range narrowly, you can stretch well.\n   * <ko>기본적으로 아이템의 비율을 깨서 inline size를 stretch하여 container를 꽉 채우게 가능하다. sizeRange의 범위를 좁게 설정하면 stretch가 잘 될 수 있다. </ko>\n   * @default false\n   */\n  stretch?: boolean;\n  /**\n   * If `-`, `+`, or `%` are added as a string value, it is a relative value to the original size. If it is a number value, the stretch range can be set as an absolute value.\n   * If `data-grid-min-stretch` and `data-grid-max-stretch` are set in the Element or JSX of each item, they will be applied first.\n   * <ko>string 값으로 `-`, `+`, `%`이 붙으면 원본 크기에 대한 상대값이며 number 값으로 들어오면 절대 값으로 stretch 범위를 설정할 수 있습니다.\n   * 각 아이템의 Element 또는 JSX에 `data-grid-min-stretch`, `data-grid-max-stretch`을 설정하면 우선 적용한다.</ko>\n   * @\n   * @default [\"-10%\", \"+10%\"]\n   */\n  stretchRange?: Array<string | number>;\n  /**\n   * Items placed in the last row are not stretched and are drawn maintaining their proportions. When using InfiniteGrid, it is calculated and re-rendered as follows:\n   * <ko>마지막 row에 배치되는 아이템들 경우 stretch되지 않고 비율유지한채로 그려진다. InfiniteGrid를 사용하는 경우 다음 그룹과 같이 계산되어 재렌더링한다.</ko>\n   */\n  passUnstretchRow?: boolean;\n}\n\n/**\n * 'justified' is a printing term with the meaning that 'it fits in one row wide'. JustifiedGrid is a grid that the item is filled up on the basis of a line given a size.\n * If 'data-grid-inline-offset' or 'data-grid-content-offset' are set for item element, the ratio is maintained except for the offset value.\n * If 'data-grid-maintained-target' is set for an element whose ratio is to be maintained, the item is rendered while maintaining the ratio of the element.\n * @ko 'justified'는 '1행의 너비에 맞게 꼭 들어찬'이라는 의미를 가진 인쇄 용어다. JustifiedGrid는 용어의 의미대로 너비가 주어진 사이즈를 기준으로 아이템가 가득 차도록 배치하는 Grid다.\n * 아이템 엘리먼트에 'data-grid-inline-offset' 또는 'data-grid-content-offset'를 설정하면 offset 값을 제외하고 비율을 유지한다.\n * 비율을 유지하고 싶은 엘리먼트에 'data-grid-maintained-target'을 설정한다면 해당 엘리먼트의 비율을 유지하면서 아이템이 렌더링이 된다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.JustifiedGrid.JustifiedGridOptions} options - The option object of the JustifiedGrid module <ko>JustifiedGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class JustifiedGrid extends Grid<JustifiedGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    columnRange: PROPERTY_TYPE.RENDER_PROPERTY,\n    rowRange: PROPERTY_TYPE.RENDER_PROPERTY,\n    sizeRange: PROPERTY_TYPE.RENDER_PROPERTY,\n    isCroppedSize: PROPERTY_TYPE.RENDER_PROPERTY,\n    displayedRow: PROPERTY_TYPE.RENDER_PROPERTY,\n    stretch: PROPERTY_TYPE.RENDER_PROPERTY,\n    stretchRange: PROPERTY_TYPE.RENDER_PROPERTY,\n    passUnstretchRow: PROPERTY_TYPE.RENDER_PROPERTY,\n    inlineMargin: PROPERTY_TYPE.RENDER_PROPERTY,\n    contentMargin: PROPERTY_TYPE.RENDER_PROPERTY,\n    inlineOffset: PROPERTY_TYPE.RENDER_PROPERTY,\n    contentOffset: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<JustifiedGridOptions> = {\n    ...Grid.defaultOptions,\n    columnRange: [1, 8],\n    rowRange: 0,\n    sizeRange: [0, Infinity],\n    displayedRow: -1,\n    isCroppedSize: false,\n    stretch: false,\n    passUnstretchRow: true,\n    stretchRange: [\"-20%\", \"+20%\"],\n    inlineOffset: 0,\n    contentOffset: 0,\n  };\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    const {\n      attributePrefix,\n      horizontal,\n    } = this.options;\n\n    items.forEach((item) => {\n      if (!item.isUpdating) {\n        return;\n      }\n      const element = item.element;\n      const attributes = item.attributes;\n      const gridData = item.gridData;\n      let inlineOffset = parseFloat(attributes.inlineOffset);\n      let contentOffset = parseFloat(attributes.contentOffset);\n      // let contentMargin = parseFloat(attributes.contentMargin);\n\n      if (isNaN(inlineOffset)) {\n        inlineOffset = this.inlineOffset || gridData.inlineOffset || 0;\n      }\n      if (isNaN(contentOffset)) {\n        contentOffset = this.contentOffset || gridData.contentOffset | 0;\n      }\n      // if (isNaN(contentMargin)) {\n      //   contentMargin = this.contentMargin || gridData.contentMargin | 0;\n      // }\n\n      if (\n        element && !(\"inlineOffset\" in attributes) && !(\"contentOffset\" in attributes)\n        && item.mountState === MOUNT_STATE.MOUNTED\n      ) {\n        const maintainedTarget = element.querySelector<HTMLImageElement>(`[${attributePrefix}maintained-target]`);\n\n        if (maintainedTarget) {\n          const widthOffset = element.offsetWidth - element.clientWidth\n            + element.scrollWidth - maintainedTarget.clientWidth;\n          const heightOffset = element.offsetHeight - element.clientHeight\n            + element.scrollHeight - maintainedTarget.clientHeight;\n\n          if (horizontal) {\n            inlineOffset = heightOffset;\n            contentOffset = widthOffset;\n          } else {\n            inlineOffset = widthOffset;\n            contentOffset = heightOffset;\n          }\n        }\n      }\n      gridData.inlineOffset = inlineOffset;\n      gridData.contentOffset = contentOffset;\n      // gridData.contentMargin = contentMargin;\n    });\n    const rowRange = this.options.rowRange;\n    let path: string[] = [];\n\n    const isEndDirection = direction === \"end\";\n\n    if (items.length) {\n      path = rowRange ? this._getRowPath(items, isEndDirection) : this._getPath(items, isEndDirection);\n    }\n\n    return this._setStyle(items, path, outline, direction === \"end\");\n  }\n  private _getRowPath(items: GridItem[], isEndDirection: boolean) {\n    const columnRange = this._getColumnRange();\n    const rowRange = this._getRowRange();\n\n    const pathLink = this._getRowLink(items, {\n      path: [0],\n      cost: 0,\n      length: 0,\n      currentNode: 0,\n    }, columnRange, rowRange, isEndDirection);\n\n    return pathLink?.path.map((node) => `${node}`) ?? [];\n  }\n  private _getRowLink(\n    items: GridItem[],\n    currentLink: Link,\n    columnRange: number[],\n    rowRange: number[],\n    isEndDirection: boolean,\n  ): Link {\n    const [minColumn] = columnRange;\n    const [minRow, maxRow] = rowRange;\n    const lastNode = items.length;\n    const {\n      path,\n      length: pathLength,\n      cost,\n      currentNode,\n    } = currentLink;\n\n    // not reached lastNode but path is exceed or the number of remaining nodes is less than minColumn.\n    if (currentNode < lastNode && (maxRow <= pathLength || currentNode + minColumn > lastNode)) {\n      const rangeCost = getRangeCost(lastNode - currentNode, columnRange);\n      const lastCost = rangeCost * Math.abs(this._getCost(items, currentNode, lastNode, isEndDirection));\n\n      return {\n        ...currentLink,\n        length: pathLength + 1,\n        path: [...path, lastNode],\n        currentNode: lastNode,\n        cost: cost + lastCost,\n        isOver: true,\n      };\n    } else if (currentNode >= lastNode) {\n      return {\n        ...currentLink,\n        currentNode: lastNode,\n        isOver: minRow > pathLength || maxRow < pathLength,\n      };\n    } else {\n      return this._searchRowLink(items, currentLink, lastNode, columnRange, rowRange, isEndDirection);\n    }\n\n  }\n  private _searchRowLink(\n    items: GridItem[],\n    currentLink: Link,\n    lastNode: number,\n    columnRange: number[],\n    rowRange: number[],\n    isEndDirection: boolean,\n  ) {\n    const [minColumn, maxColumn] = columnRange;\n    const {\n      currentNode,\n      path,\n      length: pathLength,\n      cost,\n    } = currentLink;\n    const length = Math.min(lastNode, currentNode + maxColumn);\n    const links: Link[] = [];\n\n    for (let nextNode = currentNode + minColumn; nextNode <= length; ++nextNode) {\n      if (nextNode === currentNode) {\n        continue;\n      }\n      const nextCost = Math.abs(this._getCost(items, currentNode, nextNode, isEndDirection));\n      const nextLink = this._getRowLink(items, {\n        path: [...path, nextNode],\n        length: pathLength + 1,\n        cost: cost + nextCost,\n        currentNode: nextNode,\n      }, columnRange, rowRange, isEndDirection);\n\n      if (nextLink) {\n        links.push(nextLink);\n      }\n    }\n    links.sort((a, b) => {\n      const aIsOver = a.isOver;\n      const bIsOver = b.isOver;\n\n      if (aIsOver !== bIsOver) {\n        // If it is over, the cost is high.\n        return aIsOver ? 1 : -1;\n      }\n      const aRangeCost = getRangeCost(a.length, rowRange);\n      const bRangeCost = getRangeCost(b.length, rowRange);\n\n      return aRangeCost - bRangeCost || a.cost - b.cost;\n    });\n\n    // It returns the lowest cost link.\n    return links[0];\n  }\n  private _getExpectedRowSize(items: GridItem[], forceStretch?: boolean) {\n    const containerInlineSize = this.getContainerInlineSize()! - this.getInlineGap() * (items.length - 1);\n    let fixedContainerInsize = containerInlineSize;\n    let ratioSum = 0;\n    let inlineSum = 0;\n\n    items.forEach((item) => {\n      const inlineSize = item.orgInlineSize;\n      const contentSize = item.orgContentSize;\n\n      if (!inlineSize || !contentSize) {\n        ratioSum += 1;\n        return;\n      }\n      // sum((expect - offset) * ratio) = container inline size\n      const inlineOffset = item.gridData.inlineOffset || 0;\n      const contentOffset = item.gridData.contentOffset || 0;\n      // const contentMargin = item.gridData.contentMargin || 0;\n\n      const maintainedRatio = contentSize <= contentOffset ? 1\n        : (inlineSize - inlineOffset) / (contentSize - contentOffset);\n\n      ratioSum += maintainedRatio;\n      // inlineSum += (contentOffset + contentMargin) * maintainedRatio;\n      inlineSum += contentOffset * maintainedRatio;\n      fixedContainerInsize -= inlineOffset;\n    });\n\n    if (ratioSum) {\n      const nextRowSize = (fixedContainerInsize + inlineSum) / ratioSum;\n\n      if (this.stretch) {\n        const [minRowSize, maxRowSize] = this._getSizeRange();\n        const stretchRowSize = between(nextRowSize, minRowSize, maxRowSize);\n\n        if (forceStretch) {\n          return stretchRowSize;\n        }\n        const stretchRange = this.stretchRange;\n        const inlineSizes = items.map((item) => {\n          return getExpectedItemInlineSize(item, stretchRowSize);\n        });\n        const minInlineSize = inlineSizes.reduce((prev, itemInlineSize, i) => {\n          return prev + parseStretchSize(itemInlineSize, items[i].attributes.minStretch || stretchRange[0]);\n        }, 0);\n        const maxInlineSize = inlineSizes.reduce((prev, itemInlineSize, i) => {\n          return prev + parseStretchSize(itemInlineSize, items[i].attributes.maxStretch || stretchRange[1]);\n        }, 0);\n\n        // for stretch\n        if (minInlineSize <= containerInlineSize && containerInlineSize <= maxInlineSize) {\n          return stretchRowSize;\n        }\n      }\n\n      return nextRowSize;\n    }\n    return 0;\n  }\n\n  private _getExpectedInlineSizes(items: GridItem[], rowSize: number) {\n    const {\n      stretch,\n      stretchRange,\n    } = this.options;\n    return items.map((item) => {\n      const minInlineSize = stretch\n        ? parseStretchSize(item.orgInlineSize, item.attributes.minStretch || stretchRange[0])\n        : -Infinity;\n      const maxInlineSize = stretch\n        ? parseStretchSize(item.orgInlineSize, item.attributes.maxStretch || stretchRange[1])\n        : Infinity;\n\n      const itemInlineSize = getExpectedItemInlineSize(item, rowSize);\n      let isMax = false;\n      let isMin = false;\n      if (itemInlineSize >= maxInlineSize) {\n        isMax = true;\n      } else if (itemInlineSize <= minInlineSize) {\n        isMin = true;\n      }\n\n      return {\n        minSize: minInlineSize,\n        maxSize: maxInlineSize,\n        size: between(itemInlineSize, minInlineSize, maxInlineSize),\n        originalSize: itemInlineSize,\n        isMax,\n        isMin,\n      };\n    });\n  }\n  private _getStretchItemInfos(items: GridItem[], rowSize: number) {\n    const itemsLength = items.length;\n    const containerInlineSize = this.getContainerInlineSize() - this.getInlineGap() * (Math.max(1, itemsLength) - 1);\n    const itemInfos = this._getExpectedInlineSizes(items, rowSize);\n    const firstItemsSize = sum(itemInfos.map((info) => info.size));\n    const distSize = containerInlineSize - firstItemsSize;\n    const firstScale = containerInlineSize / sum(itemInfos.map((info) => info.originalSize));\n    const costInfos = itemInfos.map((info) => {\n      return {\n        ...info,\n        passed: false,\n        size: info.originalSize * firstScale,\n      };\n    });\n\n    if (distSize === 0) {\n      return {\n        infos: costInfos,\n        cost: 0,\n      };\n    }\n    // increase\n    const isIncrease = distSize > 0;\n    const costInfosLength = costInfos.length;\n\n    for (let i = 0; i < costInfosLength; ++i) {\n      const passedItemsSize = sum(costInfos.map((info) => info.passed ? info.size : 0));\n      const restItemsSize = sum(costInfos.map((info) => info.passed ? 0 : info.originalSize));\n      let distScale = (containerInlineSize - passedItemsSize) / restItemsSize;\n      // minimize or maximize\n      costInfos.forEach((info) => {\n        if (info.passed) {\n          return;\n        }\n\n        if (isIncrease) {\n          if (info.size > info.maxSize) {\n            distScale = Math.min(distScale, info.maxSize / info.originalSize);\n          }\n        } else {\n          if (info.size < info.minSize) {\n            distScale = Math.max(distScale, info.minSize / info.originalSize);\n          }\n        }\n      });\n\n      costInfos.forEach((info) => {\n        if (!info.passed) {\n          info.size = between(info.originalSize * distScale, info.minSize, info.maxSize);\n\n          if (\n            (isIncrease && !throttle(info.size - info.maxSize, 0.001))\n            || (!isIncrease && !throttle(info.size - info.minSize, 0.001))\n          ) {\n            info.passed = true;\n          }\n        }\n      });\n\n      if (costInfos.every((info) => info.passed)) {\n        break;\n      }\n    }\n    const lastDistScale = containerInlineSize / sum(costInfos.map((info) => info.size));\n\n    // last\n    if (throttle(lastDistScale - 1, 0.001)) {\n      costInfos.forEach((info) => {\n        info.size *= lastDistScale;\n      });\n    }\n\n\n    return {\n      infos: costInfos,\n      cost: sum(costInfos.map((info) => {\n        let costRatio = 1;\n\n        if (info.size > info.maxSize || info.size < info.minSize) {\n          costRatio = 2;\n        }\n        let originalSize = info.originalSize;\n\n        if (isIncrease) {\n          originalSize = Math.max(originalSize, info.minSize);\n        } else {\n          originalSize = Math.min(originalSize, info.maxSize);\n        }\n        return Math.abs(info.size - originalSize) * costRatio;\n      })),\n    };\n  }\n  private _getExpectedInlineSize(items: GridItem[], rowSize: number) {\n    const inlineGap = this.getInlineGap();\n    const itemInfos = this._getExpectedInlineSizes(items, rowSize);\n\n    return itemInfos.length ? sum(itemInfos.map((info) => info.size)) + inlineGap * (items.length - 1) : 0;\n  }\n  private _getCost(\n    items: GridItem[],\n    i: number,\n    j: number,\n    isEndDirection: boolean,\n  ) {\n    const lineItems = items.slice(i, j);\n    const containerInlineSize = this.getContainerInlineSize();\n    let rowSize = this._getExpectedRowSize(lineItems);\n    const [minSize, maxSize] = this._getSizeRange();\n\n    if (this.isCroppedSize) {\n      if (minSize <= rowSize && rowSize <= maxSize) {\n        return 0;\n      }\n      const expectedInlineSize = this._getExpectedInlineSize(\n        lineItems,\n        rowSize < minSize ? minSize : maxSize,\n      );\n\n      return Math.pow(expectedInlineSize - containerInlineSize, 2);\n    }\n    let extraCost = 0;\n\n    if (this.stretch) {\n      if (rowSize < minSize) {\n        rowSize = minSize;\n      } else if (rowSize > maxSize) {\n        rowSize = maxSize;\n      }\n      const sizeCost = Math.abs(rowSize - minSize);\n\n      const expectedInlineSize = this._getExpectedInlineSize(\n        lineItems,\n        rowSize,\n      );\n\n      if (\n        !this.passUnstretchRow\n        || (isEndDirection ? j !== items.length : i !== 0)\n        || expectedInlineSize >= containerInlineSize\n      ) {\n        const res = this._getStretchItemInfos(lineItems, rowSize);\n\n        extraCost = res.cost;\n      }\n\n      return extraCost + sizeCost;\n    }\n\n    if (isFinite(maxSize)) {\n      // if this size is not in range, the cost increases sharply.\n      if (rowSize < minSize) {\n        return Math.pow(rowSize - minSize, 2) + Math.pow(maxSize, 2) + extraCost;\n      } else if (rowSize > maxSize) {\n        return Math.pow(rowSize - maxSize, 2) + Math.pow(maxSize, 2) + extraCost;\n      }\n    } else if (rowSize < minSize) {\n      return Math.max(Math.pow(minSize, 2), Math.pow(rowSize, 2)) + Math.pow(maxSize, 2) + extraCost;\n    }\n    // if this size in range, the cost is row\n    return rowSize - minSize + extraCost;\n  }\n  private _getPath(items: GridItem[], isEndDirection: boolean) {\n    const lastNode = items.length;\n    const columnRangeOption = this.options.columnRange;\n    const [minColumn, maxColumn]: number[] = isObject(columnRangeOption)\n      ? columnRangeOption\n      : [columnRangeOption, columnRangeOption];\n\n    const graph = (nodeKey: string) => {\n      const results: { [key: string]: number } = {};\n      const currentNode = parseInt(nodeKey, 10);\n\n      for (let nextNode = Math.min(currentNode + minColumn, lastNode); nextNode <= lastNode; ++nextNode) {\n        if (nextNode - currentNode > maxColumn) {\n          break;\n        }\n        let cost = this._getCost(\n          items,\n          currentNode,\n          nextNode,\n          isEndDirection,\n        );\n\n        if (cost < 0 && nextNode === lastNode) {\n          cost = 0;\n        }\n        results[`${nextNode}`] = Math.pow(cost, 2);\n      }\n      return results;\n    };\n    // shortest path for items' total height.\n    return find_path(graph, \"0\", `${lastNode}`);\n  }\n  private _setStyle(\n    items: GridItem[],\n    path: string[],\n    outline: number[] = [],\n    isEndDirection: boolean,\n  ) {\n    const {\n      isCroppedSize,\n      displayedRow,\n      stretch,\n      passUnstretchRow,\n    } = this.options;\n    const itemsLength = items.length;\n    const sizeRange = this._getSizeRange();\n    const startPoint = outline[0] || 0;\n    const containerInlineSize = this.getContainerInlineSize();\n    const inlineGap = this.getInlineGap();\n    const contentGap = this.getContentGap();\n    const groups = splitItems(items, path);\n    let passedItems!: number[];\n    const groupsLength = groups.length;\n    let contentPos = startPoint;\n    let displayedSize = 0;\n    let passedPoint!: number[];\n\n    groups.forEach((groupItems, rowIndex) => {\n      const groupItemslength = groupItems.length;\n      let rowSize = this._getExpectedRowSize(groupItems, true);\n\n      if (isCroppedSize) {\n        rowSize = Math.max(sizeRange[0], Math.min(rowSize, sizeRange[1]));\n      }\n      const allGap = inlineGap * (length - 1);\n      const itemInfos = groupItems.map((item, index) => {\n        const itemInlineSize = getExpectedItemInlineSize(item, rowSize);\n\n        return {\n          index,\n          item,\n          inlineSize: itemInlineSize,\n          orgInlineSize: itemInlineSize,\n          maxInlineSize: itemInlineSize,\n          minInlineSize: itemInlineSize,\n        };\n      });\n      const expectedInlineSize = this._getExpectedInlineSize(groupItems, rowSize);\n      const scale = (containerInlineSize - allGap) / (expectedInlineSize - allGap);\n      const noGapExpectedContainerInlineSize = expectedInlineSize - allGap;\n      const noGapContainerInlineSize = containerInlineSize - allGap;\n\n      if (stretch && expectedInlineSize && noGapContainerInlineSize !== noGapExpectedContainerInlineSize) {\n        // passed이고 마지막 그룹의 경우 stretchSize가 containerSize보다 작으면 pass!\n        if (\n          passUnstretchRow && noGapExpectedContainerInlineSize < noGapContainerInlineSize\n          && (isEndDirection ? rowIndex === groupsLength - 1 : rowIndex === 0)\n        ) {\n          passedPoint = [contentPos];\n          passedItems = groupItems.map((_, i) => itemsLength - groupItemslength + i);\n\n          const inlineSizes = this._getExpectedInlineSizes(groupItems, rowSize);\n\n          itemInfos.forEach((info, i) => {\n            info.minInlineSize = inlineSizes[i].minSize;\n            info.maxInlineSize = inlineSizes[i].maxSize;\n            info.inlineSize = between(info.inlineSize, info.minInlineSize, info.maxInlineSize);\n\n          });\n        } else {\n          const { infos } = this._getStretchItemInfos(groupItems, rowSize);\n\n          itemInfos.forEach((info, i) => {\n            info.inlineSize = infos[i].size;\n            info.minInlineSize = infos[i].minSize;\n            info.maxInlineSize = infos[i].maxSize;\n          });\n        }\n      }\n\n      itemInfos.forEach((info, i) => {\n        const {\n          item,\n          inlineSize,\n\n        } = info;\n        let nextInlineSize = inlineSize;\n        const prevItem = groupItems[i - 1];\n        const inlinePos = prevItem\n          ? prevItem.cssInlinePos! + prevItem.cssInlineSize! + inlineGap\n          : 0;\n\n        if (isCroppedSize) {\n          nextInlineSize *= scale;\n        }\n\n\n        const gridData = item.gridData;\n\n        gridData.orgInlineSize = info.orgInlineSize;\n        gridData.orgContentSize = rowSize;\n        gridData.minInlineSize = info.minInlineSize;\n        gridData.maxInlineSize = info.maxInlineSize;\n\n        item.setCSSGridRect({\n          inlinePos,\n          contentPos,\n          inlineSize: nextInlineSize,\n          contentSize: rowSize,\n        });\n      });\n      contentPos += contentGap + rowSize;\n      if (displayedRow < 0 || rowIndex < displayedRow) {\n        displayedSize = contentPos;\n      }\n    });\n\n    if (isEndDirection) {\n      // previous group's end outline is current group's start outline\n      return {\n        start: [startPoint],\n        end: [displayedSize],\n        passedItems,\n        passed: passedPoint,\n      };\n    }\n    // always start is lower than end.\n    // contentPos is endPoinnt\n    const height = contentPos - startPoint;\n\n    items.forEach((item) => {\n      item.cssContentPos! -= height;\n    });\n    return {\n      passedItems,\n      passed: passedPoint ? [passedPoint[0] - height] : null,\n      start: [startPoint - height],\n      end: [startPoint], // endPoint - height = startPoint\n    };\n  }\n  public getComputedOutlineLength() {\n    return 1;\n  }\n  public getComputedOutlineSize() {\n    return this.getContainerInlineSize();\n  }\n  private _getRowRange() {\n    const rowRange = this.rowRange;\n    return isObject(rowRange) ? rowRange : [rowRange, rowRange];\n  }\n  private _getColumnRange() {\n    const columnRange = this.columnRange;\n    return isObject(columnRange) ? columnRange : [columnRange, columnRange];\n  }\n  private _getSizeRange() {\n    const sizeRange = this.sizeRange;\n    return isObject(sizeRange) ? sizeRange : [sizeRange, sizeRange];\n  }\n}\n\nexport interface JustifiedGrid extends Properties<typeof JustifiedGrid> {\n}\n\n\n/**\n * The minimum and maximum number of items per line.\n * @ko 한 줄에 들어가는 아이템의 최소, 최대 개수.\n * @name Grid.JustifiedGrid#columnRange\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"columnRange\"]}\n * @default [1, 8]\n * @example\n * ```js\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   columnRange: [1, 8],\n * });\n *\n * grid.columnRange = [3, 6];\n * ```\n */\n\n\n/**\n * The minimum and maximum number of rows in a group, 0 is not set.\n * @ko 한 그룹에 들어가는 행의 최소, 최대 개수, 0은 미설정이다.\n * @name Grid.JustifiedGrid#rowRange\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"rowRange\"]}\n * @default 0\n * @example\n * ```js\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   rowRange: 0,\n * });\n *\n * grid.rowRange = [3, 4];\n * ```\n */\n\n/**\n * The minimum and maximum size by which the item is adjusted. If it is not calculated, it may deviate from the minimum and maximum sizes.\n * @ko 아이템이 조정되는 최소, 최대 사이즈. 계산이 되지 않는 경우 최소, 최대 사이즈를 벗어날 수 있다.\n * @name Grid.JustifiedGrid#sizeRange\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"sizeRange\"]}\n * @default [0, Infinity]\n * @example\n * ```js\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   sizeRange: [0, Infinity],\n * });\n *\n * grid.sizeRange = [200, 800];\n * ```\n */\n\n/**\n * Maximum number of rows to be counted for container size. You can hide it on the screen by setting overflow: hidden. -1 is not set.\n * @ko - 컨테이너 크기에 계산될 최대 row 개수. overflow: hidden을 설정하면 화면에 가릴 수 있다. -1은 미설정이다.\n * @name Grid.JustifiedGrid#displayedRow\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"displayedRow\"]}\n * @default -1\n * @example\n * ```js\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   displayedRow: -1,\n * });\n *\n * grid.displayedRow = 3;\n * ```\n */\n\n/**\n * Whether to crop when the row size is out of sizeRange. If set to true, this ratio can be broken.\n * @ko - row 사이즈가 sizeRange에 벗어나면 크롭할지 여부. true로 설정하면 비율이 깨질 수 있다.\n * @name Grid.JustifiedGrid#isCroppedSize\n * @type {$ts:Grid.JustifiedGrid.JustifiedGridOptions[\"isCroppedSize\"]}\n * @default false\n * @example\n * ```js\n * import { JustifiedGrid } from \"@egjs/grid\";\n *\n * const grid = new JustifiedGrid(container, {\n *   sizeRange: [200, 250],\n *   isCroppedSize: false,\n * });\n *\n * grid.isCroppedSize = true;\n * ```\n */\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"../Grid\";\nimport { PROPERTY_TYPE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines, GridRect } from \"../types\";\nimport { GetterSetter, range } from \"../utils\";\nimport { GridItem } from \"../GridItem\";\n\n\nfunction getMaxPoint(outline: number[]) {\n  let maxPoint = -Infinity;\n\n  outline.forEach((point) => {\n    if (isFinite(point)) {\n      maxPoint = Math.max(maxPoint, point);\n    }\n  });\n  return isFinite(maxPoint) ? maxPoint : 0;\n}\nfunction getMinPoint(outline: number[]) {\n  let minPoint = Infinity;\n\n  outline.forEach((point) => {\n    if (isFinite(point)) {\n      minPoint = Math.min(minPoint, point);\n    }\n  });\n  return isFinite(minPoint) ? minPoint : 0;\n}\nfunction getOutlinePoint(startOutline: number[], frameOutline: number[], useFrameFill: boolean) {\n  return getMaxPoint(startOutline)\n    + getOutlineDist(startOutline, frameOutline, useFrameFill);\n}\n\nfunction getOutlineDist(startOutline: number[], endOutline: number[], useFrameFill: boolean) {\n  const length = startOutline.length;\n\n  if (!length) {\n    return 0;\n  }\n  const minEndPoint = getMinPoint(endOutline);\n  const maxStartPoint = getMaxPoint(startOutline);\n  let frameDist = 0;\n\n  if (!useFrameFill) {\n    return 0;\n  }\n\n\n  for (let outlineIndex = 0; outlineIndex < length; ++outlineIndex) {\n    const startPoint = startOutline[outlineIndex];\n    const endPoint = endOutline[outlineIndex];\n\n    if (!isFinite(startPoint) || !isFinite(endPoint)) {\n      continue;\n    }\n    const startPos = startPoint - maxStartPoint;\n    const endPos = endPoint - minEndPoint;\n\n\n    // Fill empty block.\n    frameDist = outlineIndex ? Math.max(frameDist, frameDist + startPos - endPos) : startPos - endPos;\n  }\n\n  return frameDist;\n}\nfunction fillOutlines(startOutline: number[], endOutline: number[], rect: {\n  inlinePos: number;\n  inlineSize: number;\n  contentPos: number;\n  contentSize: number;\n}) {\n  const {\n    inlinePos,\n    inlineSize,\n    contentPos,\n    contentSize,\n  } = rect;\n  for (\n    let outlineIndex = inlinePos;\n    outlineIndex < inlinePos + inlineSize;\n    ++outlineIndex\n  ) {\n    startOutline[outlineIndex] = Math.min(startOutline[outlineIndex], contentPos);\n    endOutline[outlineIndex] = Math.max(endOutline[outlineIndex], contentPos + contentSize);\n  }\n}\nexport interface FrameRect extends Required<GridRect> {\n  type: any;\n}\n/**\n * @typedef\n * @memberof Grid.FrameGrid\n * @extends Grid.GridOptions\n */\nexport interface FrameGridOptions extends GridOptions {\n  /**\n   * The shape of the grid. You can set the shape and order of items with a 2d array ([contentPos][inlinePos]). You can place items as many times as you fill the array with numbers, and zeros and spaces are empty spaces. The order of the items is arranged in ascending order of the numeric values that fill the array.\n   * <ko>Grid의 모양. 2d 배열([contentPos][inlinePos])로 아이템의 모양과 순서를 설정할 수 있다. 숫자로 배열을 채운만큼 아이템을 배치할 수 있으며 0과 공백은 빈 공간이다. 아이템들의 순서는 배열을 채운 숫자값의 오름차순대로 배치가 된다. (default: [])</ko>\n   * @default []\n   */\n  frame?: number[][];\n  /**\n   * Make sure that the frame can be attached after the previous frame.\n   * <ko> 다음 프레임이 전 프레임에 이어 붙일 수 있는지 있는지 확인한다.</ko>\n   * @default true\n   */\n  useFrameFill?: boolean;\n  /**\n   * 1x1 rect size. If it is 0, it is determined by the number of columns in the frame.\n   * <ko>1x1 직사각형 크기. 0이면 frame의 column의 개수에 의해 결정된다.</ko>\n   * @default 0\n   */\n  rectSize?: number | { inlineSize: number, contentSize: number };\n}\n\n/**\n * 'Frame' is a printing term with the meaning that 'it fits in one row wide'. FrameGrid is a grid that the item is filled up on the basis of a line given a size.\n * @ko 'Frame'는 '1행의 너비에 맞게 꼭 들어찬'이라는 의미를 가진 인쇄 용어다. FrameGrid는 용어의 의미대로 너비가 주어진 사이즈를 기준으로 아이템이 가득 차도록 배치하는 Grid다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.FrameGrid.FrameGridOptions} options - The option object of the FrameGrid module <ko>FrameGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class FrameGrid extends Grid<FrameGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    frame: PROPERTY_TYPE.RENDER_PROPERTY,\n    useFrameFill: PROPERTY_TYPE.RENDER_PROPERTY,\n    rectSize: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<FrameGridOptions> = {\n    ...Grid.defaultOptions,\n    frame: [],\n    rectSize: 0,\n    useFrameFill: true,\n  };\n\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    const frame = this._getFrame();\n    const {\n      inlineSize: frameInlineSize,\n      contentSize: frameContentSize,\n      rects: frameRects,\n    } = frame;\n    const {\n      useFrameFill,\n    } = this.options;\n\n    const {\n      inlineSize: rectInlineSize,\n      contentSize: rectContentSize,\n    } = this.getRectSize(frameInlineSize);\n    const inlineGap = this.getInlineGap();\n    const contentGap = this.getContentGap();\n\n\n    const itemsLength = items.length;\n\n    if (!itemsLength || !frameInlineSize || !frameContentSize) {\n      return { start: outline, end: outline };\n    }\n    const rectsLength = frameRects.length;\n    let startOutline = range(frameInlineSize).map(() => Infinity);\n    let endOutline = range(frameInlineSize).map(() => -Infinity);\n    const frameOutline = frame.outline.map((point) => point * (rectContentSize + contentGap));\n\n    for (let startIndex = 0; startIndex < itemsLength; startIndex += rectsLength) {\n      // Compare group's startOutline and startOutline of rect\n      const startPoint = getOutlinePoint(endOutline, frameOutline, useFrameFill);\n\n      for (let rectIndex = 0; rectIndex < rectsLength && startIndex + rectIndex < itemsLength; ++rectIndex) {\n        const item = items[startIndex + rectIndex];\n        const {\n          contentPos: frameRectContentPos,\n          inlinePos: frameRectInlinePos,\n          contentSize: frameRectContentSize,\n          inlineSize: frameRectInlineSize,\n        } = frameRects[rectIndex];\n        const contentPos = startPoint + frameRectContentPos * (rectContentSize + contentGap);\n        const inlinePos = frameRectInlinePos * (rectInlineSize + inlineGap);\n        const contentSize = frameRectContentSize * (rectContentSize + contentGap) - contentGap;\n        const inlineSize = frameRectInlineSize * (rectInlineSize + inlineGap) - inlineGap;\n\n        fillOutlines(startOutline, endOutline, {\n          inlinePos: frameRectInlinePos,\n          inlineSize: frameRectInlineSize,\n          contentPos: contentPos,\n          contentSize: contentSize + contentGap,\n        });\n        item.setCSSGridRect({\n          inlinePos,\n          contentPos,\n          inlineSize,\n          contentSize,\n        });\n      }\n    }\n    const isDirectionEnd = direction === \"end\";\n\n    let gridOutline = outline.length ? outline : [0];\n\n    if (gridOutline.length !== frameInlineSize) {\n      const point = isDirectionEnd ? Math.max(...gridOutline) : Math.min(...gridOutline);\n\n      gridOutline = range(frameInlineSize).map(() => point);\n    }\n    startOutline = startOutline.map((point) => isFinite(point) ? point : 0);\n    endOutline = endOutline.map((point) => isFinite(point) ? point : 0);\n    const outlineDist = isDirectionEnd\n      ? getOutlinePoint(gridOutline, startOutline, useFrameFill)\n      : getOutlinePoint(endOutline, gridOutline, useFrameFill);\n\n    items.forEach((item) => {\n      item.cssContentPos! += outlineDist;\n    });\n\n    return {\n      start: startOutline.map((point) => point + outlineDist),\n      end: endOutline.map((point) => point + outlineDist),\n    };\n  }\n  public getComputedOutlineLength() {\n    const frame = this.options.frame;\n\n    return frame.length ? frame[0].length : 0;\n  }\n  public getComputedOutlineSize() {\n    const { rectSize: rectSizeOption } = this.options;\n\n    if (typeof rectSizeOption === \"object\") {\n      return rectSizeOption.inlineSize;\n    }\n    const inlineGap = this.getInlineGap();\n    return (\n      rectSizeOption ||\n      (this.getContainerInlineSize()! + inlineGap) / this.getComputedOutlineLength() - inlineGap\n    );\n  }\n  protected getRectSize(frameInlineSize: number) {\n    const { rectSize: rectSizeOption } = this.options;\n\n    if (typeof rectSizeOption === \"object\") {\n      return rectSizeOption;\n    }\n    const inlineGap = this.getInlineGap();\n    const rectSizeValue = rectSizeOption\n      ? rectSizeOption\n      : (this.getContainerInlineSize()! + inlineGap) / frameInlineSize - inlineGap;\n\n    return { inlineSize: rectSizeValue, contentSize: rectSizeValue };\n  }\n  private _getFrame() {\n    const frame = this.options.frame;\n    const frameContentSize = frame.length;\n    const frameInlineSize = frameContentSize ? frame[0].length : 0;\n    const rects: FrameRect[] = [];\n    const passMap: Record<string, boolean> = {};\n    const startOutline = range(frameInlineSize).map(() => Infinity);\n    const endOutline = range(frameInlineSize).map(() => -Infinity);\n\n    for (let y1 = 0; y1 < frameContentSize; ++y1) {\n      for (let x1 = 0; x1 < frameInlineSize; ++x1) {\n        const type = frame[y1][x1];\n\n        if (!type) {\n          continue;\n        }\n        if (passMap[`${y1},${x1}`]) {\n          continue;\n        }\n        const rect = this._findRect(passMap, type, y1, x1, frameInlineSize, frameContentSize);\n\n        fillOutlines(startOutline, endOutline, rect);\n        rects.push(rect);\n      }\n    }\n    rects.sort((a, b) => (a.type < b.type ? -1 : 1));\n\n\n    return {\n      rects,\n      inlineSize: frameInlineSize,\n      contentSize: frameContentSize,\n      outline: startOutline,\n    };\n  }\n  private _findRect(\n    passMap: Record<string, boolean>,\n    type: number,\n    y1: number,\n    x1: number,\n    frameInlineSize: number,\n    frameContentSize: number,\n  ) {\n    const frame = this.options.frame;\n\n    let contentSize = 1;\n    let inlineSize = 1;\n\n    // find rect\n    for (let x2 = x1; x2 < frameInlineSize; ++x2) {\n      if (frame[y1][x2] === type) {\n        inlineSize = x2 - x1 + 1;\n        continue;\n      }\n      break;\n    }\n    for (let y2 = y1; y2 < frameContentSize; ++y2) {\n      if (frame[y2][x1] === type) {\n        contentSize = y2 - y1 + 1;\n        continue;\n      }\n      break;\n    }\n\n    // pass rect\n    for (let y = y1; y < y1 + contentSize; ++y) {\n      for (let x = x1; x < x1 + inlineSize; ++x) {\n        passMap[`${y},${x}`] = true;\n      }\n    }\n\n    const rect: FrameRect = {\n      type,\n      inlinePos: x1,\n      contentPos: y1,\n      inlineSize,\n      contentSize,\n    };\n    return rect;\n  }\n}\n\nexport interface FrameGrid extends Properties<typeof FrameGrid> {\n}\n\n\n/**\n * The shape of the grid. You can set the shape and order of items with a 2d array ([contentPos][inlinePos]). You can place items as many times as you fill the array with numbers, and zeros and spaces are empty spaces. The order of the items is arranged in ascending order of the numeric values that fill the array.\n * @ko Grid의 모양. 2d 배열([contentPos][inlinePos])로 아이템의 모양과 순서를 설정할 수 있다. 숫자로 배열을 채운만큼 아이템을 배치할 수 있으며 0과 공백은 빈 공간이다. 아이템들의 순서는 배열을 채운 숫자값의 오름차순대로 배치가 된다.\n * @name Grid.FrameGrid#frame\n * @type {$ts:Grid.FrameGrid.FrameGridOptions[\"frame\"]}\n * @default []\n * @example\n * ```js\n * import { FrameGrid } from \"@egjs/grid\";\n *\n * // Item 1 : 2 x 2\n * // Item 2 : 1 x 1\n * // Item 3 : 1 x 2\n * // Item 4 : 1 x 1\n * // Item 5 : 2 x 1\n * const grid = new FrameGrid(container, {\n *   frame: [\n *     [1, 1, 0, 0, 2, 3],\n *     [1, 1, 0, 4, 5, 5],\n *   ],\n * });\n *\n * // Item 1 : 2 x 2\n * // Item 2 : 2 x 2\n * grid.frame = [\n *   [1, 1, 0, 0, 2, 2],\n *   [1, 1, 0, 0, 2, 2],\n * ];\n * ```\n */\n\n/**\n * Make sure that the frame can be attached after the previous frame.\n * @ko 다음 프레임이 전 프레임에 이어 붙일 수 있는지 있는지 확인한다.\n * @name Grid.FrameGrid#useFrameFill\n * @type {$ts:Grid.FrameGrid.FrameGridOptions[\"useFrameFill\"]}\n * @default true\n * @example\n * ```js\n * import { FrameGrid } from \"@egjs/grid\";\n *\n * const grid = new FrameGrid(container, {\n *   useFrameFill: true,\n * });\n *\n * grid.useFrameFill = false;\n * ```\n */\n\n/**\n * 1x1 rect size. If it is 0, it is determined by the number of columns in the frame. (default: 0)\n * @ko 1x1 직사각형 크기. 0이면 frame의 column의 개수에 의해 결정된다. (default: 0)\n * @name Grid.FrameGrid#rectSize\n * @type {$ts:Grid.FrameGrid.FrameGridOptions[\"rectSize\"]}\n * @example\n * ```js\n * import { FrameGrid } from \"@egjs/grid\";\n *\n * const grid = new FrameGrid(container, {\n *   rectSize: 0,\n * });\n *\n * grid.rectSize = { inlineSize: 100, contentSize: 150 };\n * ```\n */\n", "export interface BoxModelStatus {\n  orgInlineSize: number;\n  orgContentSize: number;\n  inlineSize: number;\n  contentSize: number;\n  inlinePos: number;\n  contentPos: number;\n  items: BoxModel[];\n}\n\nexport default class BoxModel implements BoxModelStatus {\n  public orgInlineSize: number;\n  public orgContentSize: number;\n  public inlineSize: number;\n  public contentSize: number;\n  public inlinePos: number;\n  public contentPos: number;\n  public items: BoxModel[];\n  constructor(status: Partial<BoxModelStatus>) {\n    const boxStatus = {\n      orgInlineSize: 0,\n      orgContentSize: 0,\n      inlineSize: 0,\n      contentSize: 0,\n      inlinePos: 0,\n      contentPos: 0,\n      items: [],\n      ...status,\n    };\n    for (const name in boxStatus) {\n      this[name] = boxStatus[name];\n    }\n  }\n  public scaleTo(inlineSize: number, contentSize: number) {\n    const scaleX = this.inlineSize ? inlineSize / this.inlineSize : 0;\n    const scaleY = this.contentSize ? contentSize / this.contentSize : 0;\n\n    this.items.forEach((item) => {\n      if (scaleX !== 0) {\n        item.inlinePos *= scaleX;\n        item.inlineSize *= scaleX;\n      }\n      if (scaleY !== 0) {\n        item.contentPos *= scaleY;\n        item.contentSize *= scaleY;\n      }\n    });\n\n    this.inlineSize = inlineSize;\n    this.contentSize = contentSize;\n  }\n  public push(item: BoxModel) {\n    this.items.push(item);\n  }\n  public getOrgSizeWeight() {\n    return this.orgInlineSize * this.orgContentSize;\n  }\n  public getSize() {\n    return this.inlineSize * this.contentSize;\n  }\n  public getOrgRatio() {\n    return (this.orgContentSize === 0) ? 0 : this.orgInlineSize / this.orgContentSize;\n  }\n  public getRatio() {\n    return (this.contentSize === 0) ? 0 : this.inlineSize / this.contentSize;\n  }\n}\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"../Grid\";\nimport { PROPERTY_TYPE } from \"../consts\";\nimport { GridOptions, Properties, GridOutlines } from \"../types\";\nimport { GetterSetter } from \"../utils\";\nimport { GridItem } from \"../GridItem\";\nimport BoxModel from \"./lib/BoxModel\";\n\n\nfunction getCost(originLength: number, length: number) {\n  let cost = originLength / length;\n\n  if (cost < 1) {\n    cost = 1 / cost;\n  }\n\n  return cost - 1;\n}\nfunction fitArea(\n  item: BoxModel,\n  bestFitArea: BoxModel,\n  itemFitSize: { inlineSize: number, contentSize: number },\n  containerFitSize: { inlineSize: number, contentSize: number },\n  isContentDirection: boolean,\n) {\n  item.contentSize = itemFitSize.contentSize;\n  item.inlineSize = itemFitSize.inlineSize;\n  bestFitArea.contentSize = containerFitSize.contentSize;\n  bestFitArea.inlineSize = containerFitSize.inlineSize;\n\n  if (isContentDirection) {\n    item.contentPos = bestFitArea.contentPos + bestFitArea.contentSize;\n    item.inlinePos = bestFitArea.inlinePos;\n  } else {\n    item.inlinePos = bestFitArea.inlinePos + bestFitArea.inlineSize;\n    item.contentPos = bestFitArea.contentPos;\n  }\n}\n\n\n/**\n * @typedef\n * @memberof Grid.PackingGrid\n * @extends Grid.GridOptions\n */\nexport interface PackingGridOptions extends GridOptions {\n  /**\n   * The aspect ratio (inlineSize / contentSize) of the container with items.\n   * <ko>아이템들을 가진 컨테이너의 종횡비(inlineSize / contentSize).</ko>\n   * @default 1\n   */\n  aspectRatio?: number;\n  /**\n   * The size weight when placing items.\n   * <ko>아이템들을 배치하는데 사이즈 가중치.</ko>\n   * @default 1\n   */\n  sizeWeight?: number;\n  /**\n   * The weight to keep ratio when placing items.\n   * <ko>아이템들을 배치하는데 비율을 유지하는 가중치.</ko>\n   * @default 1\n   */\n  ratioWeight?: number;\n  /**\n   * The priority that determines the weight of the item. \"size\" = (sizeWieght: 100, ratioWeight: 1), \"ratio\" = (sizeWeight: 1, ratioWeight; 100), \"custom\" = (set sizeWeight, ratioWeight)\n   * item's weight = item's ratio(inlineSize / contentSize) change * `ratioWeight` + size(inlineSize * contentSize) change * `sizeWeight`.\n   * <ko> 아이템의 가중치를 결정하는 우선수치. \"size\" = (sizeWieght: 100, ratioWeight: 1), \"ratio\" = (sizeWeight: 1, ratioWeight; 100), \"custom\" = (set sizeWeight, ratioWeight). 아이템의 가중치 = ratio(inlineSize / contentSize)의 변화량 * `ratioWeight` + size(inlineSize * contentSize)의 변화량 * `sizeWeight`.</ko>\n   * @default \"custom\"\n   */\n  weightPriority?: \"size\" | \"ratio\" | \"custom\";\n}\n\n/**\n * The PackingGrid is a grid that shows the important items bigger without sacrificing the weight of the items.\n * Rows and columns are separated so that items are dynamically placed within the horizontal and vertical space rather than arranged in an orderly fashion.\n * If `sizeWeight` is higher than `ratioWeight`, the size of items is preserved as much as possible.\n * Conversely, if `ratioWeight` is higher than `sizeWeight`, the ratio of items is preserved as much as possible.\n * @ko PackingGrid는 아이템의 본래 크기에 따른 비중을 해치지 않으면서 중요한 카드는 더 크게 보여 주는 레이아웃이다.\n * 행과 열이 구분돼 아이템을 정돈되게 배치하는 대신 가로세로 일정 공간 내에서 동적으로 아이템을 배치한다.\n * `sizeWeight`가 `ratioWeight`보다 높으면 아이템들의 size가 최대한 보존이 된다.\n * 반대로 `ratioWeight`가 `sizeWeight`보다 높으면 아이템들의 비율이 최대한 보존이 된다.\n * @memberof Grid\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {Grid.PackingGrid.PackingGridOptions} options - The option object of the PackingGrid module <ko>PackingGrid 모듈의 옵션 객체</ko>\n */\n@GetterSetter\nexport class PackingGrid extends Grid<PackingGridOptions> {\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    aspectRatio: PROPERTY_TYPE.RENDER_PROPERTY,\n    sizeWeight: PROPERTY_TYPE.RENDER_PROPERTY,\n    ratioWeight: PROPERTY_TYPE.RENDER_PROPERTY,\n    weightPriority: PROPERTY_TYPE.RENDER_PROPERTY,\n  };\n  public static defaultOptions: Required<PackingGridOptions> = {\n    ...Grid.defaultOptions,\n    aspectRatio: 1,\n    sizeWeight: 1,\n    ratioWeight: 1,\n    weightPriority: \"custom\",\n  };\n\n\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    const { aspectRatio } = this.options;\n    const containerInlineSize = this.getContainerInlineSize();\n    const containerContentSize = containerInlineSize / aspectRatio;\n    const inlineGap = this.getInlineGap();\n    const contentGap = this.getContentGap();\n    const prevOutline = outline.length ? outline : [0];\n    const startPoint = direction === \"end\"\n      ? Math.max(...prevOutline)\n      : Math.min(...prevOutline) - containerContentSize - contentGap;\n    const endPoint = startPoint + containerContentSize + contentGap;\n    const container = new BoxModel({});\n\n    items.forEach((item) => {\n      const model = new BoxModel({\n        inlineSize: item.orgInlineSize,\n        contentSize: item.orgContentSize,\n        orgInlineSize: item.orgInlineSize,\n        orgContentSize: item.orgContentSize,\n      });\n\n      this._findBestFitArea(container, model);\n      container.push(model);\n      container.scaleTo(containerInlineSize + inlineGap, containerContentSize + contentGap);\n    });\n    items.forEach((item, i) => {\n      const boxItem = container.items[i];\n      const inlineSize = boxItem.inlineSize - inlineGap;\n      const contentSize = boxItem.contentSize - contentGap;\n      const contentPos = startPoint + boxItem.contentPos;\n      const inlinePos = boxItem.inlinePos;\n\n      item.setCSSGridRect({\n        inlinePos,\n        contentPos,\n        inlineSize,\n        contentSize,\n      });\n    });\n\n    return {\n      start: [startPoint],\n      end: [endPoint],\n    };\n  }\n  private _findBestFitArea(container: BoxModel, item: BoxModel) {\n    if (container.getRatio() === 0) { // 아이템 최초 삽입시 전체영역 지정\n      container.orgInlineSize = item.inlineSize;\n      container.orgContentSize = item.contentSize;\n      container.inlineSize = item.inlineSize;\n      container.contentSize = item.contentSize;\n      return;\n    }\n\n    let bestFitArea!: BoxModel;\n    let minCost = Infinity;\n    let isContentDirection = false;\n    const itemFitSize = {\n      inlineSize: 0,\n      contentSize: 0,\n    };\n    const containerFitSize = {\n      inlineSize: 0,\n      contentSize: 0,\n    };\n    const sizeWeight = this._getWeight(\"size\");\n    const ratioWeight = this._getWeight(\"ratio\");\n\n    container.items.forEach((child) => {\n      const containerSizeCost = getCost(child.getOrgSizeWeight(), child.getSize()) * sizeWeight;\n      const containerRatioCost = getCost(child.getOrgRatio(), child.getRatio()) * ratioWeight;\n      const inlineSize = child.inlineSize;\n      const contentSize = child.contentSize;\n      for (let i = 0; i < 2; ++i) {\n        let itemInlineSize;\n        let itemContentSize;\n        let containerInlineSize;\n        let containerContentSize;\n\n        if (i === 0) {\n          // add item to content pos (top, bottom)\n          itemInlineSize = inlineSize;\n          itemContentSize = contentSize * (item.contentSize / (child.orgContentSize + item.contentSize));\n          containerInlineSize = inlineSize;\n          containerContentSize = contentSize - itemContentSize;\n        } else {\n          // add item to inline pos (left, right)\n          itemContentSize = contentSize;\n          itemInlineSize = inlineSize * (item.inlineSize / (child.orgInlineSize + item.inlineSize));\n          containerContentSize = contentSize;\n          containerInlineSize = inlineSize - itemInlineSize;\n        }\n\n        const itemSize = itemInlineSize * itemContentSize;\n        const itemRatio = itemInlineSize / itemContentSize;\n        const containerSize = containerInlineSize * containerContentSize;\n        const containerRatio = containerContentSize / containerContentSize;\n\n        let cost = getCost(item.getSize(), itemSize) * sizeWeight;\n        cost += getCost(item.getRatio(), itemRatio) * ratioWeight;\n        cost += getCost(child.getOrgSizeWeight(), containerSize) * sizeWeight - containerSizeCost;\n        cost += getCost(child.getOrgRatio(), containerRatio) * ratioWeight - containerRatioCost;\n\n        if (cost === Math.min(cost, minCost)) {\n          minCost = cost;\n          bestFitArea = child;\n          isContentDirection = (i === 0);\n          itemFitSize.inlineSize = itemInlineSize;\n          itemFitSize.contentSize = itemContentSize;\n          containerFitSize.inlineSize = containerInlineSize;\n          containerFitSize.contentSize = containerContentSize;\n        }\n      }\n    });\n\n    fitArea(item, bestFitArea, itemFitSize, containerFitSize, isContentDirection);\n  }\n  public getComputedOutlineLength() {\n    return 1;\n  }\n  public getComputedOutlineSize() {\n    return this.getContainerInlineSize();\n  }\n  private _getWeight(type: \"size\" | \"ratio\"): number {\n    const options = this.options;\n    const weightPriority = options.weightPriority;\n\n    if (weightPriority === type) {\n      return 100;\n    } else if (weightPriority === \"custom\") {\n      return options[`${type}Weight`];\n    }\n    return 1;\n  }\n}\n\nexport interface PackingGrid extends Properties<typeof PackingGrid> {\n}\n\n\n/**\n * The aspect ratio (inlineSize / contentSize) of the container with items.\n * @ko 아이템들을 가진 컨테이너의 종횡비(inlineSize / contentSize).\n * @name Grid.PackingGrid#aspectRatio\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"aspectRatio\"]}\n * @default 1\n * @example\n * ```js\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   aspectRatio: 1,\n * });\n *\n * grid.aspectRatio = 1.5;\n * ```\n */\n\n/**\n * The priority that determines the weight of the item. \"size\" = (sizeWieght: 2, ratioWeight: 1), \"ratio\" = (sizeWeight: 1, ratioWeight; 2), \"custom\" = (set sizeWeight, ratioWeight)\n * item's weight = item's ratio(inlineSize / contentSize) change * `ratioWeight` + size(inlineSize * contentSize) change * `sizeWeight`.\n * @ko 아이템의 가중치를 결정하는 우선수치. \"size\" = (sizeWieght: 2, ratioWeight: 1), \"ratio\" = (sizeWeight: 1, ratioWeight; 2), \"custom\" = (set sizeWeight, ratioWeight). 아이템의 가중치 = ratio(inlineSize / contentSize)의 변화량 * `ratioWeight` + size(inlineSize * contentSize)의 변화량 * `sizeWeight`.\n * @name Grid.PackingGrid#weightPriority\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"weightPriority\"]}\n * @default \"custom\"\n * @example\n * ```js\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   weightPriority: \"custom\",\n *   sizeWeight: 1,\n *   ratioWeight: 1,\n * });\n *\n * grid.weightPriority = \"size\";\n * // or\n * grid.weightPriority = \"ratio\";\n * ```\n */\n\n/**\n * The size weight when placing items.\n * @ko 아이템들을 배치하는데 사이즈 가중치.\n * @name Grid.PackingGrid#sizeWeight\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"sizeWeight\"]}\n * @default 1\n * @example\n * ```js\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   sizeWeight: 1,\n * });\n *\n * grid.sizeWeight = 10;\n * ```\n */\n\n\n/**\n * The weight to keep ratio when placing items.\n * @ko 아이템들을 배치하는데 비율을 유지하는 가중치.\n * @name Grid.PackingGrid#ratioWeight\n * @type {$ts:Grid.PackingGrid.PackingGridOptions[\"ratioWeight\"]}\n * @default 1\n * @example\n * ```js\n * import { PackingGrid } from \"@egjs/grid\";\n *\n * const grid = new PackingGrid(container, {\n *   ratioWeight: 1,\n * });\n *\n * grid.ratioWeight = 10;\n * ```\n */\n", "/**\n * egjs-grid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport Grid from \"./Grid\";\n\nexport * from \"./grids/MasonryGrid\";\nexport * from \"./grids/JustifiedGrid\";\nexport * from \"./grids/FrameGrid\";\nexport * from \"./grids/PackingGrid\";\nexport * from \"./ItemRenderer\";\nexport * from \"./types\";\nexport * from \"./Grid\";\nexport * from \"./GridItem\";\nexport * from \"./ContainerManager\";\nexport * from \"./ResizeWatcher\";\nexport * from \"./consts\";\nexport {\n  GetterSetter,\n  withGridMethods,\n  withMethods,\n  getMountedElements,\n  getUpdatedItems,\n} from \"./utils\";\nexport default Grid;\n", "/**\n * cfcs\n * Copyright (c) 2022-present NAVER Corp.\n * MIT license\n */\nexport function keys<T extends Record<string, any>>(obj: T): Array<keyof T> {\n  return Object.keys(obj);\n}\n\nexport function camelize(str: string) {\n  return str.replace(/[\\s-_]([a-z])/g, (all, letter) => letter.toUpperCase());\n}\n\nexport function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\n\nexport function isObject(val: any): val is object {\n  return typeof val === \"object\";\n}\n\nexport function isFunction(val: any): val is Function {\n  return typeof val === \"function\";\n}\n", "import { isString, Ref } from \"../core\";\n\nexport function findTarget<Target extends Element = Element>(target: string | Target | Ref<Target> | null): Target | null {\n  let el!: Target;\n\n  if (!target) {\n    return null;\n  } if (isString(target)) {\n    el = document.querySelector<Target>(target)!;\n  } else if (target instanceof Element) {\n    el = target;\n  } else if (\"value\" in target || \"current\" in target) {\n    el = target.value! || target.current!;\n  }\n\n  return el;\n}\n\nexport function withClassMethods(methods: readonly string[]) {\n  return function (prototype: any, memberName: string) {\n    methods.forEach((name: string) => {\n      if (name in prototype) {\n        return;\n      }\n      prototype[name] = function (...args) {\n        const result = this[memberName][name](...args);\n\n        // fix `this` type to return your own `class` instance to the instance using the decorator.\n        if (result === this[memberName]) {\n          return this;\n        } else {\n          return result;\n        }\n      };\n    });\n  };\n}\n", "export const OBSERVERS_PATH = \"__observers__\";\nexport const REACTIVE_PATH = \"__reactive__\";\n", "import Component from \"@egjs/component\";\n\ninterface EmitterEvents<Value> {\n  update: (value: Value) => void;\n}\n\nexport class Observer<Value = any> {\n  private _current: Value;\n  private _emitter = new Component<EmitterEvents<Value>>();\n\n  constructor(value?: Value) {\n    this._current = value as any;\n  }\n  public get current() {\n    return this._current as Value;\n  }\n  public set current(value: Value) {\n    const isUpdate = value !== this._current;\n    this._current = value;\n\n    if (isUpdate) {\n      this._emitter.trigger(\"update\", value);\n    }\n  }\n  public subscribe(callback: (value: Value) => void) {\n    this._emitter.on(\"update\", callback);\n  }\n  public unsubscribe(callback?: (value: Value) => void) {\n    this._emitter.off(\"update\", callback);\n  }\n}\n", "import { OBSERVERS_PATH } from \"./const\";\nimport { Observer } from \"./Observer\";\nimport { GetReactiveValue, ReactiveMethods } from \"./types\";\nimport { Ref } from \"../core\";\n\n\nexport function withReactiveMethods<\n  Instance,\n  Names extends keyof Partial<Instance>,\n  Return extends ReactiveMethods<Instance, Names>\n>(ref: Ref<Instance>, methods?: readonly Names[]): Return {\n  const obj: Record<any, any> = {};\n\n  if (!methods) {\n    return obj;\n  }\n\n  methods.forEach(name => {\n    obj[name] = function (...args: any[]) {\n      const current: any = ref.current || ref.value;\n\n      return current[name](...args);\n    };\n  });\n  return obj as Return;\n}\n\n\nexport function observe<Type>(defaultValue?: Type): Observer<Type> {\n  return new Observer<Type>(defaultValue);\n}\n\nexport function defineObservers(instance: any) {\n  const observers: Record<string, Observer<any>> = {};\n\n  Object.defineProperty(instance, OBSERVERS_PATH, {\n    get() {\n      return observers;\n    },\n  });\n\n  return observers;\n}\n\nexport function getObservers(instance: any): Record<string, Observer<any>> {\n  if (!instance[OBSERVERS_PATH]) {\n    defineObservers(instance);\n  }\n  return instance[OBSERVERS_PATH];\n}\n\nexport function getObserver(instance: any, name: string, defaultValue?: any): Observer<any> {\n  const observers = getObservers(instance);\n\n  if (!observers[name]) {\n    observers[name] = observe(defaultValue);\n  }\n  return observers[name];\n}\n\nexport function setObserver(instance: any, name: string, observer: Observer<any>) {\n  const observers = getObservers(instance);\n\n  observers[name] = observer;\n}\n\nexport function isObserver(val: any): val is Observer {\n  return val && (\"current\" in val && \"subscribe\" in val && \"unsubscribe\" in val);\n}\n", "import { getObserver } from \"./utils\";\n\nexport function Reactive(name?: string) {\n  return function (prototype: any, memberName: string) {\n    const publicName = name || memberName;\n\n    Object.defineProperty(prototype, memberName, {\n      get: function () {\n        return getObserver(this, publicName).current;\n      },\n      set: function (value: any) {\n        getObserver(this, publicName, value).current = value;\n      },\n    });\n    if (publicName !== memberName) {\n      Object.defineProperty(prototype, publicName, {\n        get: function () {\n          return getObserver(this, publicName).current;\n        },\n      });\n    }\n  };\n}\n\n", "import { keys } from \"../core\";\nimport { getObserver, getObservers } from \"./utils\";\n\nexport function injectReactiveSubscribe(object: Record<string, any>,) {\n  object[\"subscribe\"] = function (name: string, callback: (value: any) => void) {\n    getObserver(this, name).subscribe(callback);\n  };\n  object[\"unsubscribe\"] = function (name?: string, callback?: (value: any) => void) {\n    if (!name) {\n      keys(getObservers(this)).forEach((observerName) => {\n        this.unsubscribe(observerName);\n      });\n      return;\n    }\n    if (!(name in this)) {\n      return;\n    }\n    getObserver(this, name).unsubscribe(callback);\n  };\n}\n\nexport function ReactiveSubscribe(Constructor: any) {\n  const prototype = Constructor.prototype;\n\n  injectReactiveSubscribe(prototype);\n}\n\nexport interface ReactiveSubscribe<State extends Record<string, any>> {\n  subscribe<Name extends keyof State = keyof State>(\n    name: Name, callback: (value: State[Name]) => void): void;\n  unsubscribe<Name extends keyof State = keyof State>(\n    name?: Name, callback?: (value: State[Name]) => void): void;\n}\n", "import { ExtractNever, isFunction, keys } from \"../core\";\nimport { OBSERVERS_PATH } from \"./const\";\nimport { Observer } from \"./Observer\";\nimport { Reactive } from \"./Reactive\";\nimport { injectReactiveSubscribe, ReactiveSubscribe } from \"./ReactiveSubscribe\";\nimport { defineObservers, isObserver, setObserver } from \"./utils\";\n\n\ntype ConvertValue<Object extends Record<string, any>> = {\n  [Key in keyof Object]: Object[Key] extends Observer<infer Type> ? Type : Object[Key];\n}\n\ntype PickObverser<Object extends Record<string, any>> = ExtractNever<{\n  [Key in keyof Object]: Object[Key] extends Observer<infer Type> ? Type : never;\n}>;\n\nexport type ReactiveObject<Object extends Record<string, any>>\n  = ConvertValue<Object> & ReactiveSubscribe<PickObverser<Object>>;\n\n\nexport function reactive<Object extends Record<string, any>>(\n  setup: Readonly<Object> | (() => Readonly<Object>),\n): ReactiveObject<Object> {\n  const result = isFunction(setup) ? setup() : setup;\n  const reactiveObject: Record<string, any> = {};\n\n  defineObservers(reactiveObject);\n  keys(result).forEach((name: any) => {\n    const value = result[name];\n    if (isObserver(value)) {\n      setObserver(reactiveObject, name, value);\n      Reactive(name)(reactiveObject, name);\n    } else {\n      reactiveObject[name] = value;\n    }\n  });\n\n  injectReactiveSubscribe(reactiveObject);\n  return reactiveObject as ReactiveObject<Object>;\n}\n", "import { keys } from \"src/core\";\nimport { Ref } from \"src/core/types\";\nimport { ReactiveAdapter } from \"./ReactiveAdapter\";\nimport { ReactiveSubscribe } from \"./ReactiveSubscribe\";\nimport { ReactiveEventCallback } from \"./types\";\nimport { getObservers, withReactiveMethods } from \"./utils\";\n\nexport function adaptReactive<\n  Instance extends ReactiveSubscribe<Record<string, any>>,\n  State extends Record<string, any> = {},\n  Methods extends keyof Partial<Instance> = any,\n  Data = any,\n  Events extends Record<string, any> = {},\n  >(adapter: ReactiveAdapter<Instance, State, Methods, Data, Events>) {\n\n  function data(): Data {\n    return adapter.data?.() ?? {} as Data;\n  }\n\n  const instanceRef: Ref<Instance> = { current: adapter.created?.(data()) || null };\n  let firstState: State | null = null;\n\n  return {\n    state(): State {\n      const inst = instanceRef.current;\n\n      if (firstState) {\n        return firstState;\n      }\n      if (adapter.state) {\n        firstState = adapter.state;\n      } else if (inst) {\n        const observers = getObservers(inst);\n\n        firstState = keys(observers).reduce((prev, cur) => {\n          prev[cur] = observers[cur].current;\n          return prev;\n        }, {} as any);\n      }\n      return firstState || {} as State;\n    },\n    instance() {\n      return instanceRef.current;\n    },\n    mounted(): void {\n      instanceRef.current = adapter.mounted?.(data()) || instanceRef.current;\n    },\n    init(): void {\n      adapter.init?.(instanceRef.current!, data());\n    },\n    destroy(): void {\n      adapter.destroy?.(instanceRef.current!, data());\n    },\n    methods() {\n      return withReactiveMethods<any, any, any>(instanceRef, adapter.methods);\n    },\n    on(eventName: string, listener: ReactiveEventCallback<any, any>) {\n      adapter.on?.(instanceRef.current!, eventName as never, listener);\n    },\n    off(eventName: string, listener: ReactiveEventCallback<any, any>) {\n      adapter.off?.(instanceRef.current!, eventName as never, listener);\n    },\n  };\n}\n", "import { GRID_PROPERTY_TYPES } from \"@egjs/grid\";\nimport { InfiniteGridItemInfo } from \"./types\";\n\nconst ua = typeof window !== \"undefined\" ? window.navigator.userAgent : \"\";\n\nexport const IS_IOS = /iPhone|iPad/.test(ua);\nexport const CONTAINER_CLASS_NAME = \"infinitegrid-container\";\nexport const IGNORE_PROPERITES_MAP = {\n  renderOnPropertyChange: true,\n  useFit: true,\n  autoResize: true,\n} as const;\n\n\nexport const INFINITEGRID_PROPERTY_TYPES = {\n  ...GRID_PROPERTY_TYPES,\n};\n\nexport const DIRECTION = {\n  START: \"start\",\n  END: \"end\",\n  NONE: \"\",\n} as const;\n\nexport const INFINITEGRID_EVENTS = {\n  CHANGE_SCROLL: \"changeScroll\",\n  REQUEST_APPEND: \"requestAppend\",\n  REQUEST_PREPEND: \"requestPrepend\",\n  RENDER_COMPLETE: \"renderComplete\",\n  CONTENT_ERROR: \"contentError\",\n} as const;\n\nexport const ITEM_INFO_PROPERTIES: Record<keyof InfiniteGridItemInfo, true> = {\n  type: true,\n  groupKey: true,\n  key: true,\n  element: true,\n  html: true,\n  data: true,\n  inserted: true,\n  attributes: true,\n};\n\n\nexport const INFINITEGRID_METHODS = [\n  \"insertByGroupIndex\",\n  \"updateItems\",\n  \"getItems\",\n  \"getVisibleItems\",\n  \"getGroups\",\n  \"getVisibleGroups\",\n  \"renderItems\",\n  \"getContainerElement\",\n  \"getScrollContainerElement\",\n  \"getWrapperElement\",\n  \"setStatus\",\n  \"getStatus\",\n  \"removePlaceholders\",\n  \"prependPlaceholders\",\n  \"appendPlaceholders\",\n  \"getStartCursor\",\n  \"getEndCursor\",\n  \"setCursors\",\n] as const;\n\n\nexport enum GROUP_TYPE {\n  NORMAL = 0,\n  VIRTUAL = 1,\n  LOADING = 2,\n}\n\nexport enum ITEM_TYPE {\n  NORMAL = 0,\n  VIRTUAL = 1,\n  LOADING = 2,\n}\n\nexport enum STATUS_TYPE {\n  // does not remove anything.\n  NOT_REMOVE = 0,\n  // Minimize information on invisible items\n  MINIMIZE_INVISIBLE_ITEMS = 1,\n  // Minimize information on invisible groups\n  MINIMIZE_INVISIBLE_GROUPS = 2,\n  // remove invisible groups\n  REMOVE_INVISIBLE_GROUPS = 3,\n}\n\n\nexport const INVISIBLE_POS = -9999;\n", "import { GridItem, GridItemStatus, MOUNT_STATE } from \"@egjs/grid\";\nimport { INVISIBLE_POS, ITEM_TYPE } from \"./consts\";\nimport { InfiniteGridItemInfo } from \"./types\";\n\n\nexport interface InfiniteGridItemStatus extends GridItemStatus {\n  type?: ITEM_TYPE;\n  groupKey?: string | number;\n  key?: string | number;\n  html?: string;\n}\n\n/**\n * @extends Grid.GridItem\n */\nexport class InfiniteGridItem extends GridItem implements Required<InfiniteGridItemInfo> {\n  public groupKey: string | number;\n  public inserted: boolean;\n  public readonly html: string;\n  constructor(horizontal: boolean, itemStatus?: Partial<InfiniteGridItemStatus>) {\n    super(horizontal, {\n      html: \"\",\n      type: ITEM_TYPE.NORMAL,\n      cssRect: { top: INVISIBLE_POS, left: INVISIBLE_POS },\n      ...itemStatus,\n    } as GridItemStatus);\n\n    if (this.type === ITEM_TYPE.VIRTUAL) {\n      if (this.rect.width || this.rect.height) {\n        this.mountState = MOUNT_STATE.UNMOUNTED;\n      }\n      const orgRect = this.orgRect;\n      const rect = this.rect;\n      const cssRect = this.cssRect;\n\n      if (cssRect.width) {\n        rect.width = cssRect.width;\n      } else if (orgRect.width) {\n        rect.width = orgRect.width;\n      }\n      if (cssRect.height) {\n        rect.height = cssRect.height;\n      } else if (orgRect.height) {\n        rect.height = orgRect.height;\n      }\n    }\n  }\n  public getVirtualStatus(): Partial<InfiniteGridItemStatus> {\n    return {\n      type: ITEM_TYPE.VIRTUAL,\n      groupKey: this.groupKey,\n      key: this.key,\n      orgRect: this.orgRect,\n      rect: this.rect,\n      cssRect: this.cssRect,\n      attributes: this.attributes,\n    };\n  }\n  public getMinimizedStatus(): Partial<InfiniteGridItemStatus> {\n    const status: Partial<InfiniteGridItemStatus> = {\n      ...super.getMinimizedStatus(),\n      type: ITEM_TYPE.NORMAL,\n      groupKey: this.groupKey,\n    };\n    if (this.html) {\n      status.html = this.html;\n    }\n    return status;\n  }\n}\n\nexport interface InfiniteGridItem extends Required<InfiniteGridItemStatus> {}\n", "import Grid, { GridItem, GridOutlines } from \"@egjs/grid\";\nimport { ITEM_TYPE } from \"./consts\";\nimport { InfiniteGridItem, InfiniteGridItemStatus } from \"./InfiniteGridItem\";\n\nexport const LOADING_GROUP_KEY = \"__INFINITEGRID__LOADING_GRID\";\nexport const LOADING_ITEM_KEY = \"__INFINITEGRID__LOADING_ITEM\";\n\nexport class LoadingGrid extends Grid {\n  public type: \"start\" | \"end\" | \"\" = \"\";\n  public isWaitEnd = false;\n  public initialDisplay: string | null = null;\n  public getLoadingItem(): InfiniteGridItem | null {\n    return this.items[0] as InfiniteGridItem || null;\n  }\n  public startLoading() {\n    const element = this.items[0].element;\n\n    if (element) {\n      if (this.initialDisplay != null) {\n        this.initialDisplay = element.style.display || \"\";\n      } else if (this.initialDisplay) {\n        element.style.display = this.initialDisplay;\n      } else {\n        element.style.removeProperty(\"display\");\n      }\n    }\n  }\n  public endLoading() {\n    if (this.type) {\n      const element = this.items[0].element;\n\n      if (element) {\n        element.style.display = \"none\";\n      }\n    }\n  }\n  public setLoadingItem(item: Partial<InfiniteGridItemStatus> | null) {\n    if (item) {\n      const loadingItem = this.getLoadingItem();\n\n      if (!loadingItem) {\n        this.items = [new InfiniteGridItem(this.options.horizontal, {\n          ...item,\n          type: ITEM_TYPE.LOADING,\n          key: LOADING_ITEM_KEY,\n        })];\n      } else {\n        for (const name in item) {\n          loadingItem[name] = item[name];\n        }\n      }\n    } else {\n      this.items = [];\n    }\n  }\n  public applyGrid(items: GridItem[], direction: \"start\" | \"end\", outline: number[]): GridOutlines {\n    if (!items.length) {\n      return {\n        start: outline,\n        end: outline,\n      };\n    }\n    const nextOutline = outline.length ? [...outline] : [0];\n    const item = items[0];\n    const offset = item.contentSize + this.getContentGap();\n\n    item.cssInlinePos = this.getContainerInlineSize() / 2 - item.inlineSize / 2;\n\n    if (direction === \"end\") {\n      const maxPos = Math.max(...nextOutline);\n\n      item.cssContentPos = maxPos;\n\n      return {\n        start: nextOutline,\n        end: nextOutline.map((pos) => pos + offset),\n      };\n    } else {\n      const minPos = Math.min(...nextOutline);\n\n      item.cssContentPos = minPos - offset;\n\n      return {\n        start: nextOutline.map((pos) => pos - offset),\n        end: nextOutline,\n      };\n    }\n  }\n}\n", "import { withClassMethods } from \"@cfcs/core\";\nimport Grid, { GRID_PROPERTY_TYPES } from \"@egjs/grid\";\nimport { diff } from \"@egjs/list-differ\";\nimport { GROUP_TYPE, IGNORE_PROPERITES_MAP, INFINITEGRID_METHODS, ITEM_INFO_PROPERTIES, ITEM_TYPE } from \"./consts\";\nimport { GroupManagerStatus, InfiniteGridGroupStatus } from \"./GroupManager\";\nimport InfiniteGrid from \"./InfiniteGrid\";\nimport { InfiniteGridItem, InfiniteGridItemStatus } from \"./InfiniteGridItem\";\nimport {\n  CategorizedGroup, InfiniteGridGroup, InfiniteGridInsertedItems,\n  InfiniteGridItemInfo,\n  RenderingOptions,\n} from \"./types\";\n\nexport function isWindow(el: Window | Element): el is Window {\n  return el === window;\n}\n\nexport function isNumber(val: any): val is number {\n  return typeof val === \"number\";\n}\n\nexport function isString(val: any): val is string {\n  return typeof val === \"string\";\n}\nexport function isObject(val: any): val is object {\n  return typeof val === \"object\";\n}\n\nexport function flat<T>(arr: T[][]): T[] {\n  return arr.reduce((prev, cur) => {\n    return [...prev, ...cur];\n  }, []);\n}\nexport function splitOptions(options: Record<string, any>) {\n  const {\n    gridOptions,\n    ...otherOptions\n  } = options;\n\n  return {\n    ...splitGridOptions(gridOptions),\n    ...otherOptions,\n  };\n}\nexport function splitGridOptions(options: Record<string, any>) {\n  const nextOptions: Record<string, any> = {};\n  const gridOptions: Record<string, any> = {};\n  const defaultOptions = Grid.defaultOptions;\n\n  for (const name in options) {\n    const value = options[name];\n\n    if (!(name in IGNORE_PROPERITES_MAP)) {\n      gridOptions[name] = value;\n    }\n\n    if (name in defaultOptions) {\n      nextOptions[name] = value;\n    }\n  }\n  return {\n    ...nextOptions,\n    gridOptions,\n  };\n}\n\nexport function categorize<Item extends InfiniteGridItemInfo = InfiniteGridItem>(items: Item[]) {\n  const groups: Array<CategorizedGroup<Item>> = [];\n  const groupKeys: Record<string | number, CategorizedGroup<Item>> = {};\n  const registeredGroupKeys: Record<string | number, boolean> = {};\n\n  items.filter((item) => item.groupKey != null).forEach(({ groupKey }) => {\n    registeredGroupKeys[groupKey!] = true;\n  });\n\n  let generatedGroupKey: number | string;\n  let isContinuousGroupKey = false;\n\n  items.forEach((item, i) => {\n    if (item.groupKey != null) {\n      isContinuousGroupKey = false;\n    } else if (!item.inserted && items[i - 1]) {\n      // In case of framework, inserted is false.\n      // If groupKey is not set, the group key of the previous item is followed.\n      item.groupKey = items[i - 1].groupKey!;\n      isContinuousGroupKey = false;\n    } else {\n      if (!isContinuousGroupKey) {\n        generatedGroupKey = makeKey(registeredGroupKeys);\n        isContinuousGroupKey = true;\n        registeredGroupKeys[generatedGroupKey] = true;\n      }\n      item.groupKey = generatedGroupKey;\n    }\n\n    const groupKey = item.groupKey;\n    let group = groupKeys[groupKey];\n\n    if (!group) {\n      group = {\n        groupKey,\n        items: [],\n      };\n      groupKeys[groupKey] = group;\n      groups.push(group);\n    }\n\n    group.items.push(item);\n  });\n  return groups;\n}\n\nexport function getNextCursors(\n  prevKeys: Array<string | number>,\n  nextKeys: Array<string | number>,\n  prevStartCursor: number,\n  prevEndCursor: number,\n) {\n  const result = diff(prevKeys, nextKeys, (key) => key);\n  let nextStartCursor = -1;\n  let nextEndCursor = -1;\n\n  // sync cursors\n  result.maintained.forEach(([prevIndex, nextIndex]) => {\n    if (prevStartCursor <= prevIndex && prevIndex <= prevEndCursor) {\n      if (nextStartCursor === -1) {\n        nextStartCursor = nextIndex;\n        nextEndCursor = nextIndex;\n      } else {\n        nextStartCursor = Math.min(nextStartCursor, nextIndex);\n        nextEndCursor = Math.max(nextEndCursor, nextIndex);\n      }\n    }\n  });\n  return {\n    startCursor: nextStartCursor,\n    endCursor: nextEndCursor,\n  };\n}\nexport function splitVirtualGroups<Group extends { type: GROUP_TYPE, groupKey: string | number }>(\n  groups: Group[],\n  direction: \"start\" | \"end\",\n  nextGroups: CategorizedGroup<InfiniteGridItemStatus>[],\n) {\n  let virtualGroups: Group[] = [];\n\n  if (direction === \"start\") {\n    const index = findIndex(groups, (group) => group.type === GROUP_TYPE.NORMAL);\n\n    if (index === -1) {\n      return [];\n    }\n    // Get the virtual group maintained in the group from the next group.\n    const endMaintainedIndex = findIndex(groups, (group) => {\n      return findIndex(nextGroups, (nextGroup) => nextGroup.groupKey === group.groupKey) >= 0;\n    });\n    const endIndex = endMaintainedIndex >= 0 ? Math.min(index, endMaintainedIndex) : index;\n\n    virtualGroups = groups.slice(0, endIndex);\n  } else {\n    const index = findLastIndex(groups, (group) => group.type === GROUP_TYPE.NORMAL);\n\n    if (index === -1) {\n      return [];\n    }\n    const startMaintainedIndex = findLastIndex(groups, (group) => {\n      return findIndex(nextGroups, (nextGroup) => nextGroup.groupKey === group.groupKey) >= 0;\n    });\n    const startIndex = startMaintainedIndex >= 0 ? Math.max(index, startMaintainedIndex) : index;\n\n    virtualGroups = groups.slice(startIndex + 1);\n  }\n\n  return virtualGroups;\n}\n\nexport function getFirstRenderingItems(\n  nextItems: InfiniteGridItemStatus[],\n  horizontal: boolean,\n) {\n  const groups = categorize(nextItems);\n\n  if (!groups[0]) {\n    return [];\n  }\n  return groups[0].items.map((item) => {\n    return new InfiniteGridItem(horizontal, {\n      ...item,\n    });\n  });\n}\nexport function getRenderingItemsByStatus(\n  groupManagerStatus: GroupManagerStatus,\n  nextItems: InfiniteGridItemStatus[],\n  usePlaceholder: boolean,\n  horizontal: boolean,\n) {\n  const prevGroups = groupManagerStatus.groups;\n  const groups = categorize(nextItems);\n\n  const startVirtualGroups = splitVirtualGroups(prevGroups, \"start\", groups);\n  const endVirtualGroups = splitVirtualGroups(prevGroups, \"end\", groups);\n  const nextGroups = [\n    ...startVirtualGroups,\n    ...groups,\n    ...endVirtualGroups,\n  ] as Array<InfiniteGridGroupStatus | CategorizedGroup<InfiniteGridItemStatus>>;\n  const {\n    startCursor,\n    endCursor,\n  } = getNextCursors(\n    prevGroups.map((group) => group.groupKey),\n    nextGroups.map((group) => group.groupKey),\n    groupManagerStatus.cursors[0],\n    groupManagerStatus.cursors[1],\n  );\n\n  let nextVisibleItems = flat(nextGroups.slice(startCursor, endCursor + 1).map((group) => {\n    return group.items.map((item) => {\n      return new InfiniteGridItem(horizontal, { ...item });\n    });\n  }));\n\n  if (!usePlaceholder) {\n    nextVisibleItems = nextVisibleItems.filter((item) => {\n      return item.type !== ITEM_TYPE.VIRTUAL;\n    });\n  }\n\n  return nextVisibleItems;\n}\n\nexport function mountRenderingItems(items: InfiniteGridItemInfo[], options: RenderingOptions) {\n  const {\n    grid,\n    usePlaceholder,\n    useLoading,\n    useFirstRender,\n    status,\n  } = options;\n  if (!grid) {\n    return;\n  }\n  if (usePlaceholder) {\n    grid.setPlaceholder({});\n  }\n  if (useLoading) {\n    grid.setLoading({});\n  }\n  if (status) {\n    grid.setStatus(status, true);\n  }\n\n  grid.syncItems(items);\n\n  if (useFirstRender && !status && grid.getGroups().length) {\n    grid.setCursors(0, 0, true);\n  }\n}\nexport function getRenderingItems(items: InfiniteGridItemInfo[], options: RenderingOptions) {\n  const {\n    status,\n    usePlaceholder,\n    useLoading,\n    horizontal,\n    useFirstRender,\n    grid,\n  } = options;\n  let visibleItems: InfiniteGridItem[] = [];\n\n  if (grid) {\n    grid.setPlaceholder(usePlaceholder ? {} : null);\n    grid.setLoading(useLoading ? {} : null);\n    grid.syncItems(items);\n\n    visibleItems = grid.getRenderingItems();\n  } else if (status) {\n    visibleItems = getRenderingItemsByStatus(status.groupManager, items, !!usePlaceholder, !!horizontal);\n  } else if (useFirstRender) {\n    visibleItems = getFirstRenderingItems(items, !!horizontal);\n  }\n\n  return visibleItems;\n}\n\n/* Class Decorator */\nexport function InfiniteGridGetterSetter(component: {\n  prototype: InfiniteGrid<any>,\n  propertyTypes: typeof GRID_PROPERTY_TYPES,\n}) {\n  const {\n    prototype,\n    propertyTypes,\n  } = component;\n  for (const name in propertyTypes) {\n    const attributes: Record<string, any> = {\n      enumerable: true,\n      configurable: true,\n      get(this: InfiniteGrid) {\n        const options = this.groupManager.options;\n        if (name in options) {\n          return options[name];\n        } else {\n          return options.gridOptions[name];\n        }\n      },\n      set(this: InfiniteGrid, value: any) {\n        const prevValue = this.groupManager[name];\n\n        if (prevValue === value) {\n          return;\n        }\n        this.groupManager.gridOptions = {\n          [name]: value,\n        };\n      },\n    };\n    Object.defineProperty(prototype, name, attributes);\n  }\n}\n\nexport function makeKey(\n  registeredKeys: Record<string, any>,\n  prefix = \"\",\n) {\n  let index = 0;\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    const key = `infinitegrid_${prefix}${index++}`;\n\n    if (!(key in registeredKeys)) {\n      return key;\n    }\n  }\n}\n\nexport function convertHTMLtoElement(html: string) {\n  const dummy = document.createElement(\"div\");\n\n  dummy.innerHTML = html;\n  return toArray(dummy.children);\n}\n\nexport function convertInsertedItems(\n  items: InfiniteGridInsertedItems,\n  groupKey?: string | number,\n): InfiniteGridItemInfo[] {\n  let insertedItems: Array<string | HTMLElement | InfiniteGridItemInfo>;\n\n  if (isString(items)) {\n    insertedItems = convertHTMLtoElement(items);\n  } else {\n    insertedItems = items;\n  }\n  return insertedItems.map((item) => {\n    let element!: HTMLElement;\n    let html = \"\";\n    let key!: string | number;\n\n    if (isString(item)) {\n      html = item;\n    } else if (\"parentNode\" in item) {\n      element = item;\n      html = item.outerHTML;\n    } else {\n      // inserted is true when adding via a method.\n      return { groupKey, inserted: true, ...item };\n    }\n\n    // inserted is true when adding via a method.\n    return {\n      key,\n      groupKey,\n      html,\n      element,\n      inserted: true,\n    };\n  });\n}\nexport function toArray(nodes: HTMLCollection): HTMLElement[];\nexport function toArray<T>(nodes: { length: number, [key: number]: T }): T[];\nexport function toArray<T>(nodes: { length: number, [key: number]: T }): T[] {\n  const array: T[] = [];\n\n  if (nodes) {\n    const length = nodes.length;\n\n    for (let i = 0; i < length; i++) {\n      array.push(nodes[i]);\n    }\n  }\n  return array;\n}\n\n\nexport function find<T>(arr: T[], callback: (value: T, index: number) => boolean): T | null {\n  const length = arr.length;\n\n  for (let i = 0; i < length; ++i) {\n    const value = arr[i];\n\n    if (callback(value, i)) {\n      return value;\n    }\n  }\n\n  return null;\n}\n\nexport function findIndex<T>(arr: T[], callback: (value: T, index: number) => boolean) {\n  const length = arr.length;\n  for (let i = 0; i < length; ++i) {\n    if (callback(arr[i], i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nexport function findLastIndex<T>(arr: T[], callback: (value: T, index: number) => boolean) {\n  const length = arr.length;\n  for (let i = length - 1; i >= 0; --i) {\n    if (callback(arr[i], i)) {\n      return i;\n    }\n  }\n\n  return -1;\n}\n\nexport function getItemInfo(info: InfiniteGridItemInfo) {\n  const nextInfo: InfiniteGridItemInfo = {};\n\n  for (const name in info) {\n    if (name in ITEM_INFO_PROPERTIES) {\n      nextInfo[name] = info[name];\n    }\n  }\n\n  return nextInfo;\n}\n\nexport function setPlaceholder(item: InfiniteGridItem, info: InfiniteGridItemStatus) {\n  for (const name in info) {\n    const value = info[name];\n\n    if (isObject(value)) {\n      item[name] = {\n        ...item[name],\n        ...value,\n      };\n    } else {\n      item[name] = info[name];\n    }\n  }\n}\n\nexport function isFlatOutline(start: number[], end: number[]) {\n  return start.length === end.length && start.every((pos, i) => end[i] === pos);\n}\n\nexport function range(length: number): number[] {\n  const arr: number[] = [];\n  for (let i = 0; i < length; ++i) {\n    arr.push(i);\n  }\n  return arr;\n}\n\nexport function flatGroups(groups: InfiniteGridGroup[]) {\n  return flat(groups.map(({ grid }) => grid.getItems() as InfiniteGridItem[]));\n}\n\n\nexport function filterVirtuals<T extends InfiniteGridItem | InfiniteGridGroup>(\n  items: T[],\n  includePlaceholders?: boolean\n): T[] {\n  if (includePlaceholders) {\n    return [...items];\n  } else {\n    return items.filter((item) => item.type !== ITEM_TYPE.VIRTUAL);\n  }\n}\n\n/**\n * Decorator that makes the method of InfiniteGrid available in the framework.\n * @ko 프레임워크에서 InfiniteGrid의 메소드를 사용할 수 있게 하는 데코레이터.\n * @private\n * @example\n * ```js\n * import { withInfiniteGridMethods } from \"@egjs/infinitegrid\";\n *\n * class Grid extends React.Component<Partial<InfiniteGridProps & InfiniteGridOptions>> {\n *   &#64;withInfiniteGridMethods\n *   private grid: NativeGrid;\n * }\n * ```\n */\nexport const withInfiniteGridMethods = withClassMethods(INFINITEGRID_METHODS);\n\n", "import Grid, {\n  GetterSetter,\n  GridFunction, GridItem, GridOptions,\n  GridOutlines, MOUNT_STATE, Properties, PROPERTY_TYPE,\n  RenderOptions, UPDATE_STATE,\n} from \"@egjs/grid\";\nimport { GROUP_TYPE, ITEM_TYPE, STATUS_TYPE } from \"./consts\";\nimport { InfiniteGridItem, InfiniteGridItemStatus } from \"./InfiniteGridItem\";\nimport { LoadingGrid, LOADING_GROUP_KEY } from \"./LoadingGrid\";\nimport { CategorizedGroup, InfiniteGridGroup, InfiniteGridItemInfo } from \"./types\";\nimport {\n  categorize, filterVirtuals, findIndex, findLastIndex,\n  flat,\n  flatGroups, getItemInfo, isNumber, makeKey,\n  range,\n  setPlaceholder,\n  splitGridOptions, splitOptions, splitVirtualGroups,\n} from \"./utils\";\n\nexport interface InfiniteGridGroupStatus {\n  type: GROUP_TYPE;\n  groupKey: string | number;\n  items: InfiniteGridItemStatus[];\n  outlines: GridOutlines;\n}\n\nexport interface GroupManagerOptions extends GridOptions {\n  appliedItemChecker?: (item: InfiniteGridItem, grid: Grid) => boolean;\n  gridConstructor: GridFunction | null;\n  gridOptions: Record<string, any>;\n}\n\nexport interface GroupManagerStatus {\n  cursors: [number, number];\n  orgCursors: [number, number];\n  itemCursors: [number, number];\n  startGroupKey: number | string;\n  endGroupKey: number | string;\n  groups: InfiniteGridGroupStatus[];\n  outlines: GridOutlines;\n}\n\n@GetterSetter\nexport class GroupManager extends Grid<GroupManagerOptions> {\n  public static defaultOptions: Required<GroupManagerOptions> = {\n    ...Grid.defaultOptions,\n    appliedItemChecker: () => false,\n    gridConstructor: null,\n    gridOptions: {},\n  };\n  public static propertyTypes = {\n    ...Grid.propertyTypes,\n    gridConstructor: PROPERTY_TYPE.PROPERTY,\n    gridOptions: PROPERTY_TYPE.PROPERTY,\n  } as const;\n  protected items: InfiniteGridItem[];\n  protected groupItems: InfiniteGridItem[] = [];\n  protected groups: InfiniteGridGroup[] = [];\n  protected itemKeys: Record<string | number, InfiniteGridItem> = {};\n  protected groupKeys: Record<string | number, InfiniteGridGroup> = {};\n  protected startCursor = 0;\n  protected endCursor = 0;\n  private _placeholder: Partial<InfiniteGridItemStatus> | null = null;\n  private _loadingGrid!: LoadingGrid;\n  private _mainGrid!: Grid;\n\n  constructor(container: HTMLElement, options: GroupManagerOptions) {\n    super(container, splitOptions(options));\n\n    this._loadingGrid = new LoadingGrid(container, {\n      externalContainerManager: this.containerManager,\n      useFit: false,\n      autoResize: false,\n      renderOnPropertyChange: false,\n      gap: this.gap,\n    });\n    this._mainGrid = this._makeGrid();\n  }\n  public set gridOptions(options: Record<string, any>) {\n    const {\n      gridOptions,\n      ...otherOptions\n    } = splitGridOptions(options);\n\n    const shouldRender = this._checkShouldRender(options);\n    this.options.gridOptions = {\n      ...this.options.gridOptions,\n      ...gridOptions,\n    };\n    [this._mainGrid, ...this.groups.map(({ grid }) => grid)].forEach((grid) => {\n      for (const name in options) {\n        (grid as any)[name] = options[name];\n      }\n    });\n    for (const name in otherOptions) {\n      this[name] = otherOptions[name];\n    }\n\n    this._loadingGrid.gap = this.gap;\n    if (shouldRender) {\n      this.scheduleRender();\n    }\n  }\n\n  public getItemByKey(key: string | number): InfiniteGridItem | null {\n    return this.itemKeys[key] || null;\n  }\n\n  public getGroupItems(includePlaceholders?: boolean) {\n    return filterVirtuals(this.groupItems, includePlaceholders);\n  }\n  public getVisibleItems(includePlaceholders?: boolean) {\n    return filterVirtuals(this.items, includePlaceholders);\n  }\n\n  public getRenderingItems() {\n    if (this.hasPlaceholder()) {\n      return this.items;\n    } else {\n      return this.items.filter((item) => item.type !== ITEM_TYPE.VIRTUAL);\n    }\n  }\n\n  public getGroups(includePlaceholders?: boolean): InfiniteGridGroup[] {\n    return filterVirtuals(this.groups, includePlaceholders);\n  }\n\n  public hasVisibleVirtualGroups() {\n    return this.getVisibleGroups(true).some((group) => group.type === GROUP_TYPE.VIRTUAL);\n  }\n  public hasPlaceholder() {\n    return !!this._placeholder;\n  }\n  public hasLoadingItem() {\n    return !!this._getLoadingItem();\n  }\n\n  public updateItems(items = this.groupItems, options?: RenderOptions) {\n    return super.updateItems(items, options);\n  }\n  public setPlaceholder(placeholder: Partial<InfiniteGridItemStatus> | null) {\n    this._placeholder = placeholder;\n    this._updatePlaceholder();\n  }\n\n  public getLoadingType() {\n    return this._loadingGrid.type;\n  }\n\n  public startLoading(type: \"start\" | \"end\") {\n    this._loadingGrid.type = type;\n    this.items = this._getRenderingItems();\n\n    return true;\n  }\n\n  public waitEndLoading() {\n    if (this._loadingGrid.type) {\n      this._loadingGrid.isWaitEnd = true;\n      return true;\n    }\n    return false;\n  }\n\n  public endLoading() {\n    if (this._loadingGrid.isWaitEnd) {\n      const prevType = this._loadingGrid.type;\n\n      this._loadingGrid.type = \"\";\n      this._loadingGrid.endLoading();\n      this.items = this._getRenderingItems();\n      return !!prevType;\n    }\n    return false;\n  }\n\n  public setLoading(loading: Partial<InfiniteGridItemStatus> | null) {\n    this._loadingGrid.setLoadingItem(loading);\n    this.items = this._getRenderingItems();\n  }\n\n  public getVisibleGroups(includePlaceholders?: boolean): InfiniteGridGroup[] {\n    const groups = this.groups.slice(this.startCursor, this.endCursor + 1);\n\n    return filterVirtuals(groups, includePlaceholders);\n  }\n\n  public getComputedOutlineLength(items = this.items) {\n    return this._mainGrid.getComputedOutlineLength(items);\n  }\n  public getComputedOutlineSize(items = this.items) {\n    return this._mainGrid.getComputedOutlineSize(items);\n  }\n\n  public applyGrid(items: InfiniteGridItem[], direction: \"end\" | \"start\", outline: number[]): GridOutlines {\n    const renderingGroups = this.groups.slice();\n\n    if (!renderingGroups.length) {\n      return {\n        start: [],\n        end: [],\n      };\n    }\n\n\n    const loadingGrid = this._loadingGrid;\n\n    if (loadingGrid.getLoadingItem()) {\n      if (loadingGrid.type === \"start\") {\n        renderingGroups.unshift(this._getLoadingGroup());\n      } else if (loadingGrid.type === \"end\") {\n        renderingGroups.push(this._getLoadingGroup());\n      }\n    }\n\n    const groups = renderingGroups.slice();\n\n    let nextOutline = outline;\n\n    if (direction === \"start\") {\n      groups.reverse();\n    }\n\n    const appliedItemChecker = this.options.appliedItemChecker;\n    const groupItems = this.groupItems;\n    const outlineLength = this.getComputedOutlineLength(groupItems);\n    const outlineSize = this.getComputedOutlineSize(groupItems);\n    const itemRenderer = this.itemRenderer;\n    let passedItems: InfiniteGridItem[] = [];\n\n    groups.forEach((group) => {\n      const grid = group.grid;\n      const gridItems = grid.getItems() as InfiniteGridItem[];\n      const isVirtual = group.type === GROUP_TYPE.VIRTUAL && !gridItems[0];\n\n      passedItems = direction === \"end\" ? [...passedItems, ...gridItems] : [...gridItems, ...passedItems];\n      grid.outlineLength = outlineLength;\n      grid.outlineSize = outlineSize;\n\n      const appliedItems = passedItems.filter((item) => {\n        if (item.mountState === MOUNT_STATE.UNCHECKED || !item.rect.width) {\n          itemRenderer.updateItem(item, true);\n        }\n        return (item.orgRect.width && item.rect.width) || appliedItemChecker(item, grid);\n      });\n      let gridOutlines: GridOutlines;\n\n      if (isVirtual) {\n        gridOutlines = this._applyVirtualGrid(grid, direction, nextOutline);\n      } else if (appliedItems.length) {\n        gridOutlines = grid.applyGrid(appliedItems, direction, nextOutline);\n      } else {\n        gridOutlines = {\n          start: [...nextOutline],\n          end: [...nextOutline],\n        };\n      }\n\n      grid.setOutlines(gridOutlines);\n      nextOutline = gridOutlines.passed || gridOutlines[direction];\n      passedItems = gridOutlines.passedItems?.map((index) => passedItems[index]) ?? [];\n    });\n\n    return {\n      start: renderingGroups[0].grid.getOutlines().start,\n      end: renderingGroups[renderingGroups.length - 1].grid.getOutlines().end,\n    };\n  }\n\n  public syncItems(nextItemInfos: InfiniteGridItemInfo[]) {\n    const prevItemKeys = this.itemKeys;\n\n    this.itemKeys = {};\n    const nextItems = this._syncItemInfos(nextItemInfos.map((info) => getItemInfo(info)), prevItemKeys);\n    const prevGroupKeys = this.groupKeys;\n    let nextManagerGroups = categorize(nextItems);\n\n    const startVirtualGroups = this._splitVirtualGroups(\"start\", nextManagerGroups);\n    const endVirtualGroups = this._splitVirtualGroups(\"end\", nextManagerGroups);\n    nextManagerGroups = [...startVirtualGroups, ...this._mergeVirtualGroups(nextManagerGroups), ...endVirtualGroups];\n\n    const nextGroups: InfiniteGridGroup[] = nextManagerGroups.map(({ groupKey, items }) => {\n      const isVirtual = !items[0] || items[0].type === ITEM_TYPE.VIRTUAL;\n      const grid = prevGroupKeys[groupKey]?.grid ?? this._makeGrid();\n      const gridItems = isVirtual ? items : items.filter(({ type }) => type === ITEM_TYPE.NORMAL);\n\n      grid.setItems(gridItems);\n\n      return {\n        type: isVirtual ? GROUP_TYPE.VIRTUAL : GROUP_TYPE.NORMAL,\n        groupKey,\n        grid,\n        items: gridItems,\n        renderItems: items,\n      };\n    });\n\n    this._registerGroups(nextGroups);\n  }\n\n  public renderItems(options: RenderOptions = {}) {\n    if (options.useResize) {\n      this.groupItems.forEach((item) => {\n        item.updateState = UPDATE_STATE.NEED_UPDATE;\n      });\n      const loadingItem = this._getLoadingItem();\n\n      if (loadingItem) {\n        loadingItem.updateState = UPDATE_STATE.NEED_UPDATE;\n      }\n    }\n    return super.renderItems(options);\n  }\n\n  public setCursors(startCursor: number, endCursor: number) {\n    this.startCursor = startCursor;\n    this.endCursor = endCursor;\n    this.items = this._getRenderingItems();\n  }\n\n  public getStartCursor() {\n    return this.startCursor;\n  }\n\n  public getEndCursor() {\n    return this.endCursor;\n  }\n\n  public getGroupStatus(type?: STATUS_TYPE, includePlaceholders?: boolean): GroupManagerStatus {\n    const orgStartCursor = this.startCursor;\n    const orgEndCursor = this.endCursor;\n    const orgGroups = this.groups;\n    const startGroup = orgGroups[orgStartCursor];\n    const endGroup = orgGroups[orgEndCursor];\n\n    let startCursor = orgStartCursor;\n    let endCursor = orgEndCursor;\n\n    const isMinimizeItems = type === STATUS_TYPE.MINIMIZE_INVISIBLE_ITEMS;\n    const isMinimizeGroups = type === STATUS_TYPE.MINIMIZE_INVISIBLE_GROUPS;\n    let groups: InfiniteGridGroup[];\n\n    if (type === STATUS_TYPE.REMOVE_INVISIBLE_GROUPS) {\n      groups = this.getVisibleGroups(includePlaceholders);\n      endCursor = groups.length - 1;\n      startCursor = 0;\n    } else {\n      groups = this.getGroups(includePlaceholders);\n\n      if (!includePlaceholders) {\n        startCursor = -1;\n        endCursor = -1;\n\n        for (let orgIndex = orgStartCursor; orgIndex <= orgEndCursor; ++orgIndex) {\n          const orgGroup = orgGroups[orgIndex];\n\n          if (orgGroup && orgGroup.type !== GROUP_TYPE.VIRTUAL) {\n            startCursor = groups.indexOf(orgGroup);\n            break;\n          }\n        }\n        for (let orgIndex = orgEndCursor; orgIndex >= orgStartCursor; --orgIndex) {\n          const orgGroup = orgGroups[orgIndex];\n\n          if (orgGroup && orgGroup.type !== GROUP_TYPE.VIRTUAL) {\n            endCursor = groups.lastIndexOf(orgGroup);\n            break;\n          }\n        }\n      }\n    }\n\n    const groupStatus: InfiniteGridGroupStatus[] = groups.map(({ grid, groupKey }, i) => {\n      const isOutsideCursor = i < startCursor || endCursor < i;\n      const isVirtualItems = isMinimizeItems && isOutsideCursor;\n      const isVirtualGroup = isMinimizeGroups && isOutsideCursor;\n      const gridItems = grid.getItems() as InfiniteGridItem[];\n      const items = isVirtualGroup\n        ? []\n        : gridItems.map((item) => isVirtualItems ? item.getVirtualStatus() : item.getMinimizedStatus());\n\n      return {\n        type: isVirtualGroup || isVirtualItems ? GROUP_TYPE.VIRTUAL : GROUP_TYPE.NORMAL,\n        groupKey: groupKey,\n        outlines: grid.getOutlines(),\n        items,\n      };\n    });\n\n\n    const totalItems = this.getGroupItems();\n\n    const itemStartCursor = totalItems.indexOf(startGroup?.items[0]);\n    const itemEndCursor = totalItems.indexOf(endGroup?.items.slice().reverse()[0]);\n\n    return {\n      cursors: [startCursor, endCursor],\n      orgCursors: [orgStartCursor, orgEndCursor],\n      itemCursors: [itemStartCursor, itemEndCursor],\n      startGroupKey: startGroup?.groupKey,\n      endGroupKey: endGroup?.groupKey,\n      groups: groupStatus,\n      outlines: this.outlines,\n    };\n  }\n  protected fitOutlines(useFit = this.useFit) {\n    const groups = this.groups;\n\n    if (!groups[0]) {\n      return;\n    }\n    const outlines = this.outlines;\n    const startOutline = outlines.start;\n    const outlineOffset = startOutline.length ? Math.min(...startOutline) : 0;\n\n    // If the outline is less than 0, a fit occurs forcibly.\n    if (!useFit && outlineOffset > 0) {\n      return;\n    }\n\n    groups.forEach(({ grid }) => {\n      const { start, end } = grid.getOutlines();\n\n      grid.setOutlines({\n        start: start.map((point) => point - outlineOffset),\n        end: end.map((point) => point - outlineOffset),\n      });\n    });\n\n    this.groupItems.forEach((item) => {\n      const contentPos = item.cssContentPos;\n\n      if (!isNumber(contentPos)) {\n        return;\n      }\n      item.cssContentPos = contentPos - outlineOffset;\n    });\n  }\n  public setGroupStatus(status: GroupManagerStatus) {\n    this.itemKeys = {};\n    this.groupItems = [];\n    this.items = [];\n    const prevGroupKeys = this.groupKeys;\n\n    const nextGroups: InfiniteGridGroup[] = status.groups.map(({\n      type,\n      groupKey,\n      items,\n      outlines,\n    }) => {\n      const nextItems = this._syncItemInfos(items);\n      const grid = prevGroupKeys[groupKey]?.grid ?? this._makeGrid();\n\n      grid.setOutlines(outlines);\n      grid.setItems(nextItems);\n\n      return {\n        type,\n        groupKey,\n        grid,\n        items: nextItems,\n        renderItems: nextItems,\n      };\n    });\n\n    this.setOutlines(status.outlines);\n    this._registerGroups(nextGroups);\n    this._updatePlaceholder();\n    this.setCursors(status.cursors[0], status.cursors[1]);\n  }\n  public appendPlaceholders(items: number | InfiniteGridItemStatus[], groupKey?: string | number) {\n    return this.insertPlaceholders(\"end\", items, groupKey);\n  }\n  public prependPlaceholders(items: number | InfiniteGridItemStatus[], groupKey?: string | number) {\n    return this.insertPlaceholders(\"start\", items, groupKey);\n  }\n  public removePlaceholders(type: \"start\" | \"end\" | { groupKey: string | number }) {\n    const groups = this.groups;\n    const length = groups.length;\n\n    if (type === \"start\") {\n      const index = findIndex(groups, (group) => group.type === GROUP_TYPE.NORMAL);\n\n      groups.splice(0, index);\n\n    } else if (type === \"end\") {\n      const index = findLastIndex(groups, (group) => group.type === GROUP_TYPE.NORMAL);\n\n      groups.splice(index + 1, length - index - 1);\n    } else {\n      const groupKey = type.groupKey;\n\n      const index = findIndex(groups, (group) => group.groupKey === groupKey);\n\n      if (index > -1) {\n        groups.splice(index, 1);\n      }\n    }\n\n    this.syncItems(flatGroups(this.getGroups()));\n  }\n  public insertPlaceholders(\n    direction: \"start\" | \"end\",\n    items: number | InfiniteGridItemStatus[],\n    groupKey: string | number = makeKey(this.groupKeys, \"virtual_\"),\n  ) {\n\n    let infos: InfiniteGridItemInfo[] = [];\n\n    if (isNumber(items)) {\n      infos = range(items).map(() => ({ type: ITEM_TYPE.VIRTUAL, groupKey }));\n    } else if (Array.isArray(items)) {\n      infos = items.map((status) => ({\n        groupKey,\n        ...status,\n        type: ITEM_TYPE.VIRTUAL,\n      }));\n    }\n    const grid = this._makeGrid();\n    const nextItems = this._syncItemInfos(infos, this.itemKeys);\n\n    this._updatePlaceholder(nextItems);\n    grid.setItems(nextItems);\n\n    const group = {\n      type: GROUP_TYPE.VIRTUAL,\n      groupKey,\n      grid,\n      items: nextItems,\n      renderItems: nextItems,\n    };\n\n    this.groupKeys[groupKey] = group;\n\n    if (direction === \"end\") {\n      this.groups.push(group);\n      this.groupItems.push(...nextItems);\n    } else {\n      this.groups.splice(0, 0, group);\n      this.groupItems.splice(0, 0, ...nextItems);\n      if (this.startCursor > -1) {\n        ++this.startCursor;\n        ++this.endCursor;\n      }\n    }\n\n\n    return {\n      group,\n      items: nextItems,\n    };\n  }\n\n  public shouldRerenderItems() {\n    let isRerender = false;\n\n    this.getVisibleGroups().forEach((group) => {\n      const items = group.items;\n\n      if (\n        items.length === group.renderItems.length\n        || items.every((item) => item.mountState === MOUNT_STATE.UNCHECKED)\n      ) {\n        return;\n      }\n      isRerender = true;\n      group.renderItems = [...items];\n    });\n    if (isRerender) {\n      this.items = this._getRenderingItems();\n    }\n    return isRerender;\n  }\n\n  // protected checkReady(options: RenderOptions = {}) {\n  //   const items = this.items;\n  //   const updated = items.filter((item) => item.element?.parentNode && item.updateState !== UPDATE_STATE.UPDATED);\n  //   const mounted = items.filter((item) => item.element?.parentNode && item.mountState !== MOUNT_STATE.MOUNTED);\n\n\n  //   if (updated.length && updated.every((item) => item.type != ITEM_TYPE.NORMAL)) {\n  //     this._updateItems(updated);\n  //     this.readyItems(mounted, updated, options);\n  //   } else {\n  //     super.checkReady(options);\n  //   }\n  // }\n  protected _updateItems(items: GridItem[]): void {\n    this.itemRenderer.updateEqualSizeItems(items, this.groupItems);\n  }\n\n  private _getGroupItems() {\n    return flatGroups(this.getGroups(true));\n  }\n\n  private _getRenderingItems() {\n    const items = flat(this.getVisibleGroups(true).map((item) => item.renderItems));\n\n\n    const loadingGrid = this._loadingGrid;\n    const loadingItem = loadingGrid.getLoadingItem();\n\n    if (loadingItem) {\n      if (loadingGrid.type === \"end\") {\n        items.push(loadingItem);\n      } else if (loadingGrid.type === \"start\") {\n        items.unshift(loadingItem);\n      }\n    }\n\n    return items;\n  }\n\n  private _checkShouldRender(options: Record<string, any>) {\n    const GridConstructor = this.options.gridConstructor!;\n    const prevOptions = this.gridOptions;\n    const propertyTypes = GridConstructor.propertyTypes;\n\n    for (const name in prevOptions) {\n      if (!(name in options) && propertyTypes[name] === PROPERTY_TYPE.RENDER_PROPERTY) {\n        return true;\n      }\n    }\n    for (const name in options) {\n      if (prevOptions[name] !== options[name] && propertyTypes[name] === PROPERTY_TYPE.RENDER_PROPERTY) {\n        return true;\n      }\n    }\n    return false;\n  }\n  private _applyVirtualGrid(grid: Grid, direction: \"start\" | \"end\", outline: number[]) {\n    const startOutline = outline.length ? [...outline] : [0];\n    const prevOutlines = grid.getOutlines();\n    const prevOutline = prevOutlines[direction === \"end\" ? \"start\" : \"end\"];\n\n    if (\n      prevOutline.length !== startOutline.length\n      || prevOutline.some((value, i) => value !== startOutline[i])\n    ) {\n      return {\n        start: [...startOutline],\n        end: [...startOutline],\n      };\n    }\n    return prevOutlines;\n  }\n  private _syncItemInfos(\n    nextItemInfos: InfiniteGridItemStatus[],\n    prevItemKeys: Record<string | number, InfiniteGridItem> = {},\n  ) {\n    const horizontal = this.options.horizontal;\n    const nextItemKeys = this.itemKeys;\n\n    nextItemInfos.filter((info) => info.key != null).forEach((info) => {\n      const key = info.key!;\n      const prevItem = prevItemKeys[key];\n\n      if (!prevItem) {\n        nextItemKeys[key] = new InfiniteGridItem(horizontal, {\n          ...info,\n        });\n      } else if (prevItem.type === ITEM_TYPE.VIRTUAL && info.type !== ITEM_TYPE.VIRTUAL) {\n        nextItemKeys[key] = new InfiniteGridItem(horizontal, {\n          orgRect: prevItem.orgRect,\n          rect: prevItem.rect,\n          ...info,\n        });\n      } else {\n        if (info.data) {\n          prevItem.data = info.data;\n        }\n        if (info.groupKey != null) {\n          prevItem.groupKey = info.groupKey!;\n        }\n        if (info.element) {\n          prevItem.element = info.element;\n        }\n        nextItemKeys[key] = prevItem;\n      }\n    });\n    const nextItems = nextItemInfos.map((info) => {\n      let key = info.key!;\n\n      if (info.key == null) {\n        key = makeKey(nextItemKeys, info.type === ITEM_TYPE.VIRTUAL ? \"virtual_\" : \"\");\n      }\n      let item = nextItemKeys[key];\n\n      if (!item) {\n        const prevItem = prevItemKeys[key];\n\n        if (prevItem) {\n          item = prevItem;\n\n          if (info.data) {\n            item.data = info.data;\n          }\n          if (info.element) {\n            item.element = info.element;\n          }\n        } else {\n          item = new InfiniteGridItem(horizontal, {\n            ...info,\n            key,\n          });\n        }\n        nextItemKeys[key] = item;\n      }\n      return item;\n    });\n    return nextItems;\n  }\n  private _registerGroups(groups: InfiniteGridGroup[]) {\n    const nextGroupKeys: Record<string | number, InfiniteGridGroup> = {};\n\n    groups.forEach((group) => {\n      nextGroupKeys[group.groupKey] = group;\n    });\n\n    this.groups = groups;\n    this.groupKeys = nextGroupKeys;\n    this.groupItems = this._getGroupItems();\n  }\n  private _splitVirtualGroups(direction: \"start\" | \"end\", nextGroups: CategorizedGroup[]) {\n    const groups = splitVirtualGroups(this.groups, direction, nextGroups);\n    const itemKeys = this.itemKeys;\n\n    groups.forEach(({ renderItems }) => {\n      renderItems.forEach((item) => {\n        itemKeys[item.key] = item;\n      });\n    });\n\n    return groups;\n  }\n  private _mergeVirtualGroups(groups: Array<CategorizedGroup<InfiniteGridItem>>) {\n    const itemKeys = this.itemKeys;\n    const groupKeys = this.groupKeys;\n\n    groups.forEach((group) => {\n      const prevGroup = groupKeys[group.groupKey];\n\n      if (!prevGroup) {\n        return;\n      }\n      const items = group.items;\n\n      if (items.every((item) => item.mountState === MOUNT_STATE.UNCHECKED)) {\n        prevGroup.renderItems.forEach((item) => {\n          if (item.type === ITEM_TYPE.VIRTUAL && !itemKeys[item.key]) {\n            items.push(item);\n            itemKeys[item.key] = item;\n          }\n        });\n      }\n    });\n    return groups;\n  }\n\n  private _updatePlaceholder(items = this.groupItems) {\n    const placeholder = this._placeholder;\n\n    if (!placeholder) {\n      return;\n    }\n\n    items.filter((item) => item.type === ITEM_TYPE.VIRTUAL).forEach((item) => {\n      setPlaceholder(item, placeholder);\n    });\n  }\n  private _makeGrid() {\n    const GridConstructor = this.options.gridConstructor!;\n    const gridOptions = this.gridOptions;\n    const container = this.containerElement;\n\n    return new GridConstructor(container, {\n      ...gridOptions,\n      useFit: false,\n      autoResize: false,\n      useResizeObserver: false,\n      observeChildren: false,\n      renderOnPropertyChange: false,\n      externalContainerManager: this.containerManager,\n      externalItemRenderer: this.itemRenderer,\n    });\n  }\n  private _getLoadingGroup(): InfiniteGridGroup {\n    const loadingGrid = this._loadingGrid;\n    const items = loadingGrid.getItems() as InfiniteGridItem[];\n\n    return {\n      groupKey: LOADING_GROUP_KEY,\n      type: GROUP_TYPE.NORMAL,\n      grid: loadingGrid,\n      items,\n      renderItems: items,\n    };\n  }\n  private _getLoadingItem() {\n    return this._loadingGrid.getLoadingItem();\n  }\n}\n\nexport interface GroupManager extends Properties<typeof GroupManager> {\n  getItems(): InfiniteGridItem[];\n}\n", "import Component from \"@egjs/component\";\nimport { diff } from \"@egjs/list-differ\";\nimport { DIRECTION } from \"./consts\";\nimport { findIndex, findLastIndex, getNextCursors, isFlatOutline } from \"./utils\";\n\nexport interface OnInfiniteRequestAppend {\n  key?: string | number | undefined;\n  nextKey?: string | number | undefined;\n  nextKeys?: Array<string | number>;\n  isVirtual: boolean;\n}\n\nexport interface OnInfiniteRequestPrepend {\n  key?: string | number;\n  nextKey?: string | number;\n  nextKeys?: Array<string | number>;\n  isVirtual: boolean;\n}\n\nexport interface OnInfiniteChange {\n  prevStartCursor: number;\n  prevEndCursor: number;\n  nextStartCursor: number;\n  nextEndCursor: number;\n}\n\nexport interface InfiniteEvents {\n  requestAppend: OnInfiniteRequestAppend;\n  requestPrepend: OnInfiniteRequestPrepend;\n  change: OnInfiniteChange;\n}\n\nexport interface InfiniteOptions {\n  useRecycle?: boolean;\n  threshold?: number;\n  defaultDirection?: \"start\" | \"end\";\n}\n\nexport interface InfiniteItemPart {\n  key: string | number;\n  pos: number;\n  size: number;\n}\nexport interface InfiniteItem {\n  key: string | number;\n  startOutline: number[];\n  endOutline: number[];\n  parts?: InfiniteItemPart[];\n  isVirtual?: boolean;\n}\n\nexport class Infinite extends Component<InfiniteEvents> {\n  public options: Required<InfiniteOptions>;\n  protected startCursor = -1;\n  protected endCursor = -1;\n  protected size = 0;\n  protected items: InfiniteItem[] = [];\n  protected itemKeys: Record<string | number, InfiniteItem> = {};\n  constructor(options: InfiniteOptions) {\n    super();\n    this.options = {\n      threshold: 0,\n      useRecycle: true,\n      defaultDirection: \"end\",\n      ...options,\n    };\n  }\n  public scroll(scrollPos: number) {\n    const prevStartCursor = this.startCursor;\n    const prevEndCursor = this.endCursor;\n    const items = this.items;\n    const length = items.length;\n    const size = this.size;\n    const {\n      defaultDirection,\n      threshold,\n      useRecycle,\n    } = this.options;\n    const isDirectionEnd = defaultDirection === \"end\";\n\n    if (!length) {\n      this.trigger(isDirectionEnd ? \"requestAppend\" : \"requestPrepend\", {\n        key: undefined,\n        isVirtual: false,\n      });\n      return;\n    } else if (prevStartCursor === -1 || prevEndCursor === -1) {\n      const nextCursor = isDirectionEnd ? 0 : length - 1;\n      this.trigger(\"change\", {\n        prevStartCursor,\n        prevEndCursor,\n        nextStartCursor: nextCursor,\n        nextEndCursor: nextCursor,\n      });\n      return;\n    }\n\n    const endScrollPos = scrollPos + size;\n    const startEdgePos = Math.max(...items[prevStartCursor].startOutline);\n    const endEdgePos = Math.min(...items[prevEndCursor].endOutline);\n    const visibles = items.map((item) => {\n      const {\n        startOutline,\n        endOutline,\n      } = item;\n\n      if (!startOutline.length || !endOutline.length || isFlatOutline(startOutline, endOutline)) {\n        return false;\n      }\n      const startPos = Math.min(...startOutline);\n      const endPos = Math.max(...endOutline);\n\n      if (startPos - threshold <= endScrollPos && scrollPos <= endPos + threshold) {\n        return true;\n      }\n      return false;\n    });\n    const hasStartItems = 0 < prevStartCursor;\n    const hasEndItems = prevEndCursor < length - 1;\n    const isStart = scrollPos <= startEdgePos + threshold;\n    const isEnd = endScrollPos >= endEdgePos - threshold;\n    let nextStartCursor = visibles.indexOf(true);\n    let nextEndCursor = visibles.lastIndexOf(true);\n\n    if (nextStartCursor === -1) {\n      nextStartCursor = prevStartCursor;\n      nextEndCursor = prevEndCursor;\n    }\n\n    if (!useRecycle) {\n      nextStartCursor = Math.min(nextStartCursor, prevStartCursor);\n      nextEndCursor = Math.max(nextEndCursor, prevEndCursor);\n    }\n    if (nextStartCursor === prevStartCursor && hasStartItems && isStart) {\n      nextStartCursor -= 1;\n    }\n    if (nextEndCursor === prevEndCursor && hasEndItems && isEnd) {\n      nextEndCursor += 1;\n    }\n    let nextVisibleItems = items.slice(nextStartCursor, nextEndCursor + 1);\n\n    // It must contain no virtual items.\n    if (nextVisibleItems.every((item) => item.isVirtual === true)) {\n      // The real item can be in either the start or end direction.\n      let hasRealItem = false;\n\n      for (let i = nextStartCursor - 1; i >= 0; --i) {\n        if (!items[i].isVirtual) {\n          nextStartCursor = i;\n          hasRealItem = true;\n          break;\n        }\n      }\n      if (!hasRealItem) {\n        for (let i = nextEndCursor + 1; i < length; ++i) {\n          if (!items[i].isVirtual) {\n            nextEndCursor = i;\n            hasRealItem = true;\n            break;\n          }\n        }\n      }\n      if (hasRealItem) {\n        nextVisibleItems = items.slice(nextStartCursor, nextEndCursor + 1);\n      }\n    }\n\n    const hasVirtualItems = nextVisibleItems.some((item) => item.isVirtual === true);\n\n    if (prevStartCursor !== nextStartCursor || prevEndCursor !== nextEndCursor) {\n      this.trigger(\"change\", {\n        prevStartCursor,\n        prevEndCursor,\n        nextStartCursor,\n        nextEndCursor,\n      });\n\n      if (!hasVirtualItems) {\n        return;\n      }\n    }\n\n    // If a virtual item is included, a requestPrepend (or requestAppend) event is triggered.\n    if (hasVirtualItems) {\n      const isStartVirtual = nextVisibleItems[0]?.isVirtual;\n      const isEndVirtual = nextVisibleItems[nextVisibleItems.length - 1]?.isVirtual;\n\n      if ((!isDirectionEnd || !isEnd) && isStartVirtual) {\n        const realItemIndex = findIndex(nextVisibleItems, (item) => !item.isVirtual);\n        const endVirtualItemIndex = (realItemIndex === -1 ? nextVisibleItems.length : realItemIndex) - 1;\n\n        if (nextVisibleItems[endVirtualItemIndex]) {\n          this.trigger(\"requestPrepend\", {\n            key: realItemIndex > -1 ? nextVisibleItems[realItemIndex].key : undefined,\n            nextKey: nextVisibleItems[endVirtualItemIndex].key,\n            nextKeys: nextVisibleItems.slice(0, endVirtualItemIndex + 1).map((item) => item.key),\n            isVirtual: true,\n          });\n        }\n      } else if ((isDirectionEnd || !isStart) && isEndVirtual) {\n        const realItemIndex = findLastIndex(nextVisibleItems, (item) => !item.isVirtual);\n        const startVirtualItemIndex = realItemIndex + 1;\n\n        if (nextVisibleItems[startVirtualItemIndex]) {\n          this.trigger(\"requestAppend\", {\n            key: realItemIndex > -1 ? nextVisibleItems[realItemIndex].key : undefined,\n            nextKey: nextVisibleItems[startVirtualItemIndex].key,\n            nextKeys: nextVisibleItems.slice(startVirtualItemIndex).map((item) => item.key),\n            isVirtual: true,\n          });\n        }\n      }\n    } else if (!this._requestVirtualItems()) {\n      if ((!isDirectionEnd || !isEnd) && isStart) {\n        this.trigger(\"requestPrepend\", {\n          key: items[prevStartCursor].key,\n          isVirtual: false,\n        });\n      } else if ((isDirectionEnd || !isStart) && isEnd) {\n        this.trigger(\"requestAppend\", {\n          key: items[prevEndCursor].key,\n          isVirtual: false,\n        });\n      }\n    }\n  }\n\n  /**\n   * Call the requestAppend or requestPrepend event to fill the virtual items.\n   * @ko virtual item을 채우기 위해 requestAppend 또는 requestPrepend 이벤트를 호출합니다.\n   * @return - Whether the event is called. <ko>이벤트를 호출했는지 여부.</ko>\n   */\n  public _requestVirtualItems() {\n    const isDirectionEnd = this.options.defaultDirection === \"end\";\n    const items = this.items;\n    const totalVisibleItems = this.getVisibleItems();\n    const visibleItems = totalVisibleItems.filter((item) => !item.isVirtual);\n    const totalVisibleLength = totalVisibleItems.length;\n    const visibleLength = visibleItems.length;\n    const startCursor = this.getStartCursor();\n    const endCursor = this.getEndCursor();\n\n    if (visibleLength === totalVisibleLength) {\n      return false;\n    } else if (visibleLength) {\n      const startKey = visibleItems[0].key;\n      const endKey = visibleItems[visibleLength - 1].key;\n      const startIndex = findIndex(items, (item) => item.key === startKey) - 1;\n      const endIndex = findIndex(items, (item) => item.key === endKey) + 1;\n\n      const isEnd = endIndex <= endCursor;\n      const isStart = startIndex >= startCursor;\n\n      // Fill the placeholder with the original item.\n      if ((isDirectionEnd || !isStart) && isEnd) {\n        this.trigger(\"requestAppend\", {\n          key: endKey,\n          nextKey: items[endIndex].key,\n          isVirtual: true,\n        });\n        return true;\n      } else if ((!isDirectionEnd || !isEnd) && isStart) {\n        this.trigger(\"requestPrepend\", {\n          key: startKey,\n          nextKey: items[startIndex].key,\n          isVirtual: true,\n        });\n        return true;\n      }\n    } else if (totalVisibleLength) {\n      const lastItem = totalVisibleItems[totalVisibleLength - 1];\n\n      if (isDirectionEnd) {\n        this.trigger(\"requestAppend\", {\n          nextKey: totalVisibleItems[0].key,\n          isVirtual: true,\n        });\n      } else {\n        this.trigger(\"requestPrepend\", {\n          nextKey: lastItem.key,\n          isVirtual: true,\n        });\n      }\n      return true;\n    }\n    return false;\n  }\n  public setCursors(startCursor: number, endCursor: number) {\n    this.startCursor = startCursor;\n    this.endCursor = endCursor;\n  }\n  public setSize(size: number) {\n    this.size = size;\n  }\n  public getStartCursor() {\n    return this.startCursor;\n  }\n  public getEndCursor() {\n    return this.endCursor;\n  }\n  public isLoading(direction: \"start\" | \"end\") {\n    const startCursor = this.startCursor;\n    const endCursor = this.endCursor;\n    const items = this.items;\n    const firstItem = items[startCursor]!;\n    const lastItem = items[endCursor]!;\n    const length = items.length;\n\n    if (\n      direction === DIRECTION.END\n      && endCursor > -1\n      && endCursor < length - 1\n      && !lastItem.isVirtual\n      && !isFlatOutline(lastItem.startOutline, lastItem.endOutline)\n    ) {\n      return false;\n    }\n    if (\n      direction === DIRECTION.START\n      && startCursor > 0\n      && !firstItem.isVirtual\n      && !isFlatOutline(firstItem.startOutline, firstItem.endOutline)\n    ) {\n      return false;\n    }\n    return true;\n  }\n  public setItems(nextItems: InfiniteItem[]) {\n    this.items = nextItems;\n\n    const itemKeys: Record<string | number, InfiniteItem> = {};\n\n    nextItems.forEach((item) => {\n      itemKeys[item.key] = item;\n    });\n    this.itemKeys = itemKeys;\n  }\n  public syncItems(nextItems: InfiniteItem[]) {\n    const prevItems = this.items;\n    const prevStartCursor = this.startCursor;\n    const prevEndCursor = this.endCursor;\n    const {\n      startCursor: nextStartCursor,\n      endCursor: nextEndCursor,\n    } = getNextCursors(\n      this.items.map((item) => item.key),\n      nextItems.map((item) => item.key),\n      prevStartCursor,\n      prevEndCursor,\n    );\n    // sync items between cursors\n    let isChange = nextEndCursor - nextStartCursor !== prevEndCursor - prevStartCursor\n      || (prevStartCursor === -1 || nextStartCursor === -1);\n\n    if (!isChange) {\n      const prevVisibleItems = prevItems.slice(prevStartCursor, prevEndCursor + 1);\n      const nextVisibleItems = nextItems.slice(nextStartCursor, nextEndCursor + 1);\n      const visibleResult = diff(prevVisibleItems, nextVisibleItems, (item) => item.key);\n\n      isChange = visibleResult.added.length > 0\n        || visibleResult.removed.length > 0\n        || visibleResult.changed.length > 0;\n    }\n    this.setItems(nextItems);\n    this.setCursors(nextStartCursor, nextEndCursor);\n    return isChange;\n  }\n  public getItems() {\n    return this.items;\n  }\n  public getVisibleItems() {\n    const startCursor = this.startCursor;\n    const endCursor = this.endCursor;\n\n    if (startCursor === -1) {\n      return [];\n    }\n    return this.items.slice(startCursor, endCursor + 1);\n  }\n  public getSize() {\n    return this.size;\n  }\n  public getItemByKey(key: string | number) {\n    return this.itemKeys[key];\n  }\n  public getItemPartByKey(partKey: string | number) {\n    let itemPart!: InfiniteItemPart;\n\n    this.items.forEach((item) => {\n      item.parts?.forEach((part) => {\n        if (part.key === partKey) {\n          itemPart = part;\n        }\n      });\n    });\n\n    return itemPart;\n  }\n  public getScrollSize() {\n    const items = this.items;\n    const length = items.length;\n\n    if (!length) {\n      return 0;\n    }\n    return Math.max(0, ...items[length - 1].endOutline);\n  }\n  public getVisibleArea(scrollPos: number, direction = this.options.defaultDirection) {\n    const isDirectionEnd = direction === DIRECTION.END;\n    const visibleItems = this.getRenderedVisibleItems();\n\n    if (!visibleItems.length) {\n      return null;\n    }\n    const visibleItem = visibleItems[isDirectionEnd ? 0 : length - 1];\n    const itemPos = isDirectionEnd\n      ? Math.min(...visibleItem.startOutline)\n      : Math.max(...visibleItem.endOutline);\n    let pos = itemPos;\n    let itemPart!: InfiniteItemPart;\n\n    if (isDirectionEnd) {\n      visibleItems.forEach((item) => {\n        item.parts?.forEach((part) => {\n          if (itemPart && itemPart.pos >= part.pos) {\n            return;\n          }\n          if (pos < part.pos && part.pos <= scrollPos) {\n            itemPart = part;\n            pos = part.pos;\n          }\n        });\n      });\n    } else {\n      visibleItems.forEach((item) => {\n        item.parts?.forEach((part) => {\n          const endPos = part.pos + part.size;\n\n          if (itemPart && itemPart.pos + itemPart.size <= endPos) {\n            return;\n          }\n\n          if (pos > endPos && endPos >= scrollPos) {\n            itemPart = part;\n            pos = endPos;\n          }\n        });\n      });\n    }\n\n    return {\n      item: visibleItem,\n      part: itemPart,\n    };\n  }\n  public getRenderedVisibleItems() {\n    const items = this.getVisibleItems();\n\n    const rendered = items.map(({ startOutline, endOutline }) => {\n      const length = startOutline.length;\n\n      if (length === 0 || length !== endOutline.length) {\n        return false;\n      }\n      return startOutline.some((pos, i) => endOutline[i] !== pos);\n    });\n    const startIndex = rendered.indexOf(true);\n    const endIndex = rendered.lastIndexOf(true);\n\n    return endIndex === -1 ? [] : items.slice(startIndex, endIndex + 1);\n  }\n  public destroy() {\n    this.off();\n    this.startCursor = -1;\n    this.endCursor = -1;\n    this.items = [];\n    this.size = 0;\n  }\n}\n", "import Component from \"@egjs/component\";\nimport { diff, DiffResult } from \"@egjs/list-differ\";\nimport { toArray } from \"../utils\";\n\nexport interface RendererItem {\n  key: string | number;\n  renderKey?: string;\n  element?: Element | null;\n}\n\nexport interface OnRendererUpdated<T extends RendererItem = RendererItem> {\n  items: T[];\n  elements: Element[];\n  isChanged: boolean;\n  isItemChanged: boolean;\n  state: Record<string, any>;\n  diffResult: DiffResult<T>;\n}\n\nexport interface OnRendererUpdate {\n  state: Record<string, any>;\n}\nexport interface RendererEvents<T extends RendererItem = RendererItem> {\n  update: OnRendererUpdate;\n  updated: OnRendererUpdated<T>;\n  requestUpdate: OnRendererUpdate;\n}\n\nexport class Renderer<Item extends RendererItem = RendererItem> extends Component<RendererEvents> {\n  protected items: Item[] = [];\n  protected container: Element | null = null;\n  protected rendererKey = 0;\n  private _diffResult: DiffResult<Item>;\n  private _updateTimer = 0;\n  private _state: Record<string, any> = {};\n  private _isItemChanged = false;\n\n  public updateKey() {\n    this.rendererKey = Date.now();\n  }\n\n  public getItems() {\n    return this.items;\n  }\n  public setContainer(container: Element) {\n    this.container = container;\n  }\n  public render(nextItems: Item[], state?: Record<string, any>) {\n    return this.syncItems(nextItems, state);\n  }\n  public update(state: Record<string, any> = {}) {\n    this._state = { ...this._state, ...state };\n    this.trigger(\"update\", {\n      state,\n    });\n\n    clearTimeout(this._updateTimer);\n    this._updateTimer = window.setTimeout(() => {\n      this.trigger(\"requestUpdate\", {\n        state,\n      });\n    });\n  }\n  public updated(nextElements: ArrayLike<Element> = this.container?.children ?? []) {\n    const diffResult = this._diffResult;\n    const isChanged = !!(diffResult.added.length || diffResult.removed.length || diffResult.changed.length);\n    const state = this._state;\n    const isItemChanged = this._isItemChanged;\n    const nextItems = diffResult.list;\n\n\n    this._isItemChanged = false;\n    this._state = {};\n    this.items = nextItems;\n    nextItems.forEach((item, i) => {\n      item.element = nextElements[i];\n    });\n\n\n    this.trigger(\"updated\", {\n      items: nextItems,\n      elements: toArray(nextElements),\n      diffResult: this._diffResult,\n      state,\n      isItemChanged,\n      isChanged,\n    });\n\n    return isChanged;\n  }\n  public syncItems(items: Item[], state: Record<string, any> = {}) {\n    const rendererKey = this.rendererKey;\n    const prevItems = this.items;\n    const nextItems = items.map((item) => ({\n      ...item,\n      renderKey: `${rendererKey}_${item.key}`,\n    }));\n    const result = diff(prevItems, nextItems, (item) => item.renderKey!);\n\n    this._isItemChanged = !!result.added.length || !!result.removed.length || !!result.changed.length;\n    this._state = { ...this._state, ...state };\n    this._diffResult = result;\n\n    return result;\n  }\n  public destroy() {\n    this.off();\n  }\n}\n", "import { Renderer, RendererItem } from \"./Renderer\";\n\nexport class VanillaRenderer<Item extends RendererItem = RendererItem> extends Renderer<Item> {\n  public render(nextItems: Item[], state?: Record<string, any>) {\n    const container = this.container!;\n    const result = super.render(nextItems, state);\n    const {\n      prevList,\n      removed,\n      ordered,\n      added,\n      list,\n    } = result;\n    const diffList = [...prevList];\n\n\n    removed.forEach((index) => {\n      diffList.splice(index, 1);\n      container.removeChild(prevList[index].element!);\n    });\n    ordered.forEach(([prevIndex, nextIndex]) => {\n      const item = diffList.splice(prevIndex, 1)[0];\n\n      diffList.splice(nextIndex, 0, item);\n      container.insertBefore(item.element!, diffList[nextIndex + 1]?.element ?? null);\n    });\n    added.forEach((index) => {\n      const item = list[index];\n\n      diffList.splice(index, 0, item);\n      container.insertBefore(item.element!, diffList[index + 1]?.element ?? null);\n    });\n\n    this.updated(container.children);\n    return result;\n  }\n}\n", "import { InfiniteGridItem } from \"../InfiniteGridItem\";\nimport { convertHTMLtoElement } from \"../utils\";\nimport { RendererItem } from \"./Renderer\";\nimport { VanillaRenderer } from \"./VanillaRenderer\";\n\nexport interface GridRendererItem extends RendererItem {\n  orgItem: InfiniteGridItem;\n}\n\nexport class VanillaGridRenderer extends VanillaRenderer<GridRendererItem> {\n  public syncItems(nextItems: GridRendererItem[]) {\n    const result = super.syncItems(nextItems);\n    const {\n      added,\n      list,\n    } = result;\n    added.forEach((index) => {\n      const orgItem = nextItems[index].orgItem;\n\n      if (orgItem.html && !orgItem.element) {\n        orgItem.element = convertHTMLtoElement(orgItem.html)[0];\n      }\n      list[index].element = orgItem.element!;\n    });\n\n    return result;\n  }\n}\n", "import { findTarget, Ref } from \"@cfcs/core\";\nimport Component, { ComponentEvent } from \"@egjs/component\";\nimport { CONTAINER_CLASS_NAME, IS_IOS } from \"./consts\";\nimport { OnChangeScroll } from \"./types\";\nimport { isWindow, toArray } from \"./utils\";\n\nexport interface ScrollManagerOptions {\n  scrollContainer?: HTMLElement | string | Ref<HTMLElement> | null;\n  container?: boolean | HTMLElement | string | Ref<HTMLElement>;\n  containerTag?: string;\n  horizontal?: boolean;\n}\n\nexport interface ScrollManagerStatus {\n  contentSize: number;\n  scrollOffset: number;\n  prevScrollPos: number;\n}\n\n\nexport interface ScrollManagerEvents {\n  scroll: OnChangeScroll;\n}\n\nexport class ScrollManager extends Component<ScrollManagerEvents> {\n  public options: Required<ScrollManagerOptions>;\n  protected prevScrollPos: number | null = null;\n  protected eventTarget: HTMLElement | Window;\n  protected scrollOffset = 0;\n  protected contentSize = 0;\n  protected container: HTMLElement;\n  protected scrollContainer: HTMLElement;\n  private _orgCSSText: string;\n  private _isScrollIssue = IS_IOS;\n  private _isCreateElement: boolean;\n\n  constructor(\n    protected wrapper: HTMLElement,\n    options: ScrollManagerOptions,\n  ) {\n    super();\n    this.options = {\n      container: false,\n      containerTag: \"div\",\n      horizontal: false,\n      scrollContainer: null,\n      ...options,\n    };\n\n    this._init();\n  }\n  public getWrapper() {\n    return this.wrapper;\n  }\n  public getContainer() {\n    return this.container;\n  }\n  public getScrollContainer() {\n    return this.scrollContainer;\n  }\n  public getScrollOffset() {\n    return this.scrollOffset;\n  }\n  public getContentSize() {\n    return this.contentSize;\n  }\n  public getRelativeScrollPos() {\n    return (this.prevScrollPos || 0) - this.scrollOffset;\n  }\n  public getScrollPos() {\n    return this.prevScrollPos;\n  }\n  public setScrollPos(pos: number) {\n    this.prevScrollPos = pos;\n  }\n  public getOrgScrollPos() {\n    const eventTarget = this.eventTarget;\n    const horizontal = this.options.horizontal;\n\n    const prop = `scroll${horizontal ? \"Left\" : \"Top\"}` as \"scrollLeft\" | \"scrollTop\";\n\n    if (isWindow(eventTarget)) {\n      return window[horizontal ? \"pageXOffset\" : \"pageYOffset\"]\n        || document.documentElement[prop] || document.body[prop];\n    } else {\n      return eventTarget[prop];\n    }\n  }\n  public setStatus(status: ScrollManagerStatus) {\n    this.contentSize = status.contentSize;\n    this.scrollOffset = status.scrollOffset;\n    this.prevScrollPos = status.prevScrollPos;\n\n    this.scrollTo(this.prevScrollPos);\n  }\n  public getStatus(): ScrollManagerStatus {\n    return {\n      contentSize: this.contentSize,\n      scrollOffset: this.scrollOffset,\n      prevScrollPos: this.prevScrollPos!,\n    };\n  }\n  public scrollTo(pos: number) {\n    const eventTarget = this.eventTarget;\n    const horizontal = this.options.horizontal;\n    const [x, y] = horizontal ? [pos, 0] : [0, pos];\n\n    if (isWindow(eventTarget)) {\n      eventTarget.scroll(x, y);\n    } else {\n      eventTarget.scrollLeft = x;\n      eventTarget.scrollTop = y;\n    }\n  }\n  public scrollBy(pos: number) {\n    if (!pos) {\n      return;\n    }\n    const eventTarget = this.eventTarget;\n    const horizontal = this.options.horizontal;\n    const [x, y] = horizontal ? [pos, 0] : [0, pos];\n\n\n    this.prevScrollPos! += pos;\n\n    if (isWindow(eventTarget)) {\n      eventTarget.scrollBy(x, y);\n    } else {\n      eventTarget.scrollLeft += x;\n      eventTarget.scrollTop += y;\n    }\n  }\n  public resize() {\n    const scrollContainer = this.scrollContainer;\n    const horizontal = this.options.horizontal;\n    const isBody = scrollContainer === document.body;\n    const scrollContainerRect = isBody\n      ? { top: 0, left: 0 }\n      : scrollContainer.getBoundingClientRect();\n    const containerRect = this.container.getBoundingClientRect();\n\n    this.scrollOffset = (this.getOrgScrollPos()! || 0) + (horizontal\n      ? containerRect.left - scrollContainerRect.left\n      : containerRect.top - scrollContainerRect.top);\n\n    if (isBody) {\n      this.contentSize = horizontal ? window.innerWidth : window.innerHeight;\n    } else {\n      this.contentSize = horizontal ? scrollContainer.offsetWidth : scrollContainer.offsetHeight;\n    }\n  }\n  public destroy() {\n    const container = this.container;\n\n    this.eventTarget.removeEventListener(\"scroll\", this._onCheck);\n\n    if (this._isCreateElement) {\n      const scrollContainer = this.scrollContainer;\n\n      const fragment = document.createDocumentFragment();\n      const childNodes = toArray(container.childNodes);\n\n      scrollContainer.removeChild(container);\n      childNodes.forEach((childNode) => {\n        fragment.appendChild(childNode);\n      });\n      scrollContainer.appendChild(fragment);\n    } else if (this.options.container) {\n      container.style.cssText = this._orgCSSText;\n    }\n  }\n  private _init() {\n    const {\n      container: containerOption,\n      containerTag,\n      horizontal,\n      scrollContainer: scrollContainerOption,\n    } = this.options;\n    const wrapper = this.wrapper;\n    let scrollContainer = wrapper;\n    let container = wrapper;\n    let containerCSSText = \"\";\n\n    if (!containerOption) {\n      scrollContainer = findTarget(scrollContainerOption) || document.body;\n      containerCSSText = container.style.cssText;\n    } else {\n      if (containerOption === true) {\n        // Create Container\n        container = document.createElement(containerTag) as HTMLElement;\n\n        container.style.position = \"relative\";\n        container.className = CONTAINER_CLASS_NAME;\n        const childNodes = toArray(scrollContainer.childNodes);\n\n        childNodes.forEach((childNode) => {\n          container.appendChild(childNode);\n        });\n        scrollContainer.appendChild(container);\n\n        this._isCreateElement = true;\n      } else {\n        // Find Container\n        container = findTarget(containerOption)!;\n      }\n      containerCSSText = container.style.cssText;\n\n      const style = scrollContainer.style;\n\n      [style.overflowX, style.overflowY] = horizontal ? [\"scroll\", \"hidden\"] : [\"hidden\", \"scroll\"];\n\n      if (horizontal) {\n        container.style.height = \"100%\";\n      }\n    }\n    const eventTarget = scrollContainer === document.body ? window : scrollContainer;\n\n    eventTarget.addEventListener(\"scroll\", this._onCheck);\n    this._orgCSSText = containerCSSText;\n    this.container = container;\n    this.scrollContainer = scrollContainer;\n    this.eventTarget = eventTarget;\n    this.resize();\n    this.setScrollPos(this.getOrgScrollPos());\n  }\n  private _onCheck = () => {\n    const prevScrollPos = this.getScrollPos();\n    const nextScrollPos = this.getOrgScrollPos();\n\n    this.setScrollPos(nextScrollPos);\n\n    if (prevScrollPos === null || (this._isScrollIssue && nextScrollPos === 0) || prevScrollPos === nextScrollPos) {\n      nextScrollPos && (this._isScrollIssue = false);\n      return;\n    }\n    this._isScrollIssue = false;\n    this.trigger(new ComponentEvent(\"scroll\", {\n      direction: prevScrollPos < nextScrollPos ? \"end\" : \"start\",\n      scrollPos: nextScrollPos,\n      relativeScrollPos: this.getRelativeScrollPos(),\n    }));\n  }\n}\n", "import Component, { ComponentEvent } from \"@egjs/component\";\nimport Grid, {\n  ContainerManager,\n  DEFAULT_GRID_OPTIONS,\n  Properties,\n  RenderOptions,\n  MOUNT_STATE,\n  OnContentError,\n  ItemRenderer,\n  GridItem,\n  ResizeWatcherResizeEvent,\n  getUpdatedItems,\n} from \"@egjs/grid\";\nimport {\n  DIRECTION,\n  GROUP_TYPE,\n  INFINITEGRID_EVENTS, INFINITEGRID_PROPERTY_TYPES,\n  INVISIBLE_POS,\n  ITEM_TYPE, STATUS_TYPE,\n} from \"./consts\";\nimport { GroupManager } from \"./GroupManager\";\nimport {\n  Infinite,\n  InfiniteItem,\n  InfiniteItemPart,\n  OnInfiniteChange,\n  OnInfiniteRequestAppend,\n  OnInfiniteRequestPrepend,\n} from \"./Infinite\";\nimport { InfiniteGridItem, InfiniteGridItemStatus } from \"./InfiniteGridItem\";\nimport { OnRendererUpdated } from \"./Renderer/Renderer\";\nimport { GridRendererItem, VanillaGridRenderer } from \"./Renderer/VanillaGridRenderer\";\nimport { ScrollManager } from \"./ScrollManager\";\nimport {\n  InfiniteGridEvents, InfiniteGridGroup,\n  InfiniteGridInsertedItems, InfiniteGridItemInfo,\n  InfiniteGridOptions,\n  InfiniteGridStatus,\n  InsertedPlaceholdersResult,\n  OnPickedRenderComplete,\n  OnRequestInsert,\n  OnChangeScroll,\n} from \"./types\";\nimport {\n  InfiniteGridGetterSetter, toArray, convertInsertedItems, findIndex,\n  findLastIndex, isString,\n} from \"./utils\";\n\n\n/**\n * A module used to arrange items including content infinitely according to layout type. With this module, you can implement various layouts composed of different items whose sizes vary. It guarantees performance by maintaining the number of DOMs the module is handling under any circumstance\n * @ko 콘텐츠가 있는 아이템을 레이아웃 타입에 따라 무한으로 배치하는 모듈. 다양한 크기의 아이템을 다양한 레이아웃으로 배치할 수 있다. 아이템의 개수가 계속 늘어나도 모듈이 처리하는 DOM의 개수를 일정하게 유지해 최적의 성능을 보장한다\n * @extends Component\n * @support {\"ie\": \"9+(with polyfill)\", \"ch\" : \"latest\", \"ff\" : \"latest\",  \"sf\" : \"latest\", \"edge\" : \"latest\", \"ios\" : \"7+\", \"an\" : \"4.X+\"}\n * @example\n```html\n<ul id=\"grid\">\n  <li class=\"card\">\n    <div>test1</div>\n  </li>\n  <li class=\"card\">\n    <div>test2</div>\n  </li>\n  <li class=\"card\">\n    <div>test3</div>\n  </li>\n  <li class=\"card\">\n    <div>test4</div>\n  </li>\n  <li class=\"card\">\n    <div>test5</div>\n  </li>\n  <li class=\"card\">\n    <div>test6</div>\n  </li>\n</ul>\n<script>\nimport { MasonryInfiniteGrid } from \"@egjs/infinitegrid\";\nvar some = new MasonryInfiniteGrid(\"#grid\").on(\"renderComplete\", function(e) {\n  // ...\n});\n// If you already have items in the container, call \"layout\" method.\nsome.renderItems();\n</script>\n```\n */\n@InfiniteGridGetterSetter\nclass InfiniteGrid<Options extends InfiniteGridOptions = InfiniteGridOptions> extends Component<InfiniteGridEvents> {\n  public static defaultOptions = {\n    ...DEFAULT_GRID_OPTIONS,\n    container: false,\n    containerTag: \"div\",\n    renderer: null,\n    threshold: 100,\n    useRecycle: true,\n    scrollContainer: null,\n    appliedItemChecker: (() => false) as (item: InfiniteGridItem, grid: Grid) => boolean,\n  } as Required<InfiniteGridOptions>;\n  public static propertyTypes = INFINITEGRID_PROPERTY_TYPES;\n  protected wrapperElement: HTMLElement;\n  protected scrollManager: ScrollManager;\n  protected itemRenderer: ItemRenderer;\n  protected containerManager: ContainerManager;\n  protected infinite: Infinite;\n  protected groupManager: GroupManager;\n  protected options: Required<Options>;\n  private _waitType: \"\" | \"start\" | \"end\" = \"\";\n  /**\n   * @param - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n   * @param - The option object of the InfiniteGrid module <ko>eg.InfiniteGrid 모듈의 옵션 객체</ko>\n   */\n  constructor(wrapper: HTMLElement | string, options: Options) {\n    super();\n    this.options = {\n      ...((this.constructor as typeof InfiniteGrid).defaultOptions as Required<Options>),\n      renderer: new VanillaGridRenderer().on(\"requestUpdate\", () => this._render()),\n      ...options,\n    };\n\n    const {\n      gridConstructor,\n      containerTag,\n      container,\n      renderer,\n      threshold,\n      useRecycle,\n      scrollContainer,\n      appliedItemChecker,\n      ...gridOptions\n    } = this.options;\n    // options.container === false, wrapper = container, scrollContainer = document.body\n    // options.container === true, wrapper = scrollContainer, container = wrapper's child\n    // options.container === string,\n    const {\n      horizontal,\n      attributePrefix,\n      useTransform,\n      percentage,\n      isConstantSize,\n      isEqualSize,\n      autoResize,\n      useResizeObserver,\n      resizeDebounce,\n      maxResizeDebounce,\n      defaultDirection,\n      useRoundedSize,\n    } = gridOptions;\n    const wrapperElement = isString(wrapper) ? document.querySelector(wrapper) as HTMLElement : wrapper;\n    const scrollManager = new ScrollManager(wrapperElement, {\n      scrollContainer,\n      container,\n      containerTag,\n      horizontal,\n    }).on({\n      scroll: this._onScroll,\n    });\n    const containerElement = scrollManager.getContainer();\n    const containerManager = new ContainerManager(containerElement, {\n      horizontal,\n      autoResize,\n      resizeDebounce,\n      maxResizeDebounce,\n      useResizeObserver,\n    }).on(\"resize\", this._onResize);\n    const itemRenderer = new ItemRenderer({\n      attributePrefix,\n      horizontal,\n      useTransform,\n      percentage,\n      isEqualSize,\n      isConstantSize,\n      useRoundedSize,\n    });\n    const infinite = new Infinite({\n      defaultDirection,\n      useRecycle,\n      threshold,\n    }).on({\n      \"change\": this._onChange,\n      \"requestAppend\": this._onRequestAppend,\n      \"requestPrepend\": this._onRequestPrepend,\n    });\n\n    infinite.setSize(scrollManager.getContentSize());\n    const groupManager = new GroupManager(containerElement, {\n      appliedItemChecker: appliedItemChecker!,\n      gridConstructor: gridConstructor!,\n      externalItemRenderer: itemRenderer,\n      externalContainerManager: containerManager,\n      gridOptions,\n    });\n\n    groupManager.on({\n      \"renderComplete\": this._onRenderComplete,\n      \"contentError\": this._onContentError,\n    });\n\n    renderer!.setContainer(containerElement);\n    renderer!.on(\"updated\", this._onRendererUpdated);\n\n    this.itemRenderer = itemRenderer;\n    this.groupManager = groupManager;\n    this.wrapperElement = wrapperElement;\n    this.scrollManager = scrollManager;\n    this.containerManager = containerManager;\n    this.infinite = infinite;\n\n    this.containerManager.resize();\n  }\n  /**\n   * Rearrange items to fit the grid and render them. When rearrange is complete, the `renderComplete` event is fired.\n   * @ko grid에 맞게 아이템을 재배치하고 렌더링을 한다. 배치가 완료되면 `renderComplete` 이벤트가 발생한다.\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   * @example\n   * ```ts\n   * import { MasonryInfiniteGrid } from \"@egjs/infinitegrid\";\n   * const grid = new MasonryInfiniteGrid();\n   *\n   * grid.on(\"renderComplete\", e => {\n   *   console.log(e);\n   * });\n   * grid.renderItems();\n   * ```\n   */\n  public renderItems(options: RenderOptions = {}) {\n    this._renderItems(options);\n    return this;\n  }\n  /**\n   * Returns the wrapper element specified by the user.\n   * @ko 컨테이너 엘리먼트를 반환한다.\n   */\n  public getWrapperElement() {\n    return this.scrollManager.getWrapper();\n  }\n  /**\n   * Returns the container element corresponding to the scroll area.\n   * @ko 스크롤 영역에 해당하는 컨테이너 엘리먼트를 반환한다.\n   */\n  public getScrollContainerElement() {\n    return this.scrollManager.getScrollContainer();\n  }\n  /**\n   * Returns the container element containing item elements.\n   * @ko 아이템 엘리먼트들을 담긴 컨테이너 엘리먼트를 반환한다.\n   */\n  public getContainerElement() {\n    return this.scrollManager.getContainer();\n  }\n  /**\n   * When items change, it synchronizes and renders items.\n   * @ko items가 바뀐 경우 동기화를 하고 렌더링을 한다.\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public syncItems(items: InfiniteGridItemInfo[]): this {\n    this.groupManager.syncItems(items);\n    this._syncGroups();\n\n    return this;\n  }\n  /**\n   * Change the currently visible groups.\n   * @ko 현재 보이는 그룹들을 바꾼다.\n   * @param - first index of visible groups. <ko>보이는 그룹의 첫번째 index.</ko>\n   * @param - last index of visible groups. <ko>보이는 그룹의 마지막 index.</ko>\n   * @param - Whether the first rendering has already been done. <ko>첫 렌더링이 이미 되어있는지 여부.</ko>\n   */\n  public setCursors(startCursor: number, endCursor: number, useFirstRender?: boolean): this {\n    this.groupManager.setCursors(startCursor, endCursor);\n    this.infinite.setCursors(startCursor, endCursor);\n\n    if (useFirstRender) {\n      this.getVisibleItems().forEach((item) => {\n        if (item.cssRect.top === INVISIBLE_POS) {\n          item.cssRect = {};\n        }\n      });\n      this._syncItems();\n    } else {\n      this._update();\n      this._checkEndLoading();\n    }\n    return this;\n  }\n  /**\n   * Returns the first index of visible groups.\n   * @ko 보이는 그룹들의 첫번째 index를 반환한다.\n   */\n  public getStartCursor(): number {\n    return this.infinite.getStartCursor();\n  }\n  /**\n   * Returns the last index of visible groups.\n   * @ko 보이는 그룹들의 마지막 index를 반환한다.\n   */\n  public getEndCursor(): number {\n    return this.infinite.getEndCursor();\n  }\n  /**\n   * Add items at the bottom(right) of the grid.\n   * @ko 아이템들을 grid 아래(오른쪽)에 추가한다.\n   * @param - items to be added <ko>추가할 아이템들</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   * @return - An instance of a module itself<ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```js\n   * ig.append(`<div class=\"item\">test1</div><div class=\"item\">test2</div>`);\n   * ig.append([`<div class=\"item\">test1</div>`, `<div class=\"item\">test2</div>`]);\n   * ig.append([HTMLElement1, HTMLElement2]);\n   * ```\n   */\n  public append(items: InfiniteGridInsertedItems, groupKey?: string | number): this {\n    return this.insert(-1, items, groupKey);\n  }\n  /**\n   * Add items at the top(left) of the grid.\n   * @ko 아이템들을 grid 위(왼쪽)에 추가한다.\n   * @param - items to be added <ko>추가할 아이템들</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   * @return - An instance of a module itself<ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * ig.prepend(`<div class=\"item\">test1</div><div class=\"item\">test2</div>`);\n   * ig.prepend([`<div class=\"item\">test1</div>`, `<div class=\"item\">test2</div>`]);\n   * ig.prepend([HTMLElement1, HTMLElement2]);\n   * ```\n   */\n  public prepend(items: InfiniteGridInsertedItems, groupKey?: string | number): this {\n    return this.insert(0, items, groupKey);\n  }\n  /**\n   * Add items to a specific index.\n   * @ko 아이템들을 특정 index에 추가한다.\n   * @param - index to add <ko>추가하기 위한 index</ko>\n   * @param - items to be added <ko>추가할 아이템들</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   * @return - An instance of a module itself<ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * ig.insert(2, `<div class=\"item\">test1</div><div class=\"item\">test2</div>`);\n   * ig.insert(3, [`<div class=\"item\">test1</div>`, `<div class=\"item\">test2</div>`]);\n   * ig.insert(4, [HTMLElement1, HTMLElement2]);\n   * ```\n   */\n  public insert(index: number, items: InfiniteGridInsertedItems, groupKey?: string | number): this {\n    const nextItemInfos: InfiniteGridItemInfo[] = this.groupManager.getGroupItems();\n    const itemInfos = convertInsertedItems(items, groupKey);\n\n    if (index === -1) {\n      nextItemInfos.push(...itemInfos);\n    } else {\n      nextItemInfos.splice(index, 0, ...itemInfos);\n    }\n    return this.syncItems(nextItemInfos);\n  }\n  /**\n   * Add items based on group index.\n   * @ko group의 index 기준으로 item들을 추가한다.\n   * @param - group index to add <ko>추가하기 위한 group의 index</ko>\n   * @param - items to be added <ko>추가할 아이템들</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   * @return - An instance of a module itself<ko>모듈 자신의 인스턴스</ko>\n   * @example\n   * ```ts\n   * ig.insertByGroupIndex(2, `<div class=\"item\">test1</div><div class=\"item\">test2</div>`);\n   * ig.insertByGroupIndex(3, [`<div class=\"item\">test1</div>`, `<div class=\"item\">test2</div>`]);\n   * ig.insertByGroupIndex(4, [HTMLElement1, HTMLElement2]);\n   * ```\n   */\n  public insertByGroupIndex(groupIndex: number, items: InfiniteGridInsertedItems, groupKey?: string | number): this {\n    const nextGroupInfos: InfiniteGridGroup[] = this.groupManager.getGroups();\n    const rightGroup = nextGroupInfos[groupIndex];\n\n    if (!rightGroup) {\n      return this.append(items, groupKey);\n    }\n    const nextItemInfos: InfiniteGridItemInfo[] = this.groupManager.getGroupItems();\n    const rightGroupKey = rightGroup.groupKey;\n    const rightItemIndex = findIndex(nextItemInfos, (item) => item.groupKey === rightGroupKey);\n\n    return this.insert(rightItemIndex, items, groupKey);\n  }\n  /**\n   * Returns the current state of a module such as location information. You can use the setStatus() method to restore the information returned through a call to this method.\n   * @ko 아이템의 위치 정보 등 모듈의 현재 상태 정보를 반환한다. 이 메서드가 반환한 정보를 저장해 두었다가 setStatus() 메서드로 복원할 수 있다\n   * @param - STATUS_TYPE.NOT_REMOVE = Get all information about items. STATUS_TYPE.REMOVE_INVISIBLE_ITEMS = Get information on visible items only. STATUS_TYPE.MINIMIZE_INVISIBLE_ITEMS = Compress invisible items. You can replace it with a placeholder. STATUS_TYPE.MINIMIZE_INVISIBLE_GROUPS = Compress invisible groups. <ko> STATUS_TYPE.NOT_REMOVE = 모든 아이템들의 정보를 가져온다. STATUS_TYPE.REMOVE_INVISIBLE_ITEMS = 보이는 아이템들의 정보만 가져온다. STATUS_TYPE.MINIMIZE_INVISIBLE_ITEMS = 안보이는 아이템들을 압축한다. placeholder로 대체가 가능하다. STATUS_TYPE.MINIMIZE_INVISIBLE_GROUPS = 안보이는 그룹을 압축한다.</ko>\n   * @param - Whether to include items corresponding to placeholders. <ko>placeholder에 해당하는 아이템들을 포함할지 여부.</ko>\n   */\n  public getStatus(type?: STATUS_TYPE, includePlaceholders?: boolean): InfiniteGridStatus {\n    return {\n      containerManager: this.containerManager.getStatus(),\n      itemRenderer: this.itemRenderer.getStatus(),\n      groupManager: this.groupManager.getGroupStatus(type, includePlaceholders),\n      scrollManager: this.scrollManager.getStatus(),\n    };\n  }\n\n  /**\n   * You can set placeholders to restore status or wait for items to be added.\n   * @ko status 복구 또는 아이템 추가 대기를 위한 placeholder를 설정할 수 있다.\n   * @param - The placeholder status. <ko>placeholder의 status</ko>\n   */\n  public setPlaceholder(info: Partial<InfiniteGridItemStatus> | null): this {\n    this.groupManager.setPlaceholder(info);\n    return this;\n  }\n  /**\n   * You can set placeholders to restore status or wait for items to be added.\n   * @ko status 복구 또는 아이템 추가 대기를 위한 placeholder를 설정할 수 있다.\n   * @param - The placeholder status. <ko>placeholder의 status</ko>\n   */\n  public setLoading(info: Partial<InfiniteGridItemStatus> | null): this {\n    this.groupManager.setLoading(info);\n    return this;\n  }\n  /**\n   * Add the placeholder at the end.\n   * @ko placeholder들을 마지막에 추가한다.\n   * @param - Items that correspond to placeholders. If it is a number, it duplicates the number of copies. <ko>placeholder에 해당하는 아이템들. 숫자면 갯수만큼 복제를 한다.</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   */\n  public appendPlaceholders(\n    items: number | InfiniteGridItemStatus[],\n    groupKey?: string | number,\n  ): InsertedPlaceholdersResult {\n    const result = this.groupManager.appendPlaceholders(items, groupKey);\n\n    this._syncGroups(true);\n    return {\n      ...result,\n      remove: () => {\n        this.removePlaceholders({ groupKey: result.group.groupKey });\n      },\n    };\n  }\n  /**\n   * Add the placeholder at the start.\n   * @ko placeholder들을 처음에 추가한다.\n   * @param - Items that correspond to placeholders. If it is a number, it duplicates the number of copies. <ko>placeholder에 해당하는 아이템들. 숫자면 갯수만큼 복제를 한다.</ko>\n   * @param - The group key to be configured in items. It is automatically generated by default. <ko>추가할 아이템에 설정할 그룹 키. 생략하면 값이 자동으로 생성된다.</ko>\n   */\n  public prependPlaceholders(\n    items: number | InfiniteGridItemStatus[],\n    groupKey?: string | number,\n  ): InsertedPlaceholdersResult {\n    const result = this.groupManager.prependPlaceholders(items, groupKey);\n\n    this._syncGroups(true);\n    return {\n      ...result,\n      remove: () => {\n        this.removePlaceholders({ groupKey: result.group.groupKey });\n      },\n    };\n  }\n\n  /**\n   * Remove placeholders\n   * @ko placeholder들을 삭제한다.\n   * @param type - Remove the placeholders corresponding to the groupkey. When \"start\" or \"end\", remove all placeholders in that direction. <ko>groupkey에 해당하는 placeholder들을 삭제한다. \"start\" 또는 \"end\" 일 때 해당 방향의 모든 placeholder들을 삭제한다.</ko>\n   */\n  public removePlaceholders(type: \"start\" | \"end\" | { groupKey: string | number }) {\n    this.groupManager.removePlaceholders(type);\n    this._syncGroups(true);\n  }\n\n  /**\n   * Sets the status of the InfiniteGrid module with the information returned through a call to the getStatus() method.\n   * @ko getStatus() 메서드가 저장한 정보로 InfiniteGrid 모듈의 상태를 설정한다.\n   * @param - status object of the InfiniteGrid module. <ko>InfiniteGrid 모듈의 status 객체.</ko>\n   * @param - Whether the first rendering has already been done. <ko>첫 렌더링이 이미 되어있는지 여부.</ko>\n   */\n  public setStatus(status: InfiniteGridStatus, useFirstRender?: boolean): this {\n    this.itemRenderer.setStatus(status.itemRenderer);\n    this.containerManager.setStatus(status.containerManager);\n    this.scrollManager.setStatus(status.scrollManager);\n    const groupManager = this.groupManager;\n    const prevInlineSize = this.containerManager.getInlineSize();\n\n    groupManager.setGroupStatus(status.groupManager);\n    this._syncInfinite();\n    this.infinite.setCursors(groupManager.getStartCursor(), groupManager.getEndCursor());\n\n    this._getRenderer().updateKey();\n\n    const state = {\n      isResize: this.containerManager.getInlineSize() !== prevInlineSize,\n      isRestore: true,\n    };\n    if (useFirstRender) {\n      this._syncItems(state);\n    } else {\n      this._update(state);\n    }\n    return this;\n  }\n  /**\n   * Removes the group corresponding to index.\n   * @ko index에 해당하는 그룹을 제거 한다.\n   */\n  public removeGroupByIndex(index: number): this {\n    const nextGroups = this.getGroups();\n\n    return this.removeGroupByKey(nextGroups[index].groupKey);\n  }\n  /**\n   * Removes the group corresponding to key.\n   * @ko key에 해당하는 그룹을 제거 한다.\n   */\n  public removeGroupByKey(key: number | string): this {\n    const nextItemInfos = this.getItems();\n\n    const firstIndex = findIndex(nextItemInfos, (item) => item.groupKey === key);\n    const lastIndex = findLastIndex(nextItemInfos, (item) => item.groupKey === key);\n\n    if (firstIndex === -1) {\n      return this;\n    }\n    nextItemInfos.splice(firstIndex, lastIndex - firstIndex + 1);\n    return this.syncItems(nextItemInfos);\n  }\n  /**\n   * Removes the item corresponding to index.\n   * @ko index에 해당하는 아이템을 제거 한다.\n   */\n  public removeByIndex(index: number): this {\n    const nextItemInfos = this.getItems(true);\n\n    nextItemInfos.splice(index, 1);\n\n    return this.syncItems(nextItemInfos);\n  }\n  /**\n   * Removes the item corresponding to key.\n   * @ko key에 해당하는 아이템을 제거 한다.\n   */\n  public removeByKey(key: string | number): this {\n    const nextItemInfos = this.getItems(true);\n    const index = findIndex(nextItemInfos, (item) => item.key === key);\n\n    return this.removeByIndex(index);\n  }\n  /**\n   * Update the size of the items and render them.\n   * @ko 아이템들의 사이즈를 업데이트하고 렌더링을 한다.\n   * @param - Items to be updated. <ko>업데이트할 아이템들.</ko>\n   * @param - Options for rendering. <ko>렌더링을 하기 위한 옵션.</ko>\n   */\n  public updateItems(items?: InfiniteGridItem[], options: RenderOptions = {}) {\n    this.groupManager.updateItems(items, options);\n    return this;\n  }\n  /**\n   * Return all items of InfiniteGrid.\n   * @ko InfiniteGrid의 모든 아이템들을 반환한다.\n   * @param - Whether to include items corresponding to placeholders. <ko>placeholder에 해당하는 아이템들을 포함할지 여부.</ko>\n   */\n  public getItems(includePlaceholders?: boolean): InfiniteGridItem[] {\n    return this.groupManager.getGroupItems(includePlaceholders);\n  }\n  /**\n   * Return visible items of InfiniteGrid.\n   * @ko InfiniteGrid의 보이는 아이템들을 반환한다.\n   * @param - Whether to include items corresponding to placeholders. <ko>placeholder에 해당하는 아이템들을 포함할지 여부.</ko>\n   */\n  public getVisibleItems(includePlaceholders?: boolean): InfiniteGridItem[] {\n    return this.groupManager.getVisibleItems(includePlaceholders);\n  }\n\n  /**\n   * Return rendering items of InfiniteGrid.\n   * @ko InfiniteGrid의 렌더링 아이템들을 반환한다.\n   */\n  public getRenderingItems(): InfiniteGridItem[] {\n    return this.groupManager.getRenderingItems();\n  }\n  /**\n   * Return all groups of InfiniteGrid.\n   * @ko InfiniteGrid의 모든 그룹들을 반환한다.\n   * @param - Whether to include groups corresponding to placeholders. <ko>placeholder에 해당하는 그룹들을 포함할지 여부.</ko>\n   */\n  public getGroups(includePlaceholders?: boolean): InfiniteGridGroup[] {\n    return this.groupManager.getGroups(includePlaceholders);\n  }\n  /**\n   * Return visible groups of InfiniteGrid.\n   * @ko InfiniteGrid의 보이는 그룹들을 반환한다.\n   * @param - Whether to include groups corresponding to placeholders. <ko>placeholder에 해당하는 그룹들을 포함할지 여부.</ko>\n   */\n  public getVisibleGroups(includePlaceholders?: boolean): InfiniteGridGroup[] {\n    return this.groupManager.getVisibleGroups(includePlaceholders);\n  }\n  /**\n   * Set to wait to request data.\n   * @ko 데이터를 요청하기 위해 대기 상태로 설정한다.\n   * @param direction - direction in which data will be added. <ko>데이터를 추가하기 위한 방향.</ko>\n   */\n  public wait(direction: \"start\" | \"end\" = DIRECTION.END) {\n    this._waitType = direction;\n    this._checkStartLoading(direction);\n  }\n  /**\n   * When the data request is complete, it is set to ready state.\n   * @ko 데이터 요청이 끝났다면 준비 상태로 설정한다.\n   * @param - <ko>데이터가 존재하지 않으면 loading bar를 즉시 제거 한다.</ko>\n   */\n  public ready(hasNoData?: boolean) {\n    this._waitType = \"\";\n\n    if (hasNoData) {\n      this.groupManager.waitEndLoading();\n\n      if (this.groupManager.endLoading()) {\n        this._update();\n      }\n    }\n  }\n  /**\n   * Returns whether it is set to wait to request data.\n   * @ko 데이터를 요청하기 위해 대기 상태로 설정되어 있는지 여부를 반환한다.\n   */\n  public isWait() {\n    return !!this._waitType;\n  }\n  /**\n   * Releases the instnace and events and returns the CSS of the container and elements.\n   * @ko 인스턴스와 이벤트를 해제하고 컨테이너와 엘리먼트들의 CSS를 되돌린다.\n   */\n  public destroy(): void {\n    this.off();\n    this._getRenderer().destroy();\n    this.containerManager.destroy();\n    this.groupManager.destroy();\n    this.scrollManager.destroy();\n    this.infinite.destroy();\n  }\n\n  private _getRenderer() {\n    return this.options.renderer!;\n  }\n  private _getRendererItems() {\n    return this.getRenderingItems().map((item) => {\n      return {\n        element: item.element,\n        key: `${item.type}_${item.key}`,\n        orgItem: item,\n      };\n    });\n  }\n  private _syncItems(state?: Record<string, any>): void {\n    this._getRenderer().syncItems(this._getRendererItems(), state);\n  }\n  private _render(state?: Record<string, any>): void {\n    this._getRenderer().render(this._getRendererItems(), state);\n  }\n  private _update(state: Record<string, any> = {}): void {\n    this._getRenderer().update(state);\n  }\n  private _resizeScroll() {\n    const scrollManager = this.scrollManager;\n\n    scrollManager.resize();\n\n    this.infinite.setSize(scrollManager.getContentSize());\n  }\n  private _syncGroups(isUpdate?: boolean) {\n    const infinite = this.infinite;\n    const scrollManager = this.scrollManager;\n\n    if (!scrollManager.getContentSize()) {\n      this._resizeScroll();\n    }\n    this._syncInfinite();\n    this.groupManager.setCursors(infinite.getStartCursor(), infinite.getEndCursor());\n    if (isUpdate) {\n      this._update();\n    } else {\n      this._render();\n    }\n  }\n  private _syncInfinite() {\n    this.infinite.syncItems(this.getGroups(true).map(({ groupKey, grid, type }) => {\n      const outlines = grid.getOutlines();\n\n      return {\n        key: groupKey,\n        isVirtual: type === GROUP_TYPE.VIRTUAL,\n        startOutline: outlines.start,\n        endOutline: outlines.end,\n        parts: grid.getItems().map((item) => {\n          return {\n            key: item.key,\n            pos: item.computedContentPos,\n            size: item.computedContentSize,\n          };\n        }),\n      };\n    }));\n  }\n  private _scroll() {\n    this.infinite.scroll(this.scrollManager.getRelativeScrollPos());\n  }\n  private _onScroll = ({ direction, scrollPos, relativeScrollPos }: OnChangeScroll): void => {\n    this._scroll();\n    /**\n     * This event is fired when scrolling.\n     * @ko 스크롤하면 발생하는 이벤트이다.\n     * @event InfiniteGrid#changeScroll\n     * @param {InfiniteGrid.OnChangeScroll} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     */\n    this.trigger(new ComponentEvent(INFINITEGRID_EVENTS.CHANGE_SCROLL, {\n      direction,\n      scrollPos,\n      relativeScrollPos,\n    }));\n  }\n\n  private _onChange = (e: OnInfiniteChange): void => {\n    this.setCursors(e.nextStartCursor, e.nextEndCursor);\n  }\n  private _onRendererUpdated = (e: OnRendererUpdated<GridRendererItem>): void => {\n    const renderedItems = e.items;\n\n    renderedItems.forEach((item) => {\n      // set grid element\n      const gridItem = item.orgItem;\n\n      gridItem.element = item.element as HTMLElement;\n    });\n\n    if (!e.isChanged) {\n      this._checkEndLoading();\n      this._scroll();\n      return;\n    }\n\n    const {\n      added,\n      removed,\n      prevList,\n      list,\n    } = e.diffResult;\n\n    removed.forEach((index) => {\n      const orgItem = prevList[index].orgItem;\n\n      if (orgItem.mountState !== MOUNT_STATE.UNCHECKED) {\n        orgItem.mountState = MOUNT_STATE.UNMOUNTED;\n      }\n    });\n\n\n    const horizontal = this.options.horizontal;\n    const addedItems = added.map((index) => {\n      const gridItem = list[index].orgItem;\n      const element = gridItem.element!;\n\n      if (gridItem.type === ITEM_TYPE.VIRTUAL) {\n        const cssRect = { ...gridItem.cssRect };\n        const rect = gridItem.rect;\n\n        if (!cssRect.width && rect.width) {\n          cssRect.width = rect.width;\n        }\n        if (!cssRect.height && rect.height) {\n          cssRect.height = rect.height;\n        }\n        // virtual item\n        return new GridItem(horizontal!, {\n          element,\n          cssRect,\n        });\n      }\n      return gridItem;\n    });\n\n    const containerManager = this.containerManager;\n    if (this.options.observeChildren) {\n      containerManager.unobserveChildren(removed.map((index) => prevList[index].element!));\n      containerManager.observeChildren(added.map((index) => list[index].element!));\n    }\n\n    const {\n      isRestore,\n      isResize,\n    } = e.state;\n\n    this.itemRenderer.renderItems(addedItems);\n\n    if (isRestore) {\n      this._onRenderComplete({\n        mounted: added.map((index) => list[index].orgItem),\n        updated: [],\n        isResize: false,\n        direction: this.defaultDirection,\n      });\n    }\n    if (!isRestore || isResize || e.isItemChanged) {\n      this.groupManager.renderItems();\n    }\n  }\n\n  private _onResize = (e: ResizeWatcherResizeEvent) => {\n    if (e.isResizeContainer) {\n      this._renderItems({ useResize: true }, true);\n    } else {\n      const updatedItems = getUpdatedItems(this.getVisibleItems(), e.childEntries) as InfiniteGridItem[];\n\n      if (updatedItems.length > 0) {\n        this.updateItems(updatedItems);\n      }\n    }\n  }\n\n  private _onRequestAppend = (e: OnRequestInsert): void => {\n    /**\n     * The event is fired when scrolling reaches the end or when data for a virtual group is required.\n     * @ko 스크롤이 끝에 도달하거나 virtual 그룹에 대한 데이터가 필요한 경우 이벤트가 발생한다.\n     * @event InfiniteGrid#requestAppend\n     * @param {InfiniteGrid.OnRequestAppend} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     */\n    this._onRequestInsert(DIRECTION.END, INFINITEGRID_EVENTS.REQUEST_APPEND, e);\n  }\n\n  private _onRequestPrepend = (e: OnInfiniteRequestPrepend): void => {\n    /**\n     * The event is fired when scrolling reaches the start or when data for a virtual group is required.\n     * @ko 스크롤이 끝에 도달하거나 virtual 그룹에 대한 데이터가 필요한 경우 이벤트가 발생한다.\n     * @event InfiniteGrid#requestPrepend\n     * @param {InfiniteGrid.OnRequestPrepend} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     */\n    this._onRequestInsert(DIRECTION.START, INFINITEGRID_EVENTS.REQUEST_PREPEND, e);\n  }\n\n  private _onRequestInsert(\n    direction: \"start\" | \"end\",\n    eventType: \"requestAppend\" | \"requestPrepend\",\n    e: OnInfiniteRequestAppend | OnInfiniteRequestPrepend,\n  ) {\n    if (this._waitType) {\n      this._checkStartLoading(this._waitType);\n      return;\n    }\n    this.trigger(new ComponentEvent(eventType, {\n      groupKey: e.key,\n      nextGroupKey: e.nextKey,\n      nextGroupKeys: e.nextKeys || [],\n      isVirtual: e.isVirtual,\n      wait: () => {\n        this.wait(direction);\n      },\n      ready: (hasNoData?: boolean) => {\n        this.ready(hasNoData);\n      },\n    }));\n  }\n\n  private _onContentError = ({ element, target, item, update }: OnContentError): void => {\n    /**\n     * The event is fired when scrolling reaches the start or when data for a virtual group is required.\n     * @ko 스크롤이 끝에 도달하거나 virtual 그룹에 대한 데이터가 필요한 경우 이벤트가 발생한다.\n     * @event InfiniteGrid#contentError\n     * @param {InfiniteGrid.OnContentError} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     */\n    this.trigger(new ComponentEvent(INFINITEGRID_EVENTS.CONTENT_ERROR, {\n      element,\n      target,\n      item: item as InfiniteGridItem,\n      update,\n      remove: () => {\n        this.removeByKey(item.key!);\n      },\n    }));\n  }\n\n  private _onRenderComplete = ({ isResize, mounted, updated, direction }: OnPickedRenderComplete): void => {\n    const infinite = this.infinite;\n    const scrollManager = this.scrollManager;\n    const scrollPos = scrollManager.getRelativeScrollPos()!;\n    const prevScrollSize = infinite.getScrollSize();\n    const prevContainerSize = infinite.getSize();\n    const prevVisibleArea = infinite.getVisibleArea(scrollPos, direction);\n    const isDirectionEnd = direction === DIRECTION.END;\n\n\n\n    this._syncInfinite();\n\n    if (prevVisibleArea) {\n      const prevPart = prevVisibleArea.part;\n      const prevItem = prevVisibleArea.item;\n      let nextPart!: InfiniteItemPart;\n      let nextItem!: InfiniteItem;\n\n      if (prevPart) {\n        nextPart = infinite.getItemPartByKey(prevPart.key);\n      }\n      if (prevItem) {\n        nextItem = infinite.getItemByKey(prevItem.key);\n      }\n\n      if (nextPart || nextItem) {\n        let prevPos = 0;\n        let nextPos = 0;\n\n        if (nextPart) {\n          nextPos = nextPart.pos + (isDirectionEnd ? 0 : nextPart.size);\n          prevPos = prevPart.pos + (isDirectionEnd ? 0 : prevPart.size);\n        } else {\n          const prevStartPos = Math.min(...prevItem.startOutline);\n          const prevEndPos = Math.max(...prevItem.endOutline);\n          const nextStartPos = Math.min(...nextItem.startOutline);\n          const nextEndPos = Math.max(...nextItem.endOutline);\n\n          nextPos = isDirectionEnd ? nextStartPos : nextEndPos;\n          prevPos = isDirectionEnd ? prevStartPos : prevEndPos;\n        }\n        let offset = nextPos - prevPos;\n\n        // If reversed, scroll size (case where container size is reduced)\n        if (offset < 0) {\n          const nextScrollSize = infinite.getScrollSize();\n          const nextContainerSize = infinite.getSize();\n          const endOffset = Math.max(scrollPos - Math.max(0, prevScrollSize - prevContainerSize), 0);\n          const nextScollPos\n            = Math.min(scrollPos, Math.max(0, nextScrollSize - nextContainerSize))\n            + endOffset;\n\n          // The scroll size is restored to the extent that it has been reduced.\n          offset += scrollPos - nextScollPos;\n        }\n\n        this.scrollManager.scrollBy(offset);\n      }\n    }\n\n    const completeMounted = (mounted as InfiniteGridItem[]).filter((item) => item.type !== ITEM_TYPE.LOADING);\n\n    /**\n     * This event is fired when the InfiniteGrid has completed rendering.\n     * @ko InfiniteGrid가 렌더링이 완료됐을 때 이벤트가 발생한다.\n     * @event InfiniteGrid#renderComplete\n     * @param {InfiniteGrid.OnRenderComplete} e - The object of data to be sent to an event <ko>이벤트에 전달되는 데이터 객체</ko>\n     */\n    this.trigger(new ComponentEvent(INFINITEGRID_EVENTS.RENDER_COMPLETE, {\n      isResize,\n      direction,\n      mounted: completeMounted,\n      updated: (updated as InfiniteGridItem[]).filter((item) => item.type !== ITEM_TYPE.LOADING),\n      startCursor: this.getStartCursor(),\n      endCursor: this.getEndCursor(),\n      items: this.getVisibleItems(true),\n      groups: this.getVisibleGroups(true),\n    }));\n\n    let isUpdate = this.groupManager.shouldRerenderItems();\n\n    if (completeMounted.length || updated.length) {\n      isUpdate ||= !!this.groupManager.endLoading();\n    }\n\n    if (isUpdate) {\n      this._update();\n    } else {\n      this._checkEndLoading();\n      this._scroll();\n    }\n  }\n  private _renderItems(options: RenderOptions = {}, isTrusted?: boolean) {\n    if (!isTrusted && options.useResize) {\n      this.containerManager.resize();\n    }\n    this._resizeScroll();\n    if (!this.getRenderingItems().length) {\n      const children = toArray(this.getContainerElement().children);\n      if (children.length > 0) {\n        // no items, but has children\n        this.groupManager.syncItems(convertInsertedItems(children));\n        this._syncInfinite();\n        this.setCursors(0, 0, true);\n        this._getRenderer().updated();\n      } else {\n        this.infinite.scroll(0);\n      }\n      return this;\n    }\n    if (!this.getVisibleGroups(true).length) {\n      this.setCursors(0, 0);\n    } else {\n      this.groupManager.renderItems(options);\n    }\n    return this;\n  }\n  private _checkStartLoading(direction: \"start\" | \"end\") {\n    const groupManager = this.groupManager;\n    const infinite = this.infinite;\n\n    if (\n      !groupManager.getLoadingType()\n      && infinite.isLoading(direction)\n      && groupManager.startLoading(direction)\n      && groupManager.hasLoadingItem()\n    ) {\n      this._update();\n    }\n  }\n  private _checkEndLoading() {\n    const groupManager = this.groupManager;\n    const loadingType = this.groupManager.getLoadingType();\n\n    if (\n      loadingType\n      && (!this._waitType || !this.infinite.isLoading(loadingType))\n      && groupManager.waitEndLoading()\n      && groupManager.hasLoadingItem()\n    ) {\n      this._update();\n    }\n  }\n}\n\ninterface InfiniteGrid extends Properties<typeof InfiniteGrid> { }\n\nexport default InfiniteGrid;\n", "import { MasonryGrid, MasonryGridOptions } from \"@egjs/grid\";\nimport InfiniteGrid from \"../InfiniteGrid\";\nimport { InfiniteGridOptions } from \"../types\";\nimport { InfiniteGridGetterSetter } from \"../utils\";\n\n/**\n * @typedef\n * @extends InfiniteGridOptions\n * @extends Grid.MasonryGrid.MasonryGridOptions\n */\nexport interface MasonryInfiniteGridOptions extends MasonryGridOptions, InfiniteGridOptions {\n}\n\n/**\n * MasonryInfiniteGrid is a grid that stacks items with the same width as a stack of bricks. Adjust the width of all images to the same size, find the lowest height column, and insert a new item.\n * @ko MasonryInfiniteGrid는 벽돌을 쌓아 올린 모양처럼 동일한 너비를 가진 아이템을 쌓는 레이아웃이다. 모든 이미지의 너비를 동일한 크기로 조정하고, 가장 높이가 낮은 열을 찾아 새로운 이미지를 삽입한다. 따라서 배치된 아이템 사이에 빈 공간이 생기지는 않지만 배치된 레이아웃의 아래쪽은 울퉁불퉁해진다.\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {MasonryInfiniteGridOptions} options - The option object of the MasonryInfiniteGrid module <ko>MasonryInfiniteGrid 모듈의 옵션 객체</ko>\n */\n@InfiniteGridGetterSetter\nexport class MasonryInfiniteGrid extends InfiniteGrid<MasonryInfiniteGridOptions> {\n  public static propertyTypes = {\n    ...InfiniteGrid.propertyTypes,\n    ...MasonryGrid.propertyTypes,\n  };\n  public static defaultOptions: Required<MasonryInfiniteGridOptions> = {\n    ...InfiniteGrid.defaultOptions,\n    ...MasonryGrid.defaultOptions,\n    gridConstructor: MasonryGrid,\n    appliedItemChecker: (item, grid) => {\n      const column = parseFloat(item.attributes.column) || 0;\n\n      return column >= grid.outlineLength;\n    },\n  } as const;\n}\n", "import { JustifiedGrid, JustifiedGridOptions } from \"@egjs/grid\";\nimport InfiniteGrid from \"../InfiniteGrid\";\nimport { InfiniteGridOptions } from \"../types\";\nimport { InfiniteGridGetterSetter } from \"../utils\";\n\n/**\n * @typedef\n * @extends InfiniteGridOptions\n * @extends Grid.JustifiedGrid.JustifiedGridOptions\n */\nexport interface JustifiedInfiniteGridOptions extends JustifiedGridOptions, InfiniteGridOptions {\n}\n\n/**\n * 'justified' is a printing term with the meaning that 'it fits in one row wide'. JustifiedInfiniteGrid is a grid that the item is filled up on the basis of a line given a size.\n * If 'data-grid-inline-offset' or 'data-grid-content-offset' are set for item element, the ratio is maintained except for the offset value.\n * If 'data-grid-maintained-target' is set for an element whose ratio is to be maintained, the item is rendered while maintaining the ratio of the element.\n * @ko 'justified'는 '1행의 너비에 맞게 꼭 들어찬'이라는 의미를 가진 인쇄 용어다. JustifiedInfiniteGrid는 용어의 의미대로 너비가 주어진 사이즈를 기준으로 아이템가 가득 차도록 배치하는 Grid다.\n * 아이템 엘리먼트에 'data-grid-inline-offset' 또는 'data-grid-content-offset'를 설정하면 offset 값을 제외하고 비율을 유지한다.\n * 비율을 유지하고 싶은 엘리먼트에 'data-grid-maintained-target'을 설정한다면 해당 엘리먼트의 비율을 유지하면서 아이템이 렌더링이 된다.\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {JustifiedInfiniteGridOptions} options - The option object of the JustifiedInfiniteGrid module <ko>JustifiedInfiniteGrid 모듈의 옵션 객체</ko>\n */\n@InfiniteGridGetterSetter\nexport class JustifiedInfiniteGrid extends InfiniteGrid<JustifiedInfiniteGridOptions> {\n  public static propertyTypes = {\n    ...InfiniteGrid.propertyTypes,\n    ...JustifiedGrid.propertyTypes,\n  };\n  public static defaultOptions: Required<JustifiedInfiniteGridOptions> = {\n    ...InfiniteGrid.defaultOptions,\n    ...JustifiedGrid.defaultOptions,\n    gridConstructor: JustifiedGrid,\n  } as const;\n}\n", "import { FrameGrid, FrameGridOptions } from \"@egjs/grid\";\nimport InfiniteGrid from \"../InfiniteGrid\";\nimport { InfiniteGridOptions } from \"../types\";\nimport { InfiniteGridGetterSetter } from \"../utils\";\n\n/**\n * @typedef\n * @extends InfiniteGridOptions\n * @extends Grid.FrameGrid.FrameGridOptions\n */\nexport interface FrameInfiniteGridOptions extends FrameGridOptions, InfiniteGridOptions {\n}\n\n/**\n * 'Frame' is a printing term with the meaning that 'it fits in one row wide'. FrameInfiniteGrid is a grid that the item is filled up on the basis of a line given a size.\n * @ko 'Frame'는 '1행의 너비에 맞게 꼭 들어찬'이라는 의미를 가진 인쇄 용어다. FrameInfiniteGrid는 용어의 의미대로 너비가 주어진 사이즈를 기준으로 아이템이 가득 차도록 배치하는 Grid다.\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {FrameInfiniteGridOptions} options - The option object of the FrameInfiniteGrid module <ko>FrameGrid 모듈의 옵션 객체</ko>\n */\n@InfiniteGridGetterSetter\nexport class FrameInfiniteGrid extends InfiniteGrid<FrameInfiniteGridOptions> {\n  public static propertyTypes = {\n    ...InfiniteGrid.propertyTypes,\n    ...FrameGrid.propertyTypes,\n  };\n  public static defaultOptions: Required<FrameInfiniteGridOptions> = {\n    ...InfiniteGrid.defaultOptions,\n    ...FrameGrid.defaultOptions,\n    gridConstructor: FrameGrid,\n  } as const;\n}\n", "import { PackingGrid, PackingGridOptions } from \"@egjs/grid\";\nimport InfiniteGrid from \"../InfiniteGrid\";\nimport { InfiniteGridOptions } from \"../types\";\nimport { InfiniteGridGetterSetter } from \"../utils\";\n\n/**\n * @typedef\n * @extends InfiniteGridOptions\n * @extends Grid.PackingGrid.PackingGridOptions\n */\nexport interface PackingInfiniteGridOptions extends PackingGridOptions, InfiniteGridOptions {\n}\n\n/**\n * The PackingInfiniteGrid is a grid that shows the important items bigger without sacrificing the weight of the items.\n * Rows and columns are separated so that items are dynamically placed within the horizontal and vertical space rather than arranged in an orderly fashion.\n * If `sizeWeight` is higher than `ratioWeight`, the size of items is preserved as much as possible.\n * Conversely, if `ratioWeight` is higher than `sizeWeight`, the ratio of items is preserved as much as possible.\n * @ko PackingInfiniteGrid는 아이템의 본래 크기에 따른 비중을 해치지 않으면서 중요한 카드는 더 크게 보여 주는 레이아웃이다.\n * 행과 열이 구분돼 아이템을 정돈되게 배치하는 대신 가로세로 일정 공간 내에서 동적으로 아이템을 배치한다.\n * `sizeWeight`가 `ratioWeight`보다 높으면 아이템들의 size가 최대한 보존이 된다.\n * 반대로 `ratioWeight`가 `sizeWeight`보다 높으면 아이템들의 비율이 최대한 보존이 된다.\n * @param {HTMLElement | string} container - A base element for a module <ko>모듈을 적용할 기준 엘리먼트</ko>\n * @param {PackingInfiniteGridOptions} options - The option object of the PackingInfiniteGrid module <ko>PackingInfiniteGrid 모듈의 옵션 객체</ko>\n */\n@InfiniteGridGetterSetter\nexport class PackingInfiniteGrid extends InfiniteGrid<PackingInfiniteGridOptions> {\n  public static propertyTypes = {\n    ...InfiniteGrid.propertyTypes,\n    ...PackingGrid.propertyTypes,\n  };\n  public static defaultOptions: Required<PackingInfiniteGridOptions> = {\n    ...InfiniteGrid.defaultOptions,\n    ...PackingGrid.defaultOptions,\n    gridConstructor: PackingGrid,\n  };\n}\n", "\nexport const REACT_INFINITEGRID_EVENT_MAP = {\n  \"onContentError\": \"contentError\",\n  \"onRenderComplete\": \"renderComplete\",\n  \"onRequestAppend\": \"requestAppend\",\n  \"onRequestPrepend\": \"requestPrepend\",\n  \"onChangeScroll\": \"changeScroll\",\n} as const;\n\nexport const REACT_INFINITEGRID_EVENTS: string[] = [];\n\nfor (const name in REACT_INFINITEGRID_EVENT_MAP) {\n  REACT_INFINITEGRID_EVENTS.push(name);\n}\n\nexport const REACT_INFINITEGRID_PROPS = [\n  \"tag\",\n  \"placeholder\",\n  \"status\",\n  \"useFirstRender\",\n  \"loading\",\n  \"itemBy\",\n  \"groupBy\",\n  \"infoBy\",\n  ...REACT_INFINITEGRID_EVENTS,\n];\n", "export function isFunction(val: any): val is Function {\n  return typeof val === \"function\";\n}\n", "/**\n * egjs-infinitegrid\n * Copyright (c) 2021-present NAVER Corp.\n * MIT license\n */\nimport * as React from \"react\";\nimport VanillaInfiniteGrid, {\n  InfiniteGridOptions, InfiniteGridFunction,\n  Renderer,\n  InfiniteGridItemInfo,\n  ITEM_TYPE,\n  InfiniteGridMethods,\n  withInfiniteGridMethods,\n  getRenderingItems,\n  mountRenderingItems,\n} from \"@egjs/infinitegrid\";\nimport { ReactInfiniteGridProps } from \"./types\";\nimport { REACT_INFINITEGRID_PROPS, REACT_INFINITEGRID_EVENT_MAP } from \"./consts\";\nimport { isFunction } from \"./utils\";\n\nexport abstract class InfiniteGrid<T extends InfiniteGridOptions>\n  extends React.Component<T & ReactInfiniteGridProps & { [key: string]: any }> {\n  public static GridClass: InfiniteGridFunction;\n  @withInfiniteGridMethods\n  private _grid!: VanillaInfiniteGrid;\n  private _wrapperRef = React.createRef<HTMLDivElement>();\n  private _containerRef = React.createRef<HTMLDivElement>();\n  private _renderer!: Renderer;\n\n  public render() {\n    const attributes: { [key: string]: any } = {};\n    const props = this.props;\n    const GridClass = (this.constructor as typeof InfiniteGrid).GridClass;\n    const defaultOptions = GridClass.defaultOptions;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const Tag = props.tag as any || \"div\";\n\n    for (const name in props) {\n      if (name in defaultOptions || REACT_INFINITEGRID_PROPS.indexOf(name as any) > -1) {\n        continue;\n      }\n      attributes[name] = props[name];\n    }\n\n    return <Tag ref={this._wrapperRef} {...attributes}>\n      {this._renderContainer()}\n    </Tag>;\n  }\n  public componentDidMount() {\n    const GridClass = (this.constructor as typeof InfiniteGrid).GridClass;\n    const defaultOptions = GridClass.defaultOptions;\n    const options: Partial<InfiniteGridOptions> = {};\n    const props = this.props;\n    const containerElement = this._containerRef.current;\n\n    for (const name in defaultOptions) {\n      if (name in props) {\n        (options as any)[name] = (props as any)[name];\n      }\n    }\n    if (containerElement) {\n      options.container = containerElement;\n    }\n    this._renderer = new Renderer();\n    options.renderer = this._renderer;\n    const grid = new GridClass(this._wrapperRef.current!, options);\n\n    for (const eventName in REACT_INFINITEGRID_EVENT_MAP) {\n      const nativeEventName = (REACT_INFINITEGRID_EVENT_MAP as any)[eventName];\n\n      grid.on(nativeEventName, (e: any) => {\n        const callback = this.props[eventName];\n\n        callback && callback(e);\n      });\n    }\n\n    this._grid = grid;\n    this._renderer.on(\"update\", () => {\n      this.setState({});\n    });\n\n    mountRenderingItems(this._getItemInfos(), {\n      grid,\n      useFirstRender: props.useFirstRender,\n      useLoading: props.loading,\n      usePlaceholder: props.placeholder,\n      horizontal: props.horizontal,\n      status: props.status,\n    });\n    this._renderer.updated();\n  }\n\n  public componentDidUpdate() {\n    const GridClass = (this.constructor as typeof InfiniteGrid).GridClass;\n    const propertyTypes = GridClass.propertyTypes;\n    const props = this.props;\n    const grid = this._grid;\n\n    for (const name in propertyTypes) {\n      if (name in props) {\n        (grid as any)[name] = (props as any)[name];\n      }\n    }\n    this._renderer.updated();\n  }\n\n  public componentWillUnmount() {\n    this._grid.destroy();\n  }\n\n  private _getItemInfos(): InfiniteGridItemInfo[] {\n    const props = this.props;\n    const children = React.Children.toArray(props.children) as React.ReactElement[];\n    const attributePrefix = props.attributePrefix || VanillaInfiniteGrid.defaultOptions.attributePrefix;\n    const itemBy = props.itemBy || ((item: React.ReactElement) => item.key);\n    const groupBy = props.groupBy || ((item: React.ReactElement) => item.props[`${attributePrefix}groupkey`]);\n    const infoBy = props.infoBy || (() => ({}));\n\n    \n    return children.map((child, i) => {\n      const {\n        data,\n        ...rest\n      } = infoBy(child, i) || {};\n\n      \n      return {\n        groupKey: groupBy(child, i),\n        key: itemBy(child, i),\n        ...rest,\n        data: {\n          ...data,\n          jsx: child,\n        },\n      };\n    });\n  }\n  private _renderContainer() {\n    const props = this.props;\n    const visibleChildren = this._getVisibleChildren();\n    const container = props.container;\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const ContainerTag = props.containerTag as any || \"div\";\n\n    if (container === true) {\n      return <ContainerTag ref={this._containerRef}>\n        {visibleChildren}\n      </ContainerTag>;\n    } else {\n      return visibleChildren;\n    }\n  }\n  private _getVisibleChildren() {\n    const props = this.props;\n    const placeholder = props.placeholder;\n    const loading = props.loading;\n    const visibleItems = getRenderingItems(this._getItemInfos(), {\n      grid: this._grid,\n      status: props.status,\n      horizontal: props.horizontal,\n      useFirstRender: props.useFirstRender,\n      useLoading: props.loading,\n      usePlaceholder: props.placeholder,\n    });\n\n    return visibleItems.map((item) => {\n      if (item.type === ITEM_TYPE.VIRTUAL) {\n        return React.cloneElement(isFunction(placeholder) ? placeholder(item) : placeholder, { key: item.key });\n      } else if (item.type === ITEM_TYPE.LOADING) {\n        return React.cloneElement(isFunction(loading) ? loading(item) : loading, { key: item.key });\n      } else {\n        return item.data.jsx;\n      }\n    });\n  }\n}\nexport interface InfiniteGrid<T extends InfiniteGridOptions> extends InfiniteGridMethods<InfiniteGrid<T>> { }\n", "import {\n  MasonryInfiniteGrid as VanillaMasonryInfiniteGrid,\n  MasonryInfiniteGridOptions,\n} from \"@egjs/infinitegrid\";\nimport { InfiniteGrid } from \"../InfiniteGrid\";\n\nexport class MasonryInfiniteGrid extends InfiniteGrid<MasonryInfiniteGridOptions> {\n  public static GridClass = VanillaMasonryInfiniteGrid;\n}\n", "import {\n  JustifiedInfiniteGrid as VanillaJustifiedInfiniteGrid,\n  JustifiedInfiniteGridOptions,\n} from \"@egjs/infinitegrid\";\nimport { InfiniteGrid } from \"../InfiniteGrid\";\n\nexport class JustifiedInfiniteGrid extends InfiniteGrid<JustifiedInfiniteGridOptions> {\n  public static GridClass = VanillaJustifiedInfiniteGrid;\n}\n", "import {\n  FrameInfiniteGrid as VanillaFrameInfiniteGrid,\n  FrameInfiniteGridOptions,\n} from \"@egjs/infinitegrid\";\nimport { InfiniteGrid } from \"../InfiniteGrid\";\n\nexport class FrameInfiniteGrid extends InfiniteGrid<FrameInfiniteGridOptions> {\n  public static GridClass = VanillaFrameInfiniteGrid;\n}\n", "import {\n  PackingInfiniteGrid as VanillaPackingInfiniteGrid,\n  PackingInfiniteGridOptions,\n} from \"@egjs/infinitegrid\";\nimport { InfiniteGrid } from \"../InfiniteGrid\";\n\nexport class PackingInfiniteGrid extends InfiniteGrid<PackingInfiniteGridOptions> {\n  public static GridClass = VanillaPackingInfiniteGrid;\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,IAAMA,cAAc,SAACC,OAAU;AAAyB,SAAA,OAAOA,UAAU;;ACGhF,IAAA,iBAAA,WAAA;AA2CE,WAAAC,gBACEC,WACAC,OAAY;;AAEZ,SAAKC,YAAY;AAEjB,QAAID,OAAO;;AACT,iBAAkBE,KAAAC,SAAAC,OAAOC,KAAKL,KAA4B,CAAC,GAAA,KAAA,GAAA,KAAA,GAAA,CAAA,GAAA,MAAA,KAAA,GAAA,KAAA,GAAE;AAAxD,cAAMM,MAAG,GAAA;AAEZ,eAAKA,GAAG,IAAIN,MAAMM,GAAG;;;;;;;;;;;;;;AAIzB,SAAKP,YAAYA;;AAGnB,MAAA,UAAAD,gBAAA;AAIO,UAAA,OAAP,WAAA;AACE,SAAKG,YAAY;;AAQZ,UAAA,aAAP,WAAA;AACE,WAAO,KAAKA;;AAEhB,SAAAH;EAAC;ACrED,IAAA,YAAA,WAAA;AAiBE,WAAAS,aAAA;AACE,SAAKC,gBAAgB,CAAA;;AAKvB,MAAA,UAAAD,WAAA;AAyCO,UAAA,UAAP,SAAsCE,OAAwC;AAAE,QAAA,SAAA,CAAA;aAAA,KAAA,GAAAC,KAAAA,UAAAA,QAAAA,MAA4C;AAA5CC,aAAAA,KAAAA,CAAAA,IAAAA,UAAAA,EAAAA;;AAC9E,QAAMC,YAAaH,iBAAyBI,iBACvCJ,MAAqCV,YACtCU;AAEJ,QAAMK,WAAQ,SAAQ,KAAKN,cAAcI,SAAS,KAAK,CAAA,CAAE;AAEzD,QAAIE,SAASC,UAAU,GAAG;AACxB,aAAO;;AAGT,QAAKN,iBAAyBI,gBAAsB;AACjDJ,YAAqCO,gBAAgB;AAEtDF,eAASG,QAAQ,SAACC,SAAsD;AACtEA,gBAAQT,KAAsC;OAC/C;WACI;AACLK,eAASG,QAAQ,SAAAC,SAAO;AAEtBA,gBAAO,MAAA,QAAA,SAAIP,MAAM,CAAA;OAClB;;AAGH,WAAO;;AAkCF,UAAA,OAAP,SAAmCC,WAAmCO,iBAA2C;AAAjH,QAAA,QAAA;AACE,QAAI,OAAOP,cAAc,YAAYhB,YAAYuB,eAAe,GAAG;AACjE,UAAMC,YAAYR;AAElB,eAAWN,OAAOc,WAAW;AAC3B,aAAKC,KAAMf,KAAWc,UAAUd,GAAG,CAA8B;;AAEnE,aAAO;eACE,OAAOM,cAAc,YAAY,OAAOO,oBAAoB,YAAY;AACjF,UAAMG,aAAgB,WAAA;AAAC,YAAA,OAAA,CAAA;iBAAA,KAAA,GAAAZ,KAAAA,UAAAA,QAAAA,MAAc;AAAda,eAAAA,EAAAA,IAAAA,UAAAA,EAAAA;;AAErBJ,wBAAe,MAAA,QAAA,SAAII,IAAI,CAAA;AACvBC,cAAKC,IAAIb,WAAWU,UAAQ;;AAG9B,WAAKI,GAAGd,WAAWU,UAAQ;;AAG7B,WAAO;;AAqBF,UAAA,QAAP,SAAoCV,WAAY;AAC9C,WAAO,CAAC,CAAC,KAAKJ,cAAcI,SAAS;;AA2BhC,UAAA,KAAP,SAAiCA,WAAmCO,iBAA2C;AAC7G,QAAI,OAAOP,cAAc,YAAYhB,YAAYuB,eAAe,GAAG;AACjE,UAAMC,YAAYR;AAElB,eAAWe,QAAQP,WAAW;AAC5B,aAAKM,GAAGC,MAAMP,UAAUO,IAAI,CAAQ;;AAGtC,aAAO;eACE,OAAOf,cAAc,YAC9B,OAAOO,oBAAoB,YAAY;AACvC,UAAIS,cAAc,KAAKpB,cAAcI,SAAS;AAE9C,UAAIhB,YAAYgC,WAAW,GAAG;AAC5B,aAAKpB,cAAcI,SAAS,IAAI,CAAA;AAChCgB,sBAAc,KAAKpB,cAAcI,SAAS;;AAG5CgB,kBAAYC,KAAKV,eAAsD;;AAGzE,WAAO;;AA2BF,UAAA,MAAP,SAAkCP,WAAoCkB,iBAA2C;AAE/G,QAAIlC,YAAYgB,SAAS,GAAG;AAC1B,WAAKJ,gBAAgB,CAAA;AACrB,aAAO;;AAIT,QAAIZ,YAAYkC,eAAe,GAAG;AAChC,UAAI,OAAOlB,cAAc,UAAU;AACjC,eAAO,KAAKJ,cAAcI,SAAS;AACnC,eAAO;aACF;AACL,YAAMQ,YAAYR;AAElB,iBAAWe,QAAQP,WAAW;AAC5B,eAAKK,IAAIE,MAAMP,UAAUO,IAAI,CAAQ;;AAEvC,eAAO;;;AAKX,QAAMC,cAAc,KAAKpB,cAAcI,SAAc;AAErD,QAAIgB,aAAa;AACf,UAAMb,UAASa,YAAYb;AAE3B,eAASgB,IAAI,GAAGA,IAAIhB,SAAQ,EAAEgB,GAAG;AAC/B,YAAIH,YAAYG,CAAC,MAAMD,iBAAiB;AACtCF,sBAAYI,OAAOD,GAAG,CAAC;AAEvB,cAAIhB,WAAU,GAAG;AACf,mBAAO,KAAKP,cAAcI,SAAc;;AAG1C;;;;AAKN,WAAO;;AA5QKL,EAAAA,WAAAA,UAAkB;AA8QlC,SAAAA;EAxRA;ACLA,IAAMT,mBAAiBe;;;;AEHvB,IAAA;sBAAA;gBACsB,CAAA;kBACO,CAAA;;;gBAC3B,SAAWoB,KAAX;WACS,KAAKC,OAAO,KAAKC,KAAKC,QAAQH,GAAlB,CAAZ;;gBAET,SAAWA,KAAQI,OAAnB;QACQF,OAAO,KAAKA;QACZD,SAAS,KAAKA;QACdI,YAAYH,KAAKC,QAAQH,GAAb;QACZM,QAAQD,cAAc,KAAKH,KAAKK,SAASF;AAE/CH,SAAKI,KAAD,IAAUN;AACdC,WAAOK,KAAD,IAAUF;;;;ACbpB,IAAA;sBAAA;kBACmB,CAAA;;;gBACjB,SAAWJ,KAAX;WACS,KAAKQ,OAAOR,GAAZ;;gBAET,SAAWA,KAAsBI,OAAjC;SACOI,OAAOR,GAAZ,IAAmBI;;;;ACNhB,IAAMK,cAAc,OAAOC,QAAQ;ACA1C,IAAA;mBAAA;EAAA;;oBAIE,SAAeC,UAAiBC,UAAhC;SACOC,OAAOF;SACPG,OAAOF;AAEZD,iBAAaA,SAASG,OAAO;AAC7BF,iBAAaA,SAASC,OAAO;;uBAE/B,WAAA;QAEQF,WAAW,KAAKE;QAChBD,WAAW,KAAKE;AACtBH,iBAAaA,SAASG,OAAOF;AAC7BA,iBAAaA,SAASC,OAAOF;;qBAE/B,WAAA;QACMI,OAAyB;QACzBT,QAAQ;WAELS,MAAM;AACXA,aAAOA,KAAKF;QACVP;;WAEGA;;;;ACxBX,SAASU,aAAaC,SAAqBC,OAA3C;MAGQC,YAAoB,CAAA;MAEpBC,UAAkB,CAAA;AAExBH,UAAQI,QAAQ,SAACC,IAAD;QAAEC,OAAAA,GAAAA,CAAAA,GAAMC,KAAAA,GAAAA,CAAAA;QAChBT,OAAO,IAAIU,KAAJ;AAEbN,cAAUI,IAAD,IAASR;AAClBK,YAAQI,EAAD,IAAOT;GAJhB;AAOAI,YAAUE,QAAQ,SAACN,MAAMW,GAAP;AAChBX,SAAKY,QAAQR,UAAUO,IAAI,CAAL,CAAtB;GADF;SAIOT,QAAQW,OAAO,SAACC,GAAGH,GAAJ;WAAU,CAACR,MAAMQ,CAAD;GAA/B,EAAoCI,IAAI,SAACR,IAAYI,GAAb;QAAEH,OAAAA,GAAAA,CAAAA,GAAMC,KAAAA,GAAAA,CAAAA;QACjDD,SAASC,IAAI;aACR,CAAC,GAAG,CAAJ;;QAEHO,WAAWZ,UAAUI,IAAD;QACpBS,SAASZ,QAAQI,KAAK,CAAN;QAChBS,YAAYF,SAASG,SAAT;AAGlBH,aAASI,WAAT;QAGI,CAACH,QAAQ;AACXD,eAASJ,QAAQS,QAAWjB,UAAU,CAAD,CAArC;WACK;AACLY,eAASJ,QAAQK,QAAQA,OAAOlB,IAAhC;;QAEIuB,UAAUN,SAASG,SAAT;WACT,CAACD,WAAWI,OAAZ;GAlBF;;AAsBT,IAAA;mBAaIC,UACAC,MACAC,OACAC,SACAxB,SACAyB,YACAC,oBACAzB,OARF;SAUOoB,WAAWA;SACXC,OAAOA;SACPC,QAAQA;SACRC,UAAUA;SACVxB,UAAUA;SACVyB,aAAaA;SACbC,qBAAqBA;SACrBzB,QAAQA;;;AAEf0B,SAAAA,eAAA,SAAA,WAAA;SAAA,WAAA;UACM,CAAC,KAAKC,cAAc;aACjBC,gBAAL;;aAEK,KAAKD;;;;GAJd;AAMAD,SAAAA,eAAA,SAAA,eAAA;SAAA,WAAA;UACM,CAAC,KAAKG,kBAAkB;aACrBD,gBAAL;;aAEK,KAAKC;;;;GAJd;4BAMA,WAAA;QACQC,UAAUhC,aAAa,KAAK2B,oBAAoB,KAAKzB,KAA/B;QACtBD,UAAsB,KAAKA;QAC3BgC,cAA0B,CAAA;SAE3BJ,eAAeG,QAAQpB,OAAO,SAACN,IAAYI,GAAb;UAAEH,OAAAA,GAAAA,CAAAA,GAAMC,KAAAA,GAAAA,CAAAA;UACnC0B,KAAAA,QAAAA,CAAAA,GAACC,aAAAA,GAAAA,CAAAA,GAAYC,WAAAA,GAAAA,CAAAA;UAEf7B,SAASC,IAAI;AACfyB,oBAAYI,KAAK,CAACF,YAAYC,QAAb,CAAjB;eACO;;KALS;SAQfL,mBAAmBE;;;;ACtD5B,SAAgBK,KACdhB,UACAC,MACAgB,kBAAAA;MAEMC,WAA+C/C,cAAcC,MAAO6C,mBAAkBE,UAAUC;MAChGC,WAAWJ,oBAAoB,SAACK,GAAD;WAAUA;;MACzCpB,QAAkB,CAAA;MAClBC,UAAoB,CAAA;MACpBC,aAAyB,CAAA;MACzBmB,WAAWvB,SAASR,IAAI6B,QAAb;MACXzD,OAAOqC,KAAKT,IAAI6B,QAAT;MACPG,aAAuC,IAAIN,SAAJ;MACvCO,SAAmC,IAAIP,SAAJ;MACnCb,qBAAiC,CAAA;MACjCzB,QAAmB,CAAA;MACnB8C,aAAqB,CAAA;MACvB/C,UAAsB,CAAA;MACtBgD,aAAa;MACbC,eAAe;AAGnBL,WAASxC,QAAQ,SAACrB,KAAKmE,eAAN;AACfL,eAAWM,IAAIpE,KAAKmE,aAApB;GADF;AAGAjE,OAAKmB,QAAQ,SAACrB,KAAKqE,WAAN;AACXN,WAAOK,IAAIpE,KAAKqE,SAAhB;GADF;AAKAR,WAASxC,QAAQ,SAACrB,KAAKmE,eAAN;QACTE,YAAYN,OAAOO,IAAItE,GAAX;QAGd,OAAOqE,cAAc,aAAa;QAClCH;AACFzB,cAAQY,KAAKc,aAAb;WACK;AACLH,iBAAWK,SAAD,IAAcH;;GAR5B;AAaAhE,OAAKmB,QAAQ,SAACrB,KAAKqE,WAAN;QACLF,gBAAgBL,WAAWQ,IAAItE,GAAf;QAGlB,OAAOmE,kBAAkB,aAAa;AACxC3B,YAAMa,KAAKgB,SAAX;QACEJ;WACG;AACLvB,iBAAWW,KAAK,CAACc,eAAeE,SAAhB,CAAhB;AACAH,qBAAeF,WAAWK,SAAD,KAAe;AAExC1B,yBAAmBU,KAAK,CACtBc,gBAAgBD,cAChBG,YAAYJ,UAFU,CAAxB;AAIA/C,YAAMmC,KAAKgB,cAAcF,aAAzB;UACIA,kBAAkBE,WAAW;AAC/BpD,gBAAQoC,KAAK,CAACc,eAAeE,SAAhB,CAAb;;;GAjBN;AAsBA5B,UAAQ8B,QAAR;SAEO,IAAIC,OACTlC,UACAC,MACAC,OACAC,SACAxB,SACAyB,YACAC,oBACAzB,KARK;;ACvGT,IAAA;uBAoCIqB,MACQgB,kBAFV;yBACE;AAAAhB,aAAAA,CAAAA;;2BACQgB;SAEHhB,OAAO,CAAA,EAAGkC,MAAMC,KAAKnC,IAAd;;;mBAQd,SAAcA,MAAd;QACQoC,UAAe,CAAA,EAAGF,MAAMC,KAAKnC,IAAd;QACfqC,SAAStB,KAAQ,KAAKf,MAAMoC,SAAS,KAAKpB,eAA7B;SAEdhB,OAAOoC;WACLC;;;;;;;;;;;;;;;;;;;;;;;;AE5DJ,IAAMC,kBAAkB,OAAOC,QAAQ,aAC1CC,SACC,2BAAA;MACGC,gBAAgB;SAEb,SAACC,IAAD;WAAkBA,GAAWC,iBAAkBD,GAAWC,eAAe,EAAEF;;EAHlF;ACOJ,IAAA;AAA0DG,YAAAC,iBAAA,MAAA;2BAKtDC,MADF;yBACE;AAAAA,aAAAA,CAAAA;;WAEAC,OAAAA,KAAA,MAAMD,MAAMR,eAAZ,KAAA;;;EAPsDU,uBAAAA;ACiC1D,SAAgBC,MACdC,UACAJ,MAAAA;SAEOK,KAAYD,UAAUJ,MAAMR,eAApB;;;;AIjDV,IAAMc,qCAAqC;AAC3C,IAAMC,6BAA6B;;;;;;;;;;;;;;;;;;;SCS1BC,mBAAgB;AAE7BC,SAAeC,0BAAD,IAAgCD,OAAeC,0BAAD,KAAgC,CAAA;AAC7F,MAAMC,cAAeF,OAAeC,0BAAD;AAEnCC,cAAYC,kCAAD,IAAuCD,YAAYC,kCAAD,KAAwC,CAAA;AAErG,SAAOD,YAAYC,kCAAD;AACnB;SAEeC,qBAAkB;AAChC,MAAMC,QAAQN,iBAAgB;AAE9B,SAAOM,MAAMA,MAAMC,SAAS,CAAhB;AACb;AAEK,SAAUC,mBAAmBC,MAAmB;AACpD,MAAMH,QAAQN,iBAAgB;AAC9B,MAAMU,YAA6B,CAAA;AACnC,MAAMC,WAAqB;IACzBF;IACAC;IACAE,MAAA,SAAKC,UAAuB;AAC1B,UAAIJ,SAASI,YAAYH,UAAUI,QAAQD,QAAlB,MAAgC,IAAI;AAC3DH,kBAAUE,KAAKC,QAAf;MACD;IACF;;AAGHP,QAAMM,KAAKD,QAAX;AACA,SAAOA;AACR;SAEeI,wBAAqB;AACnC,MAAMT,QAAQN,iBAAgB;AAE9B,SAAOM,MAAMU,IAAN;AACR;ACrCD,IAAAC,WAAA,WAAA;AAME,WAAAA,UAAYC,OAAa;AAJf,SAAAC,WAAW,IAAIC,sBAAJ;AAKnB,SAAKC,WAAWH;EACjB;AARH,MAAA,UAAAD,UAAA;AAYEhB,SAAAqB,eAAkB,SAAA,WAAA;;;;IAAlBC,KAAA,WAAA;AACE,UAAMC,kBAAkBnB,mBAAkB;AAE1CmB,0BAAe,QAAfA,oBAAA,SAAA,SAAAA,gBAAiBZ,KAAK,IAAtB;AACA,aAAO,KAAKS;;IAEdI,KAAA,SAAmBP,OAAY;AAC7B,WAAKQ,YAAYR,KAAjB;;;;GAPF;AAYO,UAASS,YAAhB,SAAiBC,UAAkD;AACjE,SAAKC;AACL,SAAKV,SAASW,GAAG,UAAUF,QAA3B;AACA,WAAO;;AAKF,UAAWG,cAAlB,SAAmBH,UAAmD;AACpE,SAAKT,SAASa,IAAI,UAAUJ,QAA5B;AACA,WAAO;;AAEC,UAAWF,cAArB,SAAsBR,OAAY;AAChC,QAAMe,YAAY,KAAKZ;AACvB,QAAMa,WAAWhB,UAAUe;AAE3B,SAAKZ,WAAWH;AAEhB,QAAIgB,UAAU;AACZ,WAAKf,SAASgB,QAAQ,UAAUjB,OAAOe,SAAvC;IACD;;AAKI,UAAAG,WAAP,WAAA;AACE,WAAO,GAAGC,OAAA,KAAKR,OAAR;;AAKF,UAAAS,UAAP,WAAA;AACE,WAAO,KAAKT;;AAEhB,SAACZ;AAAA,EA1DD;ACLA,IAAAsB,mBAAA,SAAAC,QAAA;AAAyCC,EAAAA,WAAWF,mBAAAC,MAAA;AAOlD,WAAAD,kBAAoBG,mBAA0B;AAA9C,QAAAC,QACEH,OAAAA,KAAA,IAAA,KAGD;AAJmBG,UAAiBD,oBAAjBA;AANZC,UAAWC,cAAyB,CAAA;AA4BpCD,UAAAE,iBAAiB,WAAA;AACvBF,YAAKjB,YAAYiB,MAAKd,OAAtB;;AApBAc,UAAKtB,WAAWsB,MAAKd;;EACtB;AAXH,MAAA,UAAAU,kBAAA;AAaEtC,SAAAqB,eAAW,SAAA,WAAA;IAAXC,KAAA,WAAA;AAAA,UAcCoB,QAAA;AAbCnC,yBAAmB,IAAD;AAClB,UAAMU,QAAQ,KAAKwB,kBAAL;AACd,UAAMI,UAAU/B,sBAAqB;AAErC,WAAK6B,YAAYG,QAAQ,SAAAlC,UAAQ;AAC/BA,iBAASkB,YAAYY,MAAKE,cAA1B;OADF;AAGAC,cAAQpC,UAAUqC,QAAQ,SAAAlC,UAAQ;AAChCA,iBAASc,UAAUgB,MAAKE,cAAxB;OADF;AAGA,WAAKD,cAAcE,QAAQpC;AAE3B,aAAOQ;;;;GAbT;AAmBF,SAACqB;AAhCD,EAAyCtB,QAAzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AOFA,IAAM+B,WAAW,OAAOC,WAAW;AACnC,IAAMC,KAAKF,WAAWC,OAAOE,UAAUC,YAAY;AAC5C,IAAMC,wBAAwBL,WAAW,CAAC,EAAE,sBAAsBC,UAAU;AAC5E,IAAMK,QAAQ,kCAAkCC,KAAKL,EAAE;AACvD,IAAMM,2BAA2BR,WAAW,CAAC,EAAE,sBAAsBS,YAAY;AACjF,IAAMC,QAAQ;AACd,IAAMC,SAAS;SCFNC,aAAaC,IAAiBC,MAAY;AACxD,SAAOD,GAAGD,aAAaE,IAAI,KAAK;AAClC;AAEA,SAAgBC,QAAWC,KAAmB;AAC5C,SAAO,CAAA,EAAGC,MAAMC,KAAKF,GAAG;AAC1B;AACA,SAAgBG,iBAAiBC,QAAqBC,QAAgB;AAAhB,MAAA,WAAA,QAAA;AAAAA,aAAAA;;AACpD,SAAO,CAAC,CAACD,OAAOR,aAAgBS,SAAM,OAAO;AAC/C;AACA,SAAgBC,oBAAoBF,QAAqBC,QAAgB;AAAhB,MAAA,WAAA,QAAA;AAAAA,aAAAA;;AACvD,SAAS,aAAaD,UAAYA,OAA4BR,aAAa,SAAS,MAAM,UACrF,CAAC,CAACQ,OAAOR,aAAgBS,SAAM,MAAM;AAC5C;AACA,SAAgBE,iBAAiBH,QAAqBC,QAAgB;AAAhB,MAAA,WAAA,QAAA;AAAAA,aAAAA;;AACpD,SAAO,CAAC,CAACD,OAAOR,aAAgBS,SAAM,MAAM;AAC9C;AACA,SAAgBG,SACdC,SACAC,MACAC,SAAiC;AAEjC,MAAIC,0BAA0B;AAC5BH,YAAQI,iBAAiBH,MAAMC,SAAS,KAAK;aACnCF,QAAgBK,aAAa;AACtCL,YAAgBK,YAAY,OAAKJ,MAAQC,OAAO;SAC5C;AACJF,YAAgB,OAAKC,IAAM,IAAIC;;AAEpC;AACA,SAAgBI,YACdN,SACAC,MACAC,SAAiC;AAEjC,MAAIF,QAAQO,qBAAqB;AAC/BP,YAAQO,oBAAoBN,MAAMC,SAAS,KAAK;aACtCF,QAAgBQ,aAAa;AACtCR,YAAgBQ,YAAY,OAAKP,MAAQC,OAAO;SAC5C;AACJF,YAAgB,OAAKC,IAAM,IAAI;;AAEpC;AAEA,SAAgBQ,WAAWrB,IAAe;AACxC,SAAOsB,QAAQtB,IAAI,OAAO;AAC5B;AACA,SAAgBuB,YAAYvB,IAAe;AACzC,SAAOsB,QAAQtB,IAAI,QAAQ;AAC7B;AACA,SAAgBwB,UAAUxB,IAAW;AACnC,UAAQyB,wBACNC,OAAOC,iBAAiB3B,EAAE,IAAKA,GAAW4B,iBAAiB,CAAA;AAC/D;AACA,SAASN,QAAQtB,IAAiBC,MAAwB;AACxD,MAAM4B,OAAQ7B,GAAW,WAASC,IAAM,KAAMD,GAAW,WAASC,IAAM;AAExE,SAAO6B,WAAWD,QAAQL,UAAUxB,EAAE,EAAEC,KAAK8B,YAAW,CAAE,CAAC,KAAK;AAClE;AAEA,SAAgBC,mBAAmBpB,SAAsBqB,MAAgBzB,QAAc;AACrF,MAAM0B,eAAehC,QAAQU,QAAQuB,iBAAiBC,eAAAA,CACpD,MAAI5B,SAAM,YAAUA,SAAM,QAAQ,GAC/ByB,KAAKI,IAAI,SAAAC,KAAG;AAAI,WAAC,CAClB,MAAI9B,SAAM,WAAS8B,KAChBA,MAAG,MAAI9B,SAAM,SAChB,MAAIA,SAAM,YAAU8B,GAAK,EACxBC,KAAK,IAAI;GAAC,CAAC,EACdA,KAAK,IAAI,CAAC,CAAC;AAEb,SAAOrC,QACLU,QAAQuB,iBAAiB,MAAI3B,SAAM,aAAWyB,KAAKM,KAAK,IAAI,CAAG,CAAC,EAChEC,OAAO,SAAAxC,IAAE;AACT,WAAOkC,aAAaO,QAAQzC,EAAE,MAAM;GACrC;AACH;AC3EA,IAAM0C,WAA+B,CAAA;AAErC,SAAgBC,aAAa/B,SAA2BJ,QAAc;AACpE,GAACkC,SAASE,UAAUjC,SAASe,QAAQ,UAAUmB,mBAAmB;AAClEjC,UAAQkC,aAAatC;AACrBkC,WAASK,KAAKnC,OAAO;AACrBoC,SAAOpC,OAAO;AAChB;AACA,SAAgBqC,gBAAgBrC,SAA2BJ,QAAc;AACvE,MAAM0C,QAAQR,SAASD,QAAQ7B,OAAO;AAEtC,MAAIsC,QAAQ,GAAG;AACb;;AAEF,MAAMC,QAAQpD,aAAaa,SAAYJ,SAAM,OAAO;AAEpD,SAAOI,QAAQkC;AACflC,UAAQwC,MAAMD,UAAUE,SAASC,QAAQD,MAAM,IAAI;AACnDX,WAASa,OAAOL,OAAO,CAAC;AAExB,GAACR,SAASE,UAAU1B,YAAYQ,QAAQ,UAAUmB,mBAAmB;AACvE;AACA,SAASG,OAAOpC,SAA2BJ,QAAgB;AAAhB,MAAA,WAAA,QAAA;AAAAA,aAAAA;;AACzC,MAAMgD,gBAAgB5C,QAAQkC,cAActC;AAC5C,MAAMiD,YAAYC,SAAS3D,aAAaa,SAAS,KAAG4C,gBAAgBF,KAAO,GAAG,EAAE,KAAK;AACrF,MAAMK,aAAaD,SAAS3D,aAAaa,SAAS,KAAG4C,gBAAgBH,MAAQ,GAAG,EAAE,KAAK;AACvF,MAAMF,QAAQpD,aAAaa,SAAY4C,gBAAa,OAAO;AAE3D,MAAIL,UAAUE,QAAQ;AACpB,QAAMxB,OAAON,YAAYX,OAAO,KAAK+C;AAErC/C,YAAQwC,MAAME,KAAK,IAAOG,YAAYE,aAAa9B,OAAI;SAClD;AACL,QAAMA,OAAOR,WAAWT,OAAO,KAAK6C;AAEpC7C,YAAQwC,MAAMC,MAAM,IAAOM,aAAaF,YAAY5B,OAAI;;AAE5D;AACA,SAAgBgB,sBAAmB;AACjCH,WAASkB,QAAQ,SAAAhD,SAAO;AACtBoC,WAAOpC,OAAO;GACf;AACH;ACxCA,IAAA,SAAA,SAAA,QAAA;AAA0EiD,EAAAA,WAAAA,SAAAA,MAAAA;AAWxE,WAAAC,QAAYlD,SAAsBmD,SAA2C;AAA3C,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AAAlC,QAAA,QACEC,OAAAA,KAAAA,IAAAA,KAAO;AAPCC,UAAAA,UAAU;AACVA,UAAAA,aAAa;AACbA,UAAAA,cAAc;AACdA,UAAAA,aAAa;AACbA,UAAAA,SAAS;AAyDZA,UAAAA,UAAU,SAACC,GAAS;AACzBD,YAAKE,MAAK;AAGV,UAAID,KAAKA,EAAErD,SAAS,SAAS;AAC3BoD,cAAKG,QAAQH,MAAKrD,OAAO;;AAE3B,UAAIqD,MAAKI,cAAcJ,MAAKK,aAAY,GAAI;AAE1C;;AAGF,UAAMC,eAAe,CAACN,MAAKO,eAAe,CAACP,MAAKI;AAEhDJ,YAAKQ,QAAQF,YAAY;;AAnEzBN,UAAKF,UAAO,SAAA;MACVvD,QAAQ;OACLuD,OAAO;AAEZE,UAAKrD,UAAUA;AACf,QAAMJ,SAASyD,MAAKF,QAAQvD;AAE5ByD,UAAKO,cAAclE,iBAAiBM,SAASJ,MAAM;AACnDyD,UAAKS,SAAShE,iBAAiBE,SAASJ,MAAM;AAC9CyD,UAAKI,aAAa5D,oBAAoBG,SAASJ,MAAM;;;AACtD,MAAA,UAAAsD,QAAA;AACM,UAAA,QAAP,WAAA;AACE,QAAI,KAAKY,UAAU,CAAC,KAAKJ,aAAY,GAAI;AAEvC,WAAKK,eAAe,IAAI;AACxB,aAAO;;AAGT,QAAI,KAAKH,aAAa;AACpB7B,mBAAa,KAAK/B,SAAS,KAAKmD,QAAQvD,MAAM;;AAEhD,QAAI,KAAKgE,eAAe,KAAKH,YAAY;AAEvC,WAAKO,kBAAiB;;AAGxB,WAAO;;AAEF,UAAA,YAAP,WAAA;AAAA,QAAA,QAAA;AACE,QAAMhE,UAAU,KAAKA;AACpB,SAAKiE,YAA8BC,OAAOlB,QAAQ,SAAA3D,MAAI;AACrDU,eAASC,SAASX,MAAMgE,MAAKc,OAAO;KACrC;;AAEI,UAAA,QAAP,WAAA;AAAA,QAAA,QAAA;AACE,QAAMnE,UAAU,KAAKA;AACpB,SAAKiE,YAA8BC,OAAOlB,QAAQ,SAAA3D,MAAI;AACrDiB,kBAAYN,SAASX,MAAMgE,MAAKc,OAAO;KACxC;AACD,SAAK9B,gBAAe;;AAEf,UAAA,UAAP,WAAA;AACE,SAAKkB,MAAK;AACV,SAAKa,IAAG;;AAEH,UAAA,kBAAP,WAAA;AACE,QAAI,KAAKR,aAAa;AAEZ,UAAAhE,SAAW,KAAKuD,QAAO;AAE/Bd,sBAAgB,KAAKrC,SAASJ,MAAM;;;AAmBjC,UAAA,UAAP,SAAeD,QAAmB;AAChC,SAAK0E,QAAQ,SAAS;MACpBrE,SAAS,KAAKA;MACdL;KACD;;AAEI,UAAA,aAAP,WAAA;AACE,QAAI,KAAK2E,YAAY;AACnB;;AAEF,SAAKA,aAAa;AAClB,SAAKD,QAAQ,YAAY;MACvBrE,SAAS,KAAKA;MACdyD,YAAY,KAAKA;MACjBK,QAAQ,KAAKA;KACd;;AAEI,UAAA,UAAP,SAAeH,cAAqB;AAClC,QAAI,KAAKY,SAAS;AAChB;;AAEFZ,mBAAe,CAAC,KAAKW,cAAcX;AAEnC,QAAIA,cAAc;AAChB,WAAKW,aAAa;;AAEpB,SAAKjC,gBAAe;AACpB,SAAKkC,UAAU;AACf,SAAKF,QAAQ,SAAS;MACpBrE,SAAS,KAAKA;MACd2D;MACAF,YAAY,KAAKA;MACjBK,QAAQ,KAAKA;KACd;;AAEI,UAAA,iBAAP,SAAsBnE,QAAmB;AAAzC,QAAA,QAAA;AACE6E,eAAW,WAAA;AACTnB,YAAKG,QAAQ7D,MAAM;KACpB;;AAEI,UAAA,oBAAP,WAAA;AAAA,QAAA,QAAA;AACE6E,eAAW,WAAA;AACTnB,YAAKoB,WAAU;KAChB;;AAEI,UAAA,iBAAP,SAAsBd,cAAqB;AAA3C,QAAA,QAAA;AACEa,eAAW,WAAA;AACTnB,YAAKQ,QAAQF,YAAY;KAC1B;;AAjIWT,EAAAA,QAAAA,SAAmB,CAAA;AAmInC,SAAAA;EApI0EwB,qBAAS;ACDnF,IAAA,gBAAA,SAAA,QAAA;AAA0DzB,EAAAA,WAAAA,gBAAAA,MAAAA;AAA1D,WAAA0B,iBAAA;;;AAoCC,MAAA,UAAAA,eAAA;AAhCQ,UAAA,gBAAP,SAAqBlB,YAAmB;AACtC,SAAKA,aAAaA;;AAEb,UAAA,QAAP,WAAA;AACE,QAAI,KAAKK,QAAQ;AAEf,WAAKC,eAAe,IAAI;AACxB,aAAO;;AAGT,QAAI,KAAKH,aAAa;AACpB7B,mBAAa,KAAK/B,SAAS,KAAKmD,QAAQvD,MAAM;AAC9C,WAAKoE,kBAAiB;WACjB;AAEL,WAAKK,QAAQ,iBAAiB;;AAEhC,WAAO;;AAEF,UAAA,eAAP,WAAA;AACE,WAAO;;AAEF,UAAA,UAAP,WAAA;AACE,SAAKd,MAAK;AACV,SAAKc,QAAQ,gBAAgB;AAC7B,SAAKD,IAAG;;AAEH,UAAA,oBAAP,WAAA;AAEEhB,WAAAA,UAAMY,kBAAiB,KAAA,IAAA;AACvB,SAAKK,QAAQ,sBAAsB;;AAjCvBM,EAAAA,eAAAA,SAAmB,CAAA;AAmCnC,SAAAA;EApC0DzB,MAAM;ACGhE,IAAA,iBAAA,SAAA,QAAA;AAA6BD,EAAAA,WAAAA,iBAAAA,MAAAA;AAW3B,WAAA2B,gBAAYzB,SAAqC;AAArC,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AAAZ,QAAA,QACEC,OAAAA,KAAAA,IAAAA,KAAO;AAVDC,UAAAA,aAAa;AACbA,UAAAA,gBAAgB;AAChBA,UAAAA,aAAa;AACbA,UAAAA,kBAAkB;AAClBA,UAAAA,iBAAiB;AACjBA,UAAAA,eAA8B,CAAA;AAMpCA,UAAKF,UAAO,SAAA;MACV0B,SAAS,CAAA;MACTjF,QAAQ;OACLuD,OAAO;;;AAGd,MAAA,UAAAyB,gBAAA;AA2BO,UAAA,QAAP,SAAa9C,WAAkC;AAA/C,QAAA,QAAA;AACU,QAAAlC,SAAW,KAAKuD,QAAO;AAE/B,SAAKI,MAAK;AACV,SAAKuB,eAAexF,QAAQwC,SAAQ,EAAEL,IAAI,SAACzB,SAASsC,OAAK;AACvD,UAAMyC,SAAS1B,MAAK2B,UAAUhF,SAAS;QAAEJ;OAAQ;AAEjDmF,aAAOE,MAAK;AACZF,aAAOG,GAAG,SAAS,SAAA5B,GAAC;AAClBD,cAAKG,QAAQlB,OAAOgB,EAAE3D,MAAM;OAC7B,EAAEuF,GAAG,YAAY,SAAA5B,GAAC;AACjB,YAAM6B,OAAO9B,MAAKyB,aAAaxC,KAAK;AAEpC6C,aAAK1B,aAAaH,EAAEG;AACpB0B,aAAKrB,SAASR,EAAEQ;AAChB,YAAMQ,aAAajB,MAAK+B,cAAc9C,KAAK;AAE3Ce,cAAKgC,kBAAkB/C,KAAK;AAE5BgC,sBAAcjB,MAAKoB,WAAU;OAC9B,EAAES,GAAG,SAAS,SAACI,IAAoC;YAAlC3B,eAAY,GAAA,cAAEF,aAAU,GAAA,YAAEK,SAAM,GAAA;AAChD,YAAMqB,OAAO9B,MAAKyB,aAAaxC,KAAK;AAEpC6C,aAAK1B,aAAaA;AAClB0B,aAAKrB,SAASA;AAEd,YAAMQ,aAAaX,gBAAgBN,MAAK+B,cAAc9C,KAAK;AAC3D,YAAMiC,UAAUlB,MAAKkC,WAAWjD,KAAK;AAGrCqB,wBAAgBN,MAAKgC,kBAAkB/C,KAAK;AAC5Ce,cAAKmC,eAAelD,KAAK;AAEzBgC,sBAAcjB,MAAKoB,WAAU;AAC7BF,mBAAWlB,MAAKQ,QAAO;OACxB;AAED,aAAO;QACLkB;QACA/E;QACAyD,YAAY;QACZgC,UAAU;QACVnB,YAAY;QACZC,SAAS;QACTT,QAAQ;;KAEX;AAED,QAAM9B,UAAS,KAAK8C,aAAa9C;AAEjC,SAAK0D,aAAa1D;AAClB,QAAI,CAACA,SAAQ;AACXwC,iBAAW,WAAA;AACTnB,cAAKoB,WAAU;AACfpB,cAAKQ,QAAO;OACb;;AAEH,WAAO;;AAMF,UAAA,gBAAP,WAAA;AACE,WAAO,KAAK6B;;AAMP,UAAA,aAAP,WAAA;AACE,WAAO,KAAKZ,aAAaa,MAAM,SAAAR,MAAI;AAAI,aAAAA,KAAKb;KAAU;;AAMjD,UAAA,UAAP,WAAA;AACE,WAAO,KAAKQ,aAAaa,MAAM,SAAAR,MAAI;AAAI,aAAAA,KAAKZ;KAAO;;AAM9C,UAAA,WAAP,WAAA;AACE,WAAO,KAAKqB,kBAAkB;;AAMzB,UAAA,QAAP,WAAA;AACE,SAAKC,iBAAiB;AACtB,SAAKH,aAAa;AAClB,SAAKI,gBAAgB;AACrB,SAAKC,aAAa;AAClB,SAAKH,kBAAkB;AACvB,SAAKd,aAAa9B,QAAQ,SAAAmC,MAAI;AAC5B,UAAIA,KAAKJ,QAAQ;AACfI,aAAKJ,OAAOiB,QAAO;;KAEtB;AACD,SAAKlB,eAAe,CAAA;;AAMf,UAAA,UAAP,WAAA;AACE,SAAKvB,MAAK;AACV,SAAKa,IAAG;;AAEF,UAAA,YAAR,SAAkBpE,SAAsBmD,SAA6B;AAArE,QAAA,QAAA;AACE,QAAM8C,UAAUjG,QAAQiG,QAAQ9E,YAAW;AAC3C,QAAM0D,UAAU,KAAK1B,QAAQ0B;AAC7B,QAAMjF,SAASuD,QAAQvD;AACvB,QAAMyB,OAAO6E,OAAOC,KAAKtB,OAAO;AAEhC,QAAIA,QAAQoB,OAAO,GAAG;AACpB,aAAO,IAAIpB,QAAQoB,OAAO,EAAEjG,SAASmD,OAAO;;AAE9C,QAAM4B,SAAS,IAAIJ,cAAc3E,SAASmD,OAAO;AACjD,QAAMiD,WAAW9G,QAAQU,QAAQuB,iBAA8BF,KAAKM,KAAK,IAAI,CAAC,CAAC;AAE/EoD,WAAOsB,cAAcD,SAASE,KAAK,SAAAlH,IAAE;AAAI,aAAAS,oBAAoBT,IAAIQ,MAAM;KAAC,CAAC;AACzE,QAAI+D,eAAe;AAEnB,QAAM4C,kBAAkB,KAAKC,MAAK,EAAGtB,GAAG,SAAS,SAAA5B,GAAC;AAChDyB,aAAOvB,QAAQF,EAAE3D,MAAM;KACxB,EAAEuF,GAAG,SAAS,WAAA;AACbH,aAAOlB,QAAQF,YAAY;KAC5B;AAEDoB,WAAOG,GAAG,mBAAmB,WAAA;AAE3B,UAAMuB,kBAAkBrF,mBAAmBpB,SAASqB,MAAMgC,MAAKF,QAAQvD,MAAM;AAE7E2G,sBAAgBtB,MAAMwB,eAAe,EAAEvB,GAAG,YAAY,SAAA5B,GAAC;AACrDK,uBAAeL,EAAEiB;AACjB,YAAI,CAACZ,cAAc;AACjBoB,iBAAON,WAAU;;OAEpB;KACF,EAAES,GAAG,wBAAwB,WAAA;AAI5BqB,sBAAgBtB,MAAMmB,QAAQ;KAC/B,EAAElB,GAAG,kBAAkB,WAAA;AACtBqB,sBAAgBP,QAAO;KACxB;AAED,WAAOjB;;AAED,UAAA,QAAR,WAAA;AACE,WAAO,IAAIH,gBAAc,SAAA,CAAA,GAAM,KAAKzB,OAAO,CAAA;;AAErC,UAAA,gBAAR,SAAsBb,OAAa;AACjC,SAAKwC,aAAaxC,KAAK,EAAEgC,aAAa;AACtC,MAAE,KAAKwB;AAGP,QAAI,KAAKA,gBAAgB,KAAKJ,YAAY;AACxC,aAAO;;AAET,WAAO;;AAED,UAAA,aAAR,SAAmBpD,OAAa;AAC9B,SAAKwC,aAAaxC,KAAK,EAAEiC,UAAU;AACnC,MAAE,KAAKwB;AAEP,QAAI,KAAKA,aAAa,KAAKL,YAAY;AACrC,aAAO;;AAET,WAAO;;AAID,UAAA,UAAR,SAAgBpD,OAAe3C,QAAmB;AAChD,QAAMwF,OAAO,KAAKL,aAAaxC,KAAK;AAEpC6C,SAAKM,WAAW;AA2BhB,SAAKpB,QAAQ,IAAIqC,iBAAe,SAAS;MACvC1G,SAASmF,KAAKnF;MACdsC;MACA3C;MACAgH,YAAY,KAAKC,cAAa;MAC9BhB,iBAAiB,EAAE,KAAKA;KACzB,CAAC;;AAEI,UAAA,oBAAR,SAA0BtD,OAAa;AACrC,QAAM6C,OAAO,KAAKL,aAAaxC,KAAK;AA6BpC,SAAK+B,QAAQ,IAAIqC,iBAAe,mBAAmB;MACjD1G,SAASmF,KAAKnF;MACdsC;MAEAwD,eAAe,KAAKA;MACpBC,YAAY,KAAKA;MACjBL,YAAY,KAAKA;MAEjBpB,YAAY,KAAKA,WAAU;MAC3BC,SAAS,KAAKA,QAAO;MACrBd,YAAY0B,KAAK1B;MACjBK,QAAQqB,KAAKrB;KACd,CAAC;;AAEI,UAAA,aAAR,WAAA;AACE,SAAK+B,iBAAiB;AA2BtB,SAAKxB,QAAQ,IAAIqC,iBAAe,YAAY;MAC1CX,YAAY,KAAKA;MACjBL,YAAY,KAAKA;MACjBnB,SAAS,KAAKA,QAAO;MACrBd,YAAY,KAAKA,WAAU;KAC5B,CAAC;;AAEI,UAAA,iBAAR,SAAuBnB,OAAa;AAClC,QAAM6C,OAAO,KAAKL,aAAaxC,KAAK;AA6BpC,SAAK+B,QAAQ,IAAIqC,iBAAe,gBAAgB;MAC9CpE;MACAtC,SAASmF,KAAKnF;MAEdyF,UAAUN,KAAKM;MACfkB,YAAY,KAAKC,cAAa;MAC9BhB,iBAAiB,KAAKA;MAEtBE,eAAe,KAAKA;MACpBC,YAAY,KAAKA;MACjBL,YAAY,KAAKA;MAEjBpB,YAAY,KAAKA,WAAU;MAC3BC,SAAS,KAAKA,QAAO;MAErBd,YAAY0B,KAAK1B;MACjBoC,gBAAgB,KAAKA;MACrB/B,QAAQqB,KAAKrB;KACd,CAAC;;AAEI,UAAA,UAAR,WAAA;AA+BE,SAAKO,QAAQ,IAAIqC,iBAAe,SAAS;MACvCC,YAAY,KAAKC,cAAa;MAC9BhB,iBAAiB,KAAKA;MACtBF,YAAY,KAAKA;KAClB,CAAC;;AAEI,UAAA,gBAAR,WAAA;AACE,WAAO,KAAKZ,aAAalD,OAAO,SAAAuD,MAAI;AAAI,aAAAA,KAAKM;KAAQ,EAAEzD;;AAEjD,UAAA,aAAR,WAAA;AACE,WAAO,KAAK8C,aAAawB,KAAK,SAAAnB,MAAI;AAAI,aAAAA,KAAK1B;KAAU;;AAEzD,SAAAmB;AAAA,EAlb6BF,qBAAS;ACLtC,IAAA,cAAA,SAAA,QAAA;AAAyCzB,EAAAA,WAAAA,cAAAA,MAAAA;AAAzC,WAAA4D,eAAA;;;AAsBC,MAAA,UAAAA,aAAA;AApBQ,UAAA,eAAP,WAAA;AACE,QAAM7G,UAAU,KAAKA;AACrB,QAAM8G,MAAM9G,QAAQb,aAAa,KAAK;AAEtC,QAAIa,QAAQ+G,UAAU;AACpB,UAAID,KAAK;AAEP,YAAI,CAAC9G,QAAQgH,cAAc;AACzB,eAAKC,eAAejH,OAAO;;AAE7B,eAAO;aACF;AAEL,aAAKgE,kBAAiB;;;AAG1B,SAAKkD,UAAS;AACdC,aAASnH,QAAQoH,aAAa,OAAON,GAAI;AACzC,WAAO;;AAnBKD,EAAAA,aAAAA,SAAS,CAAC,QAAQ,OAAO;AAqBzC,SAAAA;EAtByC3D,MAAM;ACD/C,IAAA,cAAA,SAAA,QAAA;AAAyCD,EAAAA,WAAAA,cAAAA,MAAAA;AAAzC,WAAAoE,eAAA;;;AAmBC,MAAA,UAAAA,aAAA;AAjBQ,UAAA,eAAP,WAAA;AACE,QAAMrH,UAAU,KAAKA;AAMrB,QAAIA,QAAQsH,cAAc,GAAG;AAC3B,aAAO;;AAET,QAAItH,QAAQuH,OAAO;AACjB,WAAKN,eAAejH,OAAO;AAC3B,aAAO;;AAET,SAAKkH,UAAS;AACd,WAAO;;AAhBKG,EAAAA,aAAAA,SAAS,CAAC,kBAAkB,OAAO;AAkBnD,SAAAA;EAnByCnE,MAAM;ACG/C,IAAA,UAAA,SAAA,QAAA;AAAsBD,EAAAA,WAAAA,UAAAA,MAAAA;AACpB,WAAAuE,SAAYrE,SAAqC;AAArC,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;WACVC,OAAAA,KAAAA,MAAAA,SAAAA;MACEyB,SAAS;QACP4C,KAAKZ;QACLa,OAAOL;;OAENlE,OAAO,CAAA,KACV;;AAEN,SAAAqE;AAAA,EAVsB5C,cAAc;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IGHvB+C,uBAA8C;EACzDC,YAAY;EACZC,cAAc;EACdC,YAAY;EACZC,aAAa;EACbC,gBAAgB;EAChBC,KAAK;EACLC,iBAAiB;EACjBC,gBAAgB;EAChBC,mBAAmB;EACnBC,YAAY;EACZC,qBAAqB;EACrBC,kBAAkB;EAClBC,0BAA0B;EAC1BC,sBAAsB;EACtBC,wBAAwB;EACxBC,QAAQ;EACRC,eAAe;EACfC,aAAa;EACbC,gBAAgB;EAChBC,mBAAmB;EACnBC,iBAAiB;AArBwC;IAwB/CC;CAAZ,SAAYA,gBAAAA;AACVA,EAAAA,eAAAA,eAAAA,UAAAA,IAAAA,CAAAA,IAAA;AACAA,EAAAA,eAAAA,eAAAA,iBAAAA,IAAAA,CAAAA,IAAA;AACD,GAHWA,kBAAAA,gBAAa,CAAA,EAAzB;IAIYC;CAAZ,SAAYA,cAAAA;AACVA,EAAAA,aAAAA,aAAAA,WAAAA,IAAAA,CAAAA,IAAA;AACAA,EAAAA,aAAAA,aAAAA,WAAAA,IAAAA,CAAAA,IAAA;AACAA,EAAAA,aAAAA,aAAAA,SAAAA,IAAAA,CAAAA,IAAA;AACD,GAJWA,gBAAAA,cAAW,CAAA,EAAvB;IAKYC;CAAZ,SAAYA,eAAAA;AACVA,EAAAA,cAAAA,cAAAA,aAAAA,IAAAA,CAAAA,IAAA;AACAA,EAAAA,cAAAA,cAAAA,cAAAA,IAAAA,CAAAA,IAAA;AACAA,EAAAA,cAAAA,cAAAA,SAAAA,IAAAA,CAAAA,IAAA;AACD,GAJWA,iBAAAA,eAAY,CAAA,EAAxB;IAMaC,sBAAsB;EACjCnB,KAAKgB,cAAcI;EACnBd,kBAAkBU,cAAcK;EAChCZ,wBAAwBO,cAAcK;EACtChB,qBAAqBW,cAAcK;EACnCX,QAAQM,cAAcK;EACtBT,aAAaI,cAAcI;EAC3BT,eAAeK,cAAcI;AAPI;IAUtBE,eAAe,CAC1B,gBACA,eACA,YACA,YACA,eACA,0BACA,qBAP0B;IAefC,aAAa;EACxBC,YAAY;IACVC,WAAW;IACXC,YAAY;IACZC,YAAY;IACZC,aAAa;EAJH;EAMZC,UAAU;IACRJ,WAAW;IACXC,YAAY;IACZC,YAAY;IACZC,aAAa;EAJL;AAPc;SC5DVE,QAAuCC,KAAAA;AACrD,SAAOC,OAAOC,KAAKF,GAAZ;AACR;AACD,SAAgBG,gBAAgBC,OAAmBC,SAAAA;AACjD,MAAMC,eAAeC,gBAAgBH,KAAD;AAEpC,SAAOI,MACLH,QAAQI,IAAI,SAACC,OAAD;AAAW,WAAAA,MAAMC;EAAM,CAAnC,GACAL,aAAaG,IAAI,SAACG,MAAD;AAAU,WAAAA,KAAKC;EAAQ,CAAxC,CAFS,EAGTC,WAAWC,OAAO,SAACC,IAAD;QAAEC,YAAS,GAAA,CAAA,GAAEC,YAAS,GAAA,CAAA;AACxC,QAAMC,YAAYd,QAAQY,SAAD,EAAYG;AACrC,QAAMR,OAAOR,MAAMc,SAAD;AAElB,WAAO,CAACN,KAAKhB,cAAc,CAACgB,KAAKf,eAC5BsB,UAAUvB,eAAegB,KAAKS,sBAC9BF,UAAUG,cAAcV,KAAKW;EACnC,CAVM,EAUJd,IAAI,SAACO,IAAD;QAAIE,YAAS,GAAA,CAAA;AAAM,WAAAd,MAAMc,SAAD;EAAW,CAVnC;AAWR;AACD,SAAgBX,gBAAgBH,OAAAA;AAC9B,SAAOA,MAAMW,OAAO,SAACH,MAAD;AAAU,WAAAA,KAAKC;EAAO,CAAnC;AACR;AACD,SAAgBW,mBAAmBpB,OAAAA;AACjC,SAAOG,gBAAgBH,KAAD,EAAQK,IAAI,SAACG,MAAD;AAAU,WAAAA,KAAKC;EAAQ,CAAlD;AACR;AACD,SAAgBY,UAASC,KAAAA;AACvB,SAAO,OAAOA,QAAQ;AACvB;AACD,SAAgBC,SAASD,KAAAA;AACvB,SAAO,OAAOA,QAAQ;AACvB;AACD,SAAgBE,SAASF,KAAAA;AACvB,SAAO,OAAOA,QAAQ;AACvB;AACD,SAAgBG,SAASC,KAAAA;AACvB,SAAOA,IAAIC,QAAQ,kBAAkB,SAACC,KAAKC,QAAN;AAAiB,WAAAA,OAAOC,YAAP;EAAoB,CAAnE;AACR;AACD,SAAgBC,IAAIC,KAAAA;AAClB,SAAOA,IAAIC,OAAO,SAACC,GAAGC,GAAJ;AAAU,WAAAD,IAAIC;EAAC,GAAE,CAA5B;AACR;AAED,SAAgBC,kBAAkB3B,SAAsB4B,iBAAAA;AACtD,MAAMC,iBAAyC,CAAA;AAC/C,MAAMC,aAAa9B,QAAQ8B;AAC3B,MAAMC,UAASD,WAAWC;AAE1B,WAASC,IAAI,GAAGA,IAAID,SAAQ,EAAEC,GAAG;AAC/B,QAAMC,YAAYH,WAAWE,CAAD;AACpB,QAAAE,OAAgBD,UAAS,MAAnBE,QAAUF,UAAS;AACjC,QAAIC,KAAKE,QAAQR,eAAb,MAAkC,IAAI;AACxC;IACD;AACDC,mBAAeb,SAASkB,KAAKhB,QAAQU,iBAAiB,EAA9B,CAAD,CAAT,IAAgDO;EAC/D;AAED,SAAON;AACR;AAGD,SAAgBQ,aAAaC,WAAAA;AAKzB,MAAAC,YAEED,UAAS,WADXE,gBACEF,UAAS;yBACFJ,OAAAA;AACT,QAAMO,eAAeD,cAAcN,KAAD,MAAWQ,cAAcC;AAE3D,QAAMC,aAAaxD,OAAOyD,yBAAyBN,WAAWL,KAA3C,KAAoD,CAAA;AAEvE,QAAMY,SAASF,WAAWG,OAAO,SAASA,MAAT;AAC/B,aAAO,KAAKC,QAAQd,KAAb;IACR;AACD,QAAMe,SAASL,WAAWM,OAAO,SAASA,IAAgBf,OAAzB;AAC/B,UAAMa,UAAU,KAAKA;AACrB,UAAMG,YAAYH,QAAQd,KAAD;AAEzB,UAAIiB,cAAchB,OAAO;AACvB;MACD;AACDa,cAAQd,KAAD,IAASC;AAEhB,UAAIM,gBAAgBO,QAAQI,wBAAwB;AAClD,aAAKC,eAAL;MACD;IACF;AACD,QAAMvB,aAAkC;MACtCwB,YAAY;MACZC,cAAc;MACdR,KAAKD;MACLI,KAAKD;IAJiC;AAMxC7D,WAAOoE,eAAejB,WAAWL,OAAMJ,UAAvC;;AA3BF,WAAWI,QAAQM,eAAnB;YAAWN,IAAAA;EA4BV;AACF;AAED,SAAgBuB,YAAYC,SAAAA;AAC1B,SAAO,SAAUnB,WAAgBoB,YAA1B;AACLD,YAAQE,QAAQ,SAAC1B,MAAD;AACd,UAAIA,QAAQK,WAAW;AACrB;MACD;AACDA,gBAAUL,IAAD,IAAS,WAAA;;AAAU,YAAA,OAAA,CAAA;iBAAA,KAAA,GAAA2B,KAAAA,UAAAA,QAAAA,MAAAA;AAAAC,eAAAA,EAAAA,IAAA,UAAA,EAAA;;AAC1B,YAAMC,UAAS5D,KAAA,KAAKwD,UAAL,GAAiBzB,IAAjB,EAAA,MAAA,IAA0B4B,IAA1B;AAGf,YAAIC,WAAW,KAAKJ,UAAL,GAAkB;AAC/B,iBAAO;QACR,OAAM;AACL,iBAAOI;QACR;MACF;IACF,CAdD;EAeD;AACF;AAED,SAAgBC,MAAMjC,SAAAA;AACpB,MAAMR,MAAgB,CAAA;AACtB,WAASS,IAAI,GAAGA,IAAID,SAAQ,EAAEC,GAAG;AAC/BT,QAAI0C,KAAKjC,CAAT;EACD;AACD,SAAOT;AACR;AAED,SAAgB2C,aAAa/B,OAAegC,YAAAA;AAC1C,SAAOC,KAAKC,IAAIlC,QAAQgC,WAAW,CAAD,GAAKA,WAAW,CAAD,IAAMhC,OAAO,CAAvD,IAA4D;AACpE;AAED,SAAgBmC,QAAQnC,OAAeoC,KAAaF,KAAAA;AAClD,SAAOD,KAAKG,IAAIF,KAAKD,KAAKC,IAAIlC,OAAOoC,GAAhB,CAAd;AACR;AAED,SAAgBC,SAASC,KAAaC,MAAAA;AACpC,MAAI,CAACA,MAAM;AACT,WAAOD;EACR;AACD,MAAME,cAAc,IAAID;AACxB,SAAON,KAAKQ,MAAMH,MAAMC,IAAjB,IAAyBC;AACjC;AAiBD,IAAaE,kBAAkBpB,YAAYqB,YAAD;;ACrIxC,WAAAC,eAAYC,WAAiChC,SAA7C;AAAA,QAAA,QAAA;AAA6C,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AATrC,SAAA,eAAe;AACf,SAAA,0BAA0B;AAIxB,SAAA,OAAiB;MAAEiC,OAAO;MAAGC,QAAQ;IAApB;AAEnB,SAAA,kBAAwC,CAAA;AA2FxC,SAAA,kBAAkB,WAAA;AACxBC,YAAKC,gBAAgB,CAAC;QACpBtF,QAAQqF,MAAKH;MADO,CAAD,CAArB;IAGD;AACO,SAAA,aAAa,SAACxF,SAAD;AACnB,UAAMwD,WAAUmC,MAAKE;AACrB,UAAML,aAAYG,MAAKH;AACvB,UAAMM,mBAAmBtC,SAAQuC;AACjC,UAAMC,kBAAkBxC,SAAQwC;AAEhCL,YAAKC,gBAAgB5F,QAAQI,IAAI,SAACC,OAAD;AAC/B,YAAMC,SAASD,MAAMC;AACrB,YAAMyF,UAAUzF,WAAWkF,aAAYM,mBAAmBE;AAC1D,YAAIC,QAASF,YAAY,eAAe1F,MAAM6F,gBAAgB7F,MAAM8F;AAGpE,YAAI,CAACF,OAAO;AACV,cAAMG,cAAc/F,MAAM+F;AAE1BH,kBAAQ,CAAC;YACP1G,YAAY6G,YAAYX;YACxBxE,WAAWmF,YAAYV;UAFhB,CAAD;QAIT;AACD,eAAO;;UAEL3E,MAAMkF,MAAM,CAAD,KAAOA;UAClB3F,QAAQD,MAAMC;QAHT;MAKR,CAnBoB,CAArB;IAoBD;AACO,SAAA,kBAAkB,SAACN,SAAD;AAClB,UAAAW,KAGFgF,MAAKE,UAFPQ,iBAAc,GAAA,gBACdC,oBAAiB,GAAA;AAGnB,UAAMC,iBAAiBZ,MAAKa;AAE5BD,qBAAe9B,KAAf,MAAA8B,gBAAuBvG,OAAvB;AACA2F,YAAKa,kBAAkBD,eAAe7F,OAAO,SAACL,OAAOoG,OAAR;AAC3C,eAAOF,eAAeG,YAAYrG,KAA3B,MAAsCoG;MAC9C,CAFsB;AAKvB,UAAI,CAACd,MAAKgB,2BAA2BL,qBAAqBD,gBAAgB;AACxEV,cAAKgB,0BAA0BC,OAAOC,WAAWlB,MAAKmB,WAAWR,iBAAlC;MAChC;AACD,UAAIX,MAAKoB,cAAc;AACrBC,qBAAarB,MAAKoB,YAAN;AACZpB,cAAKoB,eAAe;MACrB;AACDpB,YAAKoB,eAAeH,OAAOC,WAAWlB,MAAKmB,WAAWT,cAAlC;IACrB;AACO,SAAA,YAAY,WAAA;AAClBW,mBAAarB,MAAKoB,YAAN;AACZC,mBAAarB,MAAKgB,uBAAN;AAEZhB,YAAKgB,0BAA0B;AAC/BhB,YAAKoB,eAAe;AAEpB,UAAME,UAAUtB,MAAKa;AACrB,UAAMhB,aAAYG,MAAKH;AACvB,UAAI0B;AACJ,UAAMC,eAAeF,QAAQvG,OAAO,SAACL,OAAD;AAClC,YAAIA,MAAMC,WAAWkF,YAAW;AAC9B0B,2BAAiB7G;AACjB,iBAAO;QACR,OAAM;AACL,iBAAO;QACR;MACF,CAPoB;AAQrB,UAAM+G,mBAAmBD,aAAa5E,SAAS;AAC/C,UAAI8E,oBAAoB,CAAC,CAACH;AAE1B,UAAIG,mBAAmB;AACrB,YAAMC,iBAAiB3B,MAAKE,SAASyB;AACrC,YAAMC,WAAW5B,MAAK6B;AACtB,YAAMC,qBAAqBP,eAAenG;AAE1C,YAAI0G,oBAAoB;AAEtB9B,gBAAK+B,QAAQ;YACXjC,OAAOgC,mBAAmBlI;YAC1BmG,QAAQ+B,mBAAmBxG;UAFhB,CAAb;QAID,OAAM;AAEL0E,gBAAKgC,OAAL;QACD;AACD,YAAMH,OAAO7B,MAAK6B;AAClB,YAAMI,eAAeN,mBAAmB,SAASA,mBAAmB;AACpE,YAAMO,gBAAgBP,mBAAmB,SAASA,mBAAmB;AAErED,4BAAoB,CAACC,kBACfM,gBAAgBL,SAAS9B,UAAU+B,KAAK/B,SACxCoC,iBAAiBN,SAAS7B,WAAW8B,KAAK9B;MACjD;AACDC,YAAKa,kBAAkB,CAAA;AAEvB,UAAIa,qBAAqBD,kBAAkB;AACzCzB,cAAKmC,SAASC,QAAQ,UAAU;UAC9BV;UACAF;QAF8B,CAAhC;MAID;IACF;AAnMC,SAAKtB,WAALmC,UAAA;MACE3B,gBAAgB;MAChBC,mBAAmB;MACnB2B,mBAAmB;MACnBC,iBAAiB;MACjBZ,gBAAgB;MAChBvB,SAAS;MACTC,iBAAiB;OACdxC,OAAAA;AAGL,SAAKgC,YAAYpE,UAASoE,SAAD,IAAc2C,SAASC,cAA2B5C,SAApC,IAAkDA;AACzF,SAAK6C,MAAL;EACD;;AACM,UAAA,UAAP,WAAA;AACE,WAAO,KAAKb;EACb;AACM,UAAA,UAAP,SAAeA,MAAf;AACE,SAAKA,OAALQ,UAAA,CAAA,GAAiBR,IAAAA;EAClB;AACM,UAAA,oBAAP,WAAA;AACE,WAAO,CAAC,CAAC,KAAKc;EACf;AACM,UAAA,SAAP,WAAA;AACE,QAAM9C,YAAY,KAAKA;AAEvB,SAAKkC,QAAQ,KAAK7B,SAASE,YAAY,eAAe;MACpDN,OAAOD,UAAU+C;MACjB7C,QAAQF,UAAUgD;IAFkC,IAGlD;MACF/C,OAAOD,UAAUiD;MACjB/C,QAAQF,UAAUkD;IAFhB,CAHJ;EAOD;AACM,UAAA,kBAAP,SAAuBC,UAAvB;AACE,QAAMC,WAAW,KAAKN;AAEtB,QAAI,CAACM,UAAU;AACb;IACD;AACD,QAAMC,MAAM,KAAKhD,SAASG;AAE1B2C,aAASvE,QAAQ,SAAC5D,SAAD;AACf,UAAIA,SAAS;AACXoI,iBAASE,QAAQtI,SAAS;UACxBqI;QADwB,CAA1B;MAGD;IACF,CAND;EAOD;AACM,UAAA,oBAAP,SAAyBF,UAAzB;AACE,QAAMC,WAAW,KAAKN;AAEtB,QAAI,CAACM,UAAU;AACb;IACD;AACDD,aAASvE,QAAQ,SAAC5D,SAAD;AACf,UAAIA,SAAS;AACXoI,iBAASG,UAAUvI,OAAnB;MACD;IACF,CAJD;EAKD;AACM,UAAA,SAAP,SAAcwI,UAAd;AACE,SAAKlB,SAASmB,GAAG,UAAUD,QAA3B;AACA,WAAO;EACR;AACM,UAAA,UAAP,WAAA;;AACE,KAAA,KAAA,KAAKV,eAAL,QAAA,OAAA,SAAA,SAAA,GAAgBY,WAAAA;AAChB,QAAI,KAAKrD,SAASqC,iBAAiB;AACjCtB,aAAOuC,oBAAoB,UAAU,KAAKC,eAA1C;IACD;EACF;AACO,UAAA,QAAR,WAAA;AACE,QAAM5D,YAAY,KAAKA;AACvB,QAAMhC,UAAU,KAAKqC;AAErB,SAAKiC,WAAW,IAAIuB,sBAAJ;AAChB,QAAI7F,QAAQyE,qBAAqB,CAAC,CAACrB,OAAO0C,gBAAgB;AACxD,WAAKhB,YAAY,IAAI1B,OAAO0C,eAAe,KAAKC,UAA/B;AACjB,WAAKjB,UAAUQ,QAAQtD,WAAW;QAChCqD,KAAKrF,QAAQuC;MADmB,CAAlC;IAGD;AACD,QAAIvC,QAAQ0E,iBAAiB;AAC3BtB,aAAO4C,iBAAiB,UAAU,KAAKJ,eAAvC;IACD;AACD,SAAKzB,OAAL;EACD;AA6GH,SAAApC;AAAC,EAAA;;AC/MqCkE,EAAAA,WAAAA,mBAAAA,MAAAA;AAKpC,WAAAC,kBAAsBlE,WAAwBhC,SAA9C;AAAA,QAAA,QACEmG,OAAAA,KAAA,IAAA,KAAA;AADoBhE,UAAAA,YAAAH;AAmFdG,UAAAA,YAAY,SAACiE,GAAD;AAClBjE,YAAKoC,QAAQ,UAAU6B,CAAvB;IACD;AAnFCjE,UAAKnC,UAALwE,UAAA;MACE5I,YAAYyK,qBAAqBzK;MACjC0K,YAAYD,qBAAqBC;MACjCzD,gBAAgBwD,qBAAqBxD;MACrCC,mBAAmBuD,qBAAqBvD;MACxC2B,mBAAmB4B,qBAAqB5B;OACrCzE,OAAAA;AAGLmC,UAAK0C,MAAL;;EACD;;AACM,UAAA,SAAP,WAAA;AACE,QAAM7C,YAAY,KAAKA;AAEvB,SAAKkC,QAAQ;MACXjC,OAAOD,UAAUiD;MACjB/C,QAAQF,UAAUkD;IAFP,CAAb;EAID;AACM,UAAA,oBAAP,WAAA;AACE,WAAO,KAAKqB,SAASC,kBAAd;EACR;AACM,UAAA,UAAP,WAAA;AACE,WAAO,KAAKD,SAASE,QAAd;EACR;AACM,UAAA,kBAAP,SAAuBtB,UAAvB;AACE,SAAKoB,SAASG,gBAAgBvB,QAA9B;EACD;AACM,UAAA,oBAAP,SAAyBA,UAAzB;AACE,SAAKoB,SAASI,kBAAkBxB,QAAhC;EACD;AACM,UAAA,UAAP,SAAenB,MAAf;AACE,SAAKuC,SAASrC,QAAQF,IAAtB;EACD;AACM,UAAA,gBAAP,WAAA;AACE,WAAO,KAAKyC,QAAL,EAAe,KAAKG,OAAO7K,UAA3B;EACR;AACM,UAAA,iBAAP,WAAA;AACE,WAAO,KAAK0K,QAAL,EAAe,KAAKG,OAAO5K,WAA3B;EACR;AACM,UAAA,YAAP,WAAA;AACE,WAAO;MAAEgI,MAAM,KAAKuC,SAASE,QAAd;IAAR;EACR;AACM,UAAA,YAAP,SAAiBI,QAAjB;AACE,SAAK3C,QAAQ2C,OAAO7C,IAApB;AACA,SAAK8C,eAAe,KAAKC,eAAL,CAApB;EACD;AACM,UAAA,iBAAP,SAAsBxJ,MAAtB;;AACE,QAAMyJ,WAAW,KAAKhH,QAAQpE,aAAa,UAAU;AACrD,SAAKsI,QAALM,UAAAA,UAAA,CAAA,GACK,KAAKiC,QAAL,CAAA,IAAA,KAAA,CAAA,GAAA,GACFO,QAAAA,IAAWzJ,MAAAA,GAAAA,CAFd;AAIA,SAAKyE,UAAUiF,MAAMD,QAArB,IAAoCzJ,OAAI;EACzC;AACM,UAAA,UAAP,SAAeyC,SAAf;AAAe,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AACb,SAAKuG,SAASW,QAAd;AAEA,QAAI,CAAClH,QAAQmH,YAAY;AACvB,WAAKnF,UAAUiF,MAAMG,UAAU,KAAKC;IACrC;EACF;AACO,UAAA,QAAR,WAAA;AACE,QAAMrF,YAAY,KAAKA;AACvB,QAAMiF,QAAQ7D,OAAOkE,iBAAiBtF,SAAxB;AAEd,SAAKqF,aAAarF,UAAUiF,MAAMG;AAElC,QAAIH,MAAMM,aAAa,UAAU;AAC/BvF,gBAAUiF,MAAMM,WAAW;IAC5B;AACD,QAAMvH,UAAU,KAAKA;AAErB,SAAKuG,WAAW,IAAIxE,cAAcC,WAAW;MAC3C0C,iBAAiB1E,QAAQsG;MACzB7B,mBAAmBzE,QAAQyE;MAC3B5B,gBAAgB7C,QAAQ6C;MACxBC,mBAAmB9C,QAAQ8C;MAC3BgB,gBAAgB9D,QAAQyE,oBAAoB,KAAKmC,OAAO7K,aAAa;IAL1B,CAA7B,EAMbyL,OAAO,KAAKlE,SANC;EAOjB;AAIDlH,SAAAA,eAAA,SAAA,UAAA;SAAA,WAAA;AACE,aAAOT,WAAW,KAAKqE,QAAQpE,aAAa,eAAe,UAA1C;IAClB;;;GAFD;AAGF,SAAAsK;AA9FA,EAAsCL,qBAAAA;;ACMpC,WAAA4B,cAAYzH,SAAZ;AAJU,SAAA,eAAkD,CAAA;AAClD,SAAA,gBAAgB;AAChB,SAAA,eAAe;AAGvB,SAAKA,UAALwE,UAAA;MACE5F,iBAAiByH,qBAAqBzH;MACtC8I,cAAcrB,qBAAqBqB;MACnC9L,YAAYyK,qBAAqBzK;MACjC+L,YAAYtB,qBAAqBsB;MACjCC,aAAavB,qBAAqBuB;MAClCC,gBAAgBxB,qBAAqBwB;MACrCC,gBAAgBzB,qBAAqByB;OAClC9H,OAAAA;AAEL,SAAK6E,MAAL;EACD;;AACM,UAAA,SAAP,WAAA;AACE,SAAKkD,eAAe,CAAA;EACrB;AACM,UAAA,cAAP,SAAmBxL,OAAnB;AAAA,QAAA,QAAA;AACEA,UAAMqE,QAAQ,SAAC7D,MAAD;AACZoF,YAAK6F,YAAYjL,IAAjB;IACD,CAFD;EAGD;AACM,UAAA,gBAAP,WAAA;AACE,WAAO,KAAKkL,cAAc,KAAKjI,QAAQpE,aAAa,WAAW,OAAxD;EACR;AACM,UAAA,mBAAP,SAAwBoI,MAAxB;AACE,SAAKiE,gBAAgBjE;EACtB;AACM,UAAA,uBAAP,SAA4BzH,OAAmB2L,YAA/C;AAAA,QAAA,QAAA;AACE,SAAKC,YAAY5L,KAAjB;AAEA,QAAM6L,eAAe7L,MAAM8L,KAAK,SAACtL,MAAD;AAAU,aAAAA,KAAK+B,WAAWwJ;IAAS,CAA9C;AAGrB,QAAI,KAAKtI,QAAQ4H,eAAeQ,cAAc;AAC5C,UAAMG,cAAchM,MAAM8L,KAAK,SAACtL,MAAD;AAAU,eAAAA,KAAKyL,gBAAgBC,aAAaC;MAAO,CAA9D;AAEpB,UAAIH,aAAa;AACfL,mBAAWtH,QAAQ,SAAC7D,MAAD;AACjB,cAAIR,MAAM6C,QAAQrC,IAAd,MAAwB,IAAI;AAC9BoF,kBAAKwG,WAAW5L,MAAM,IAAtB;UACD;QACF,CAJD;MAKD;IACF;EACF;AACM,UAAA,cAAP,SAAmBR,OAAnB;AAAA,QAAA,QAAA;AACEA,UAAMqE,QAAQ,SAAC7D,MAAD;AACZoF,YAAKwG,WAAW5L,IAAhB;IACD,CAFD;EAGD;AACM,UAAA,YAAP,WAAA;AACE,WAAO;MACLgL,cAAc,KAAKA;IADd;EAGR;AACM,UAAA,YAAP,SAAiBlB,QAAjB;AACE,SAAKkB,eAAelB,OAAOkB;EAC5B;AACO,UAAA,QAAR,WAAA;AACU,QAAAJ,aAAe,KAAK3H,QAAL;AAEvB,QAAI4I,iBAAiB;AACrB,QAAIC,gBAAgB;AAEpB,QAAIlB,eAAe,MAAM;AACvBiB,uBAAiB;AACjBC,sBAAgB;IACjB,WAAUlB,YAAY;AACrB,UAAIA,WAAWvI,QAAQ,UAAnB,IAAiC,IAAI;AACvCyJ,wBAAgB;MACjB;AACD,UAAIlB,WAAWvI,QAAQ,MAAnB,IAA6B,IAAI;AACnCwJ,yBAAiB;MAClB;IACF;AAED,SAAKE,eAAeD;AACpB,SAAKE,gBAAgBH;EACtB;AACM,UAAA,aAAP,SAAkB7L,MAAgBiM,gBAAlC;;AACQ,QAAAC,KAAkD,KAAKjJ,SAArD4H,cAAW,GAAA,aAAEC,iBAAc,GAAA,gBAAEC,iBAAc,GAAA;AACnD,QAAMC,eAAe,KAAKA;AAClB,QAAAmB,UAAqBnM,KAAI,SAAhBC,UAAYD,KAAI;AACjC,QAAMoM,YAAYpM,KAAKyL,gBAAgBC,aAAaW;AACpD,QAAMC,aAAaH,WAAWA,QAAQjH,SAASiH,QAAQhH;AACvD,QAAI8B;AAEJ,QAAMlF,aAAqC9B,UACvC2B,kBAAkB3B,SAAS,KAAKgD,QAAQpB,eAAvB,IACjB7B,KAAK+B;AACT,QAAMwJ,aAAY,KAAAxJ,WAAWwJ,eAAX,QAAA,OAAA,SAAA,KAAwB;AAC1C,QAAMgB,iBAAiBxK,WAAWyK;AAElC,QAAIjB,cAAc,MAAMP,aAAaO,SAAD,GAAa;AAC/CtE,aAAO+D,aAAaO,SAAD;IACpB,WAAUV,eAAe,CAAC0B,kBAAkB,CAAChB,aAAaP,aAAa,EAAD,GAAM;AAC3E/D,aAAO+D,aAAa,EAAD;IACpB,WAAUF,kBAAkBwB,cAAc,CAACF,WAAW;AACrDnF,aAAOkF;IACR,WAAUF,kBAAkB,CAAChM,SAAS;AACrC;IACD,OAAM;AACLgH,aAAO;QACLwF,MAAMxM,QAAQyM;QACdC,KAAK1M,QAAQ2M;QACb1H,OAAO;QACPC,QAAQ;MAJH;AAMP,UAAI4F,gBAAgB;AAClB9D,aAAK/B,QAAQjF,QAAQ+H;AACrBf,aAAK9B,SAASlF,QAAQgI;MACvB,OAAM;AACL,YAAM4E,aAAa5M,QAAQ6M,sBAAR;AAEnB7F,aAAK/B,QAAQ2H,WAAW3H;AACxB+B,aAAK9B,SAAS0H,WAAW1H;MAC1B;IACF;AACDnF,SAAK+B,aAAaA;AAClB/B,SAAK+M,iBAAiB;AAEtB,QAAI,CAAC/M,KAAKgN,iBAAiB,CAACV,YAAY;AACtCtM,WAAKmM,UAAL1E,UAAA,CAAA,GAAoBR,IAAAA;IACrB;AACDjH,SAAKiH,OAALQ,UAAA,CAAA,GAAiBR,IAAAA;AAGjB,QAAI,CAACgF,gBAAgB;AACnB,UAAIjM,KAAKC,SAAS;AAChBD,aAAKiN,aAAaC,YAAYC;MAC/B;AAED,UAAInN,KAAKyL,gBAAgBC,aAAa0B,aAAa;AACjDpN,aAAKyL,cAAcC,aAAaC;AAChC3L,aAAKgN,gBAAgB;MACtB;AACD,UAAI,CAACZ,aAAa,CAACG,kBAAkB,CAACvB,aAAaO,SAAD,GAAa;AAC7DP,qBAAaO,SAAD,IAAZ9D,UAAA,CAAA,GAA+BR,IAAAA;MAChC;IACF;AAED,WAAOA;EACR;AACO,UAAA,cAAR,SAAoBjH,MAApB;AACE,QAAMC,UAAUD,KAAKC;AACrB,QAAMoN,UAAUrN,KAAKqN;AAErB,QAAI,CAACpN,WAAW,CAACoN,SAAS;AACxB;IACD;AAEK,QAAAjN,KAGF,KAAK6C,SAFPpE,aAAU,GAAA,YACV8L,eAAY,GAAA;AAEd,QAAMmB,gBAAgB,KAAKC;AAC3B,QAAMF,iBAAiB,KAAKG;AAC5B,QAAMsB,WAAqB,CAAC,qBAAD;AACrB,QAAApB,KAGFtN,WAAWC,aAAa,eAAe,UAA7B,GAFAoL,WAAQ,GAAA,YACTsD,UAAO,GAAA;AAEpB,QAAMvO,aAAa,KAAKwO,cAAL;AACnB,QAAIlO,OAAOH,QAAQkO,OAAD;AAClB,QAAMI,oBAAoBnO,KAAK0C,SAAS;AAExC,QAAI2I,cAAc;AAChBrL,aAAOA,KAAKa,OAAO,SAACuN,KAAD;AAAS,eAAAA,QAAQ,SAASA,QAAQ;MAAM,CAApD;AAEPJ,eAASpJ,KAAK,iBACV,gBAAamJ,QAAQZ,QAAQ,KAA7B,UAAqCY,QAAQV,OAAO,KAApD,OADJ;IAGD;AACDW,aAASpJ,KAAT,MAAAoJ,UAAiBhO,KAAKO,IAAI,SAACsC,MAAD;AACxB,UAAMC,QAAQiL,QAAQlL,IAAD;AAErB,UACGA,SAAS8H,YAAY4B,kBACrB1J,SAASoL,WAAWzB,eACrB;AACA,eAAU3J,OAAI,OAAMC,QAAQpD,aAAc,MAAhC;MACX;AACD,aAAUmD,OAAI,OAAKC,QAAT;IACX,CAVgB,CAAjB;AAYA,QAAIqL,mBAAmB;AACrBxN,cAAQiK,MAAMG,WAAWiD,SAASK,KAAK,EAAd;IAC1B;EACF;AACH,SAAAjD;AAAC,EAAA;AC9KD,IAAA;AAoBE,WAAAkD,UACY/O,YACVgP,YAFF;AAEE,QAAA,eAAA,QAAA;AAAAA,mBAAAA,CAAAA;;;AADU,SAAA,aAAAhP;AAhBL,SAAA,aAAa;AAKb,SAAA,iBAAiB;AACjB,SAAA,gBAAgB;AAChB,SAAA,qBAAqB;AACrB,SAAA,sBAAsB;AAW3B,QAAMoB,UAAU4N,WAAW5N;AAC3B,QAAM6J,SAAMrC,UAAA;MACViG,KAAK;MACLxH,OAAO;MACPiG,SAAS;QAAEM,MAAM;QAAGE,KAAK;QAAGzH,OAAO;QAAGC,QAAQ;MAArC;MACT8B,MAAM;QAAEwF,MAAM;QAAGE,KAAK;QAAGzH,OAAO;QAAGC,QAAQ;MAArC;MACNkI,SAAS,CAAA;MACTtL,YAAY,CAAA;MACZ+L,MAAM,CAAA;MACNd,eAAe;MACfC,YAAYC,YAAYa;MACxBtC,aAAaC,aAAa0B;MAC1BnN,SAASA,WAAW;MACpBqK,aAAY,KAAArK,YAAO,QAAPA,YAAO,SAAP,SAAAA,QAASiK,MAAMG,aAAf,QAAA,OAAA,SAAA,KAA0B;MACtC2D,UAAU,CAAA;OACPH,UAAAA;AAGL,aAAW1L,QAAQ2H,QAAQ;AACzB,WAAK3H,IAAL,IAAa2H,OAAO3H,IAAD;IACpB;EACF;;AAMD9C,SAAAA,eAAA,SAAA,iBAAA;;;;;;SAAA,WAAA;AACE,UAAM8C,OAAO,KAAK0H,OAAO7K;AAEzB,aAAO,KAAKmN,QAAQhK,IAAb,KAAsB,KAAK8E,KAAK9E,IAAV;IAC9B;;;GAJD;AAUA9C,SAAAA,eAAA,SAAA,kBAAA;;;;;;SAAA,WAAA;AACE,UAAM8C,OAAO,KAAK0H,OAAO5K;AAEzB,aAAO,KAAKkN,QAAQhK,IAAb,KAAsB,KAAK8E,KAAK9E,IAAV;IAC9B;;;GAJD;AAUA9C,SAAAA,eAAA,SAAA,cAAA;;;;;;SAAA,WAAA;AACE,aAAO,KAAK4H,KAAK,KAAK4C,OAAO7K,UAAtB;IACR;;;GAFD;AAQAK,SAAAA,eAAA,SAAA,eAAA;;;;;;SAAA,WAAA;AACE,aAAO,KAAK4H,KAAK,KAAK4C,OAAO5K,WAAtB;IACR;;;GAFD;AAQAI,SAAAA,eAAA,SAAA,iBAAA;;;;;;SAAA,WAAA;AACE,aAAO,KAAKgO,QAAQ,KAAKxD,OAAO7K,UAAzB;IACR;SA+BD,SAAyBA,YAAzB;AACE,WAAKqO,QAAQ,KAAKxD,OAAO7K,UAAzB,IAAuCA;IACxC;;;GAnCD;AAQAK,SAAAA,eAAA,SAAA,kBAAA;;;;;;SAAA,WAAA;AACE,aAAO,KAAKgO,QAAQ,KAAKxD,OAAO5K,WAAzB;IACR;SA0BD,SAA0BA,aAA1B;AACE,WAAKoO,QAAQ,KAAKxD,OAAO5K,WAAzB,IAAwCA;IACzC;;;GA9BD;AAQAI,SAAAA,eAAA,SAAA,gBAAA;;;;;;SAAA,WAAA;AACE,aAAO,KAAKgO,QAAQ,KAAKxD,OAAO/K,SAAzB;IACR;SASD,SAAwBA,WAAxB;AACE,WAAKuO,QAAQ,KAAKxD,OAAO/K,SAAzB,IAAsCA;IACvC;;;GAbD;AAQAO,SAAAA,eAAA,SAAA,iBAAA;;;;;;SAAA,WAAA;AACE,aAAO,KAAKgO,QAAQ,KAAKxD,OAAO9K,UAAzB;IACR;SAID,SAAyBA,YAAzB;AACE,WAAKsO,QAAQ,KAAKxD,OAAO9K,UAAzB,IAAuCA;IACxC;;;GARD;AAoBAM,SAAAA,eAAA,SAAA,sBAAA;;;;;;SAAA,WAAA;AACE,UAAM8C,OAAO,KAAK0H,OAAO7K;AAEzB,aAAO,KAAKqO,QAAQlL,IAAb,KAAsB,KAAK8E,KAAK9E,IAAV,KAAmB,KAAKgK,QAAQhK,IAAb;IACjD;;;GAJD;AAUA9C,SAAAA,eAAA,SAAA,uBAAA;;;;;;SAAA,WAAA;AACE,UAAM8C,OAAO,KAAK0H,OAAO5K;AAEzB,aAAO,KAAKoO,QAAQlL,IAAb,KAAsB,KAAK8E,KAAK9E,IAAV,KAAmB,KAAKgK,QAAQhK,IAAb;IACjD;;;GAJD;AAUA9C,SAAAA,eAAA,SAAA,qBAAA;;;;;;SAAA,WAAA;;AACE,UAAM8C,OAAO,KAAK0H,OAAO/K;AAEzB,cAAO,KAAA,KAAKuO,QAAQlL,IAAb,OAAA,QAAA,OAAA,SAAA,KAAsB,KAAK8E,KAAK9E,IAAV;IAC9B;;;GAJD;AAUA9C,SAAAA,eAAA,SAAA,sBAAA;;;;;;SAAA,WAAA;;AACE,UAAM8C,OAAO,KAAK0H,OAAO9K;AAEzB,cAAO,KAAA,KAAKsO,QAAQlL,IAAb,OAAA,QAAA,OAAA,SAAA,KAAsB,KAAK8E,KAAK9E,IAAV;IAC9B;;;GAJD;AAUO,UAAA,iBAAP,SAAsB8L,UAAtB;AACE,QAAMC,QAAQtP,WAAW,KAAKC,aAAa,eAAe,UAAlC;AAExB,QAAMoI,OAAgB,CAAA;AAEtB,aAAW9E,QAAQ8L,UAAU;AAC3BhH,WAAKiH,MAAM/L,IAAD,CAAN,IAAgB8L,SAAS9L,IAAD;IAC7B;AACD,SAAKkL,UAAUpG;EAChB;AAKM,UAAA,YAAP,WAAA;AACE,WAAO;MACLf,OAAO,KAAKA;MACZ+G,YAAY,KAAKA;MACjBxB,aAAa,KAAKA;MAClB1J,YAAY,KAAKA;MACjBuI,YAAY,KAAKA;MACjB0C,eAAe,KAAKA;MACpB/M,SAAS;MACTyN,KAAK,KAAKA;MACVvB,SAAS,KAAKA;MACdlF,MAAM,KAAKA;MACXoG,SAAS,KAAKA;MACdW,UAAU,KAAKA;MACfF,MAAM,KAAKA;IAbN;EAeR;AAKM,UAAA,qBAAP,WAAA;AACE,QAAMhE,SAAkC;MACtCqC,SAAS,KAAKA;MACdlF,MAAM,KAAKA;MACXoG,SAAS,KAAKA;MACdtL,YAAY,KAAKA;MACjBiM,UAAU,KAAKA;IALuB;AAQlC,QAAA5N,KAMF,MALFsN,MAAG,GAAA,KACHT,aAAU,GAAA,YACVxB,cAAW,GAAA,aACXuB,gBAAa,GAAA,eACb1C,aAAU,GAAA;AAEZ,QAAI,OAAOoD,QAAQ,aAAa;AAC9B5D,aAAO4D,MAAMA;IACd;AACD,QAAIT,eAAeC,YAAYa,WAAW;AACxCjE,aAAOmD,aAAaA;IACrB;AACD,QAAIxB,gBAAgBC,aAAa0B,aAAa;AAC5CtD,aAAO2B,cAAcA;IACtB;AACD,QAAIuB,eAAe;AACjBlD,aAAOkD,gBAAgB;IACxB;AACD,QAAI1C,YAAY;AACdR,aAAOQ,aAAaA;IACrB;AACD,WAAOR;EACR;AACDzK,SAAAA,eAAA,SAAA,UAAA;SAAA,WAAA;AACE,aAAO,KAAKR,aAAaD,WAAWC,aAAaD,WAAWM;IAC7D;;;GAFD;AAGF,SAAA0O;AAAC,EAAA;ACvQD,IAAA;AAAuE1E,EAAAA,WAAAA,OAAAA,MAAAA;AA6BrE,WAAAiF,MAAYC,kBAAwCnL,SAApD;AAAoD,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AAApD,QAAA,QACEmG,OAAAA,KAAA,IAAA,KAAA;AAvBQhE,UAAAA,QAAoB,CAAA;AACpBA,UAAAA,WAAyB;MACjCiJ,OAAO,CAAA;MACPC,KAAK,CAAA;IAF4B;AAI3BlJ,UAAAA,eAAe;AAwffA,UAAAA,YAAY,SAACiE,GAAD;AAClB,UAAIA,EAAEvC,mBAAmB;AACvB1B,cAAKmJ,aAAa;UAChBC,WAAW;QADK,GAEf,IAFH;MAGD,OAAM;AACL,YAAMC,eAAelP,gBAAgB6F,MAAK5F,OAAO6J,EAAEzC,YAAf;AAEpC,YAAI6H,aAAazM,SAAS,GAAG;AAC3BoD,gBAAKgG,YAAYqD,YAAjB;QACD;MACF;IACF;AAhfCrJ,UAAKnC,UAALwE,UAAAA,UAAA,CAAA,GACOrC,MAAKsJ,YACPC,cAAAA,GACA1L,OAAAA;AAGLmC,UAAKgJ,mBAAmBvN,UAASuN,gBAAD,IAC5BxG,SAASC,cAA2BuG,gBAApC,IACAA;AAEE,QAAAhO,KAaFgF,MAAKnC,SAZP4H,cAAW,GAAA,aACXC,iBAAc,GAAA,gBACdH,eAAY,GAAA,cACZ9L,aAAU,GAAA,YACV+L,aAAU,GAAA,YACVgE,2BAAwB,GAAA,0BACxBC,uBAAoB,GAAA,sBACpB/I,iBAAc,GAAA,gBACdC,oBAAiB,GAAA,mBACjBwD,aAAU,GAAA,YACVwB,iBAAc,GAAA,gBACdrD,oBAAiB,GAAA;AAInBtC,UAAK0J,mBAAmBF,4BACnB,IAAIzF,iBAAiB/D,MAAKgJ,kBAAkB;MAC7CvP;MACAiH;MACAC;MACAwD;MACA7B;IAL6C,CAA5C,EAMAgB,GAAG,UAAUtD,MAAKmB,SANlB;AAOLnB,UAAK2J,eAAeF,wBACf,IAAInE,aAAa;MAClBC;MACAE;MACAC;MACAF;MACAG;IALkB,CAAjB;AAQL3F,UAAK0C,MAAL;;EACD;;WA5EYqG;AAiFN,UAAA,sBAAP,WAAA;AACE,WAAO,KAAKC;EACb;AAKM,UAAA,WAAP,WAAA;AACE,WAAO,KAAK5O;EACb;AAKM,UAAA,cAAP,WAAA;AACE,WAAO,CAAA,EAAGwP,MAAMC,KAAK,KAAKb,iBAAiBhG,QAApC;EACR;AAMM,UAAA,WAAP,SAAgB5I,OAAhB;AACEA,UAAMqE,QAAQ,SAAC7D,MAAMiC,GAAP;AACZjC,WAAKkG,QAAQjE;IACd,CAFD;AAGA,QAAMgB,UAAU,KAAKA;AAErB,QAAIA,QAAQyE,qBAAqBzE,QAAQ0G,iBAAiB;AACxD,UAAMmF,mBAAmB,KAAKA;AAE9BA,uBAAiBlF,kBAAkBhJ,mBAAmB,KAAKpB,KAAN,CAArD;AACAsP,uBAAiBnF,gBAAgB/I,mBAAmBpB,KAAD,CAAnD;IACD;AACD,SAAKA,QAAQA;AACb,WAAO;EACR;AAKM,UAAA,yBAAP,WAAA;AACE,WAAO,KAAKsP,iBAAiBtB,cAAtB;EACR;AAKM,UAAA,cAAP,WAAA;AACE,WAAO,KAAK0B;EACb;AAMM,UAAA,cAAP,SAAmBA,UAAnB;AACE,SAAKA,WAAWA;AAChB,WAAO;EACR;AAMM,UAAA,eAAP,SAAoBjM,SAApB;AAAoB,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AAClB,QAAMzD,QAAQ,KAAKA;AACX,QAAAX,aAAe,KAAKoE,QAAL;AACvB,QAAMkM,YAA0B,KAAKC,YAAL;AAC1B,QAAAhP,KAA0CR,MAAK,KAAKJ,MAAMK,IAAI,SAACG,MAAD;AAAU,aAAAA,KAAKC;IAAQ,CAAtC,GAAyCkP,SAA1C,GAA5CE,QAAK,GAAA,OAAEnP,aAAU,GAAA,YAAEoP,UAAO,GAAA,SAAEC,UAAO,GAAA;AAE3C,QAAMC,YAAwB,CAAA;AAE9BtP,eAAW2D,QAAQ,SAACzD,KAAD;UAAEqP,cAAWrP,IAAA,CAAA,GAAEsP,aAAUtP,IAAA,CAAA;AAC1CoP,gBAAUE,UAAD,IAAelQ,MAAMiQ,WAAD;IAC9B,CAFD;AAGAJ,UAAMxL,QAAQ,SAACqC,OAAD;AACZsJ,gBAAUtJ,KAAD,IAAU,IAAI0H,SAAS/O,YAAa;QAC3CoB,SAASkP,UAASjJ,KAAD;MAD0B,CAA1B;IAGpB,CAJD;AAMA,SAAKyJ,SAASH,SAAd;AAEA,QAAIH,MAAMrN,UAAUuN,QAAQvN,UAAUsN,QAAQtN,QAAQ;AACpD,WAAK4N,YAAY3M,OAAjB;IACD;AACD,WAAO;EACR;AAOM,UAAA,cAAP,SAAmBzD,OAAgCyD,SAAnD;AAAmB,QAAA,UAAA,QAAA;AAAAzD,cAAoB,KAAKA;;AAAO,QAAA,YAAA,QAAA;AAAAyD,gBAAAA,CAAAA;;AACjD,QAAM4M,eAAe5M,QAAQ4M;AAE7BrQ,UAAMqE,QAAQ,SAAC7D,MAAD;AACZ,UAAI6P,cAAc;AAChB,YAAM1D,UAAUnM,KAAKmM;AAErBA,gBAAQjH,QAAQ;AAChBiH,gBAAQhH,SAAS;MAClB;AACDnF,WAAKyL,cAAcC,aAAa0B;IACjC,CARD;AASA,SAAK0C,WAAW7M,OAAhB;AACA,WAAO;EACR;AAgBM,UAAA,cAAP,SAAmBA,SAAnB;AAAmB,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AACjB,SAAKsL,aAAatL,OAAlB;AACA,WAAO;EACR;AAMM,UAAA,YAAP,SAAiB8M,UAAjB;AACE,WAAO;MACLb,UAAU,KAAKA;MACf1P,OAAO,KAAKA,MAAMK,IAAI,SAACG,MAAD;AAAU,eAAA+P,WAAW/P,KAAKgQ,mBAAL,IAA4BhQ,KAAKiQ,UAAL;MAAgB,CAAhF;MACPnB,kBAAkB,KAAKA,iBAAiBmB,UAAtB;MAClBlB,cAAc,KAAKA,aAAakB,UAAlB;IAJT;EAMR;AAKM,UAAA,YAAP,SAAiBnG,QAAjB;AAAA,QAAA,QAAA;AACE,QAAMjL,aAAa,KAAKoE,QAAQpE;AAChC,QAAMiQ,mBAAmB,KAAKA;AAC9B,QAAMoB,iBAAiBpB,iBAAiBtB,cAAjB;AACvB,QAAMpF,WAAW,KAAKgH,YAAL;AAEjB,SAAKL,aAAaoB,UAAUrG,OAAOiF,YAAnC;AACAD,qBAAiBqB,UAAUrG,OAAOgF,gBAAlC;AACA,SAAKI,WAAWpF,OAAOoF;AACvB,SAAK1P,QAAQsK,OAAOtK,MAAMK,IAAI,SAACG,MAAMiC,GAAP;AAAa,aAAA,IAAI2L,SAAS/O,YAAb4I,UAAAA,UAAA,CAAA,GACtCzH,IAAAA,GAAAA;QACHC,SAASmI,SAASnG,CAAD;QAFwB;IAGzC,CAHW;AAKb,SAAK8M,aAAaa,YAAY,KAAKpQ,KAAnC;AAEA,QAAI0Q,mBAAmBpB,iBAAiBtB,cAAjB,GAAkC;AACvD,WAAKoC,YAAY;QACfpB,WAAW;MADI,CAAjB;IAGD,OAAM;AACLnI,aAAOC,WAAW,WAAA;AAChBlB,cAAKgL,gBAAgB;UACnBC,WAAWjL,MAAKkL;UAChBC,SAASnL,MAAK5F;UACdkH,SAAS,CAAA;UACT8J,UAAU;QAJS,CAArB;MAMD,CAPD;IAQD;AACD,WAAO;EACR;AAOM,UAAA,yBAAP,SAA8BhR,OAA9B;AAA8B,QAAA,UAAA,QAAA;AAAAA,cAAoB,KAAKA;;AACrD,WAAO,KAAKyD,QAAQwN,eAAgB,KAAKC,uBAAL;EACrC;AAOM,UAAA,2BAAP,SAAgClR,OAAhC;AAAgC,QAAA,UAAA,QAAA;AAAAA,cAAoB,KAAKA;;AACvD,WAAO,KAAKyD,QAAQ0N,iBAAkB;EACvC;AAOM,UAAA,UAAP,SAAe1N,SAAf;;AAAe,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AAEX,QAAAiJ,KACEjJ,QAAO,YADTmH,aAAU,OAAA,SAAG,KAAKnH,QAAQ2N,sBAAAA;AAE5B,SAAK9B,iBAAiB3E,QAAQ;MAC5BC;IAD4B,CAA9B;AAIA,QAAI,CAACA,YAAY;AACf,WAAK5K,MAAMqE,QAAQ,SAACzD,KAAD;YAAGH,UAAOG,IAAA,SAAEkK,aAAUlK,IAAA;AACvC,YAAIH,SAAS;AACXA,kBAAQiK,MAAMG,UAAUC;QACzB;MACF,CAJD;IAKD;AAED,KAAA,KAAA,KAAKuG,SAAL,QAAA,OAAA,SAAA,SAAA,GAAU1G,QAAAA;EACX;AACS,UAAA,eAAV,WAAA;AACE,WAAO,KAAK2G,mBAAmB,QAAxB;EACR;AACS,UAAA,gBAAV,WAAA;AACE,WAAO,KAAKA,mBAAmB,SAAxB;EACR;AACS,UAAA,aAAV,SAAqB7N,SAArB;AAAA,QAAA,QAAA;;AAAqB,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AAEnB,QAAMzD,QAAQ,KAAKA;AACnB,QAAMkH,UAAUlH,MAAMW,OAAO,SAACH,MAAD;;AAAU,eAAAI,MAAAJ,KAAKC,aAAL,QAAAG,QAAA,SAAA,SAAAA,IAAc2Q,eAAc/Q,KAAKyL,gBAAgBC,aAAaC;IAAO,CAA5F;AAChB,QAAM4E,UAAU/Q,MAAMW,OAAO,SAACH,MAAD;;AAAU,eAAAI,MAAAJ,KAAKC,aAAL,QAAAG,QAAA,SAAA,SAAAA,IAAc2Q,eAAc/Q,KAAKiN,eAAeC,YAAYC;IAAO,CAA1F;AAChB,QAAM6D,cAA0B,CAAA;AAEhCT,YAAQpQ,OAAO,SAACH,MAAD;AACb,UAAIA,KAAKiR,eAAe;AACtB,eAAO;MACR,OAAM;AACL,YAAMhR,UAAUD,KAAKC;AACrB,YAAMiR,qBAAqBC,WAAW5G,iBAAiBtK,OAAD,EAAUiR,kBAA3B;AAErC,YAAIA,qBAAqB,GAAG;AAC1BlR,eAAKiR,gBAAgB;AACrBjR,eAAKkR,qBAAqBjR,QAAQiK,MAAMgH;AACxC,iBAAO;QACR;MACF;AACD,aAAO;IACR,CAdD,EAcGrN,QAAQ,SAAC7D,MAAD;AACTA,WAAKC,QAASiK,MAAMgH,qBAAqB;IAC1C,CAhBD;AAiBA,KAAA,KAAA,KAAKL,SAAL,QAAA,OAAA,SAAA,SAAA,GAAU1G,QAAAA;AACV,SAAK0G,MAAM,IAAIO,oBAAQ;MACrBC,QAAQ,KAAKpO,QAAQpB;IADA,CAAZ,EAER6G,GAAG,mBAAmB,SAACW,GAAD;AACvB3C,cAAQ2C,EAAEnD,KAAH,EAAUuF,cAAcC,aAAaW;IAC7C,CAJU,EAIR3D,GAAG,YAAY,WAAA;AAEhBhC,cAAQ7C,QAAQ,SAAC7D,MAAD;AACd,YAAMsM,aAAatM,KAAKmM,QAAQjH,SAASlF,KAAKmM,QAAQhH;AACtD,YAAMmM,aAAatR,KAAKqN,QAAQnI,SAASlF,KAAKqN,QAAQlI;AAEtD,YAAI,CAACmH,cAAcgF,YAAY;AAC7BtR,eAAKC,QAASiK,MAAMG,UAAUrK,KAAKsK;QACpC;MACF,CAPD;AAQAlF,YAAKmM,aAAa7K,OAAlB;AACAtB,YAAKoM,WAAWjB,SAAS7J,SAASzD,OAAlC;IACD,CAhBU,EAgBRyF,GAAG,gBAAgB,SAACW,GAAD;AACpB,UAAMrJ,OAAO0G,QAAQ2C,EAAEnD,KAAH;AAEpBlG,WAAKyL,cAAcC,aAAa0B;AAEhC,UAAI/D,EAAEoI,gBAAgB;AACpB,YAAIzR,KAAK0R,qBAAqB;AAC5B1R,eAAKC,QAASiK,MAAMG,UAAUrK,KAAKsK;QACpC;AACDlF,cAAKmM,aAAa,CAACvR,IAAD,CAAlB;AACAoF,cAAKoM,WAAW,CAAA,GAAI,CAACxR,IAAD,GAAQiD,OAA5B;MACD;IACF,CA5BU,EA4BRyF,GAAG,SAAS,SAACW,GAAD;AACb,UAAMrJ,OAAO0G,QAAQ2C,EAAEnD,KAAH;AAapBd,YAAKoC,QAAQ,gBAAgB;QAC3BvH,SAASoJ,EAAEpJ;QACXF,QAAQsJ,EAAEtJ;QACVC;QACA2R,QAAQ,WAAA;AACNX,sBAAY9M,KAAKlE,IAAjB;QACD;MAN0B,CAA7B;IAQD,CAlDU,EAkDR0I,GAAG,SAAS,WAAA;AACb,UAAIsI,YAAYhP,QAAQ;AACtBoD,cAAKgG,YAAY4F,WAAjB;MACD;IACF,CAtDU,EAsDRY,MAAMlL,QAAQ7G,IAAI,SAACG,MAAD;AAAU,aAAAA,KAAKC;IAAQ,CAAnC,CAtDE;EAuDZ;AAES,UAAA,iBAAV,WAAA;AAAA,QAAA,QAAA;AACE,SAAK4R,kBAAL;AACA,SAAKC,eAAezL,OAAOC,WAAW,WAAA;AACpClB,YAAKwK,YAAL;IACD,CAFmB;EAGrB;AACS,UAAA,cAAV,SAAsBmC,QAAtB;AAAsB,QAAA,WAAA,QAAA;AAAAA,eAAS,KAAKA;;AAClC,QAAM7C,WAAW,KAAKA;AACtB,QAAM8C,eAAe9C,SAASb;AAC9B,QAAM4D,aAAa/C,SAASZ;AAC5B,QAAM4D,gBAAgBF,aAAahQ,SAASqC,KAAKG,IAAL,MAAAH,MAAY2N,YAAZ,IAA4B;AAGxE,QAAI,CAACD,UAAUG,gBAAgB,GAAG;AAChC;IACD;AAEDhD,aAASb,QAAQ2D,aAAanS,IAAI,SAACsS,OAAD;AAAW,aAAAA,QAAQD;IAAa,CAAjD;AACjBhD,aAASZ,MAAM2D,WAAWpS,IAAI,SAACsS,OAAD;AAAW,aAAAA,QAAQD;IAAa,CAA/C;AAEf,SAAK1S,MAAMqE,QAAQ,SAAC7D,MAAD;AACjB,UAAMjB,aAAaiB,KAAKoS;AAExB,UAAI,CAACpR,SAASjC,UAAD,GAAc;AACzB;MACD;AACDiB,WAAKoS,gBAAgBrT,aAAamT;IACnC,CAPD;EAQD;AACS,UAAA,aAAV,SAAqB3B,SAAqB7J,SAAqBzD,SAA/D;AACE,QAAMoP,eAAe,KAAKnD;AAC1B,QAAMmB,YAAYpN,QAAQoN,aAAa,KAAKpN,QAAQqN;AACpD,QAAMgC,cAAcrP,QAAQsP,WAAWF,aAAahC,cAAc,QAAQ,UAAU,KAAjC;AACnD,QAAM7Q,QAAQ,KAAKA;AACnB,QAAIgT,eAAe;MACjBnE,OAAK,cAAA,CAAA,GAAMiE,WAAAA;MACXhE,KAAG,cAAA,CAAA,GAAMgE,WAAAA;IAFQ;AAKnB/B,YAAQ1M,QAAQ,SAAC7D,MAAD;AACdA,WAAKiN,aAAaC,YAAYC;IAC/B,CAFD;AAGAzG,YAAQ7C,QAAQ,SAAC7D,MAAD;AACdA,WAAKyS,aAAa;IACnB,CAFD;AAGA,QAAIjT,MAAMwC,QAAQ;AAChBwQ,qBAAe,KAAKE,UAAU,KAAKlT,OAAO6Q,WAAWiC,WAAtC;IAChB;AACD5L,YAAQ7C,QAAQ,SAAC7D,MAAD;AACdA,WAAKyS,aAAa;IACnB,CAFD;AAGA,SAAKE,YAAYH,YAAjB;AACA,SAAKI,YAAL;AACA,SAAK7D,aAAaa,YAAY,KAAKpQ,KAAnC;AACA,SAAKqT,6BAAL;AAEA,QAAMC,oBAAoBvC,QAAQpQ,OAAO,SAACH,MAAD;AAAU,aAAAA,KAAKiR;IAAa,CAA3C;AAE1B,QAAI6B,kBAAkB9Q,QAAQ;AAC5B,WAAK8M,iBAAiB1H,OAAtB;AACA0L,wBAAkBjP,QAAQ,SAAC7D,MAAD;AACxB,YAAMC,UAAUD,KAAKC;AAErBA,gBAAQiK,MAAMgH,qBAAqBlR,KAAKkR;MACzC,CAJD;IAKD;AACD,SAAKd,gBAAgB;MACnBC;MACAE;MACA7J;MACA8J,UAAU,CAAC,CAACvN,QAAQuL;IAJD,CAArB;AAMA,QAAMuE,sBAAsBrM,QAAQvG,OAAO,SAACH,MAAD;AAAU,aAAAA,KAAK+M;IAAc,CAA5C;AAE5B,QAAIgG,oBAAoB/Q,QAAQ;AAC9B,WAAKoJ,YAAY2H,mBAAjB;IACD;EACF;AACS,UAAA,qBAAV,WAAA;AACE,WAAO,KAAKjE,iBAAiBrF,kBAAtB;EACR;AACS,UAAA,eAAV,SAAuBjK,OAAvB;AACE,SAAKuP,aAAaiE,qBAAqBxT,OAAO,KAAKyT,SAAL,CAA9C;EACD;AACO,UAAA,qBAAR,SAA2B5C,WAA3B;;AACE,QAAMxR,aAAa,KAAKoE,QAAQpE;AAChC,QAAMqU,MAAM,KAAKjQ,QAAQiQ;AACzB,QAAI,OAAOA,QAAQ,SAAU,QAAOA;AACpC,QAAMC,gBAAgBtU,cAAcwR,cAAc,YAAY,CAACxR,cAAcwR,cAAc;AAC3F,YAAO,KAAC8C,gBAAiBD,IAAYhU,WAAYgU,IAAYrU,gBAAtD,QAAA,OAAA,SAAA,KAAsEyK,qBAAqB,KAAD;EAClG;AACO,UAAA,kBAAR,SAAwBD,GAAxB;AAaE,SAAK7B,QAAQ,kBAAkB6B,CAA/B;EACD;AACO,UAAA,oBAAR,WAAA;AACE5C,iBAAa,KAAKqL,YAAN;AACZ,SAAKA,eAAe;EACrB;AACO,UAAA,+BAAR,WAAA;AACQ,QAAA1R,KAGF,KAAK8O,UAFA8C,eAAY,GAAA,OACdC,aAAU,GAAA;AAEjB,QAAMmB,aAAa,KAAKC,cAAL;AAEnB,QAAMC,WAAWrB,WAAWjQ,SAASqC,KAAKC,IAAL,MAAAD,MAAY4N,UAAZ,IAA0B;AAC/D,QAAMsB,aAAavB,aAAahQ,SAASqC,KAAKC,IAAL,MAAAD,MAAY2N,YAAZ,IAA4B;AACrE,QAAM/S,cAAcoF,KAAKC,IAAIiP,YAAYD,WAAWF,UAAhC;AAEpB,SAAKtE,iBAAiB/E,eAAe9K,WAArC;EACD;AACO,UAAA,mBAAR,WAAA;AACE,SAAK6P,iBAAiB1H,OAAtB;AACA,SAAK2H,aAAayE,iBAAiB,KAAK1E,iBAAiBpF,QAAtB,CAAnC;EACD;AAcO,UAAA,QAAR,WAAA;AACE,SAAK+J,iBAAL;EACD;AACO,UAAA,eAAR,SAAqBxQ,SAA6ByQ,WAAlD;AAAqB,QAAA,YAAA,QAAA;AAAAzQ,gBAAAA,CAAAA;;AACnB,SAAK4O,kBAAL;AAEA,QAAMrB,WAAWvN,QAAQuL,aAAavL,QAAQ4M;AAG9C,QAAIW,YAAY,CAACkD,WAAW;AAG1B,WAAKD,iBAAL;AACA,WAAK1E,aAAa3H,OAAlB;IACD;AAED,QAAI,CAAC,KAAK6L,SAAL,EAAgBjR,UAAU,KAAKoN,YAAL,EAAmBpN,QAAQ;AACxD,WAAK2R,aAAa1Q,OAAlB;IACD,WAAUuN,UAAU;AAEnB,WAAKpF,YAAY,KAAK5L,OAAOyD,OAA7B;IACD,OAAM;AAEL,WAAK6M,WAAW7M,OAAhB;IACD;EACF;;AAziBakL,EAAAA,MAAAA,iBAAwC7E;AACxC6E,EAAAA,MAAAA,gBAAgByF;AAFjBzF,EAAAA,QAAI,SAAA,WAAA,CADlB7L,YAAAA,GACc6L,KAAAA;AA2iBf,SAAAA;AAAC,EA3iBsErF,qBAAAA;ACZvE,SAAS+K,eACPtB,SACAuB,aACAC,aACAC,qBAJF;AAME,SAAO3P,KAAK2P,mBAAD,EAAJ,MAAA3P,MAA6BkO,QAAQvD,MAAM8E,aAAaA,cAAcC,WAAzC,CAA7B;AACR;AAED,SAASE,eACP1B,SACAwB,aACAG,wBACAC,UAJF;AAME,MAAMnS,UAASuQ,QAAQvQ,SAAS+R,cAAc;AAC9C,MAAMC,sBAAsBE,2BAA2B,QAAQ,QAAQ;AACvE,MAAME,sBAAsBF,2BAA2B,QAAQ,gBAAgB;AAC/E,MAAMG,SAASpQ,MAAMjC,OAAD,EAASnC,IAAI,SAACqG,OAAD;AAC/B,QAAMiM,QAAQ0B,eAAetB,SAASrM,OAAO6N,aAAaC,mBAA9B;AAE5B,WAAO3P,KAAK2P,mBAAD,EAAsBG,UAAUhC,KAApC;EACR,CAJc;AAMf,SAAOkC,OAAOD,mBAAD,EAAsB/P,KAAK6P,sBAAD,EAAJ,MAAA7P,MAAgCgQ,MAAhC,CAA5B;AACR;AA6DD,IAAA;AAAiCnL,EAAAA,WAAAA,cAAAA,MAAAA;AAAjC,WAAAoL,eAAA;;EAkPC;;AA5NQ,UAAA,YAAP,SAAiB9U,OAAmB6Q,WAA4BkC,SAAhE;AACE/S,UAAMqE,QAAQ,SAAC7D,MAAD;AACZA,WAAK0R,sBAAsB;IAC5B,CAFD;AAGA,QAAM6C,aAAa,KAAKC,uBAAuBhV,KAA5B;AACnB,QAAMiV,SAAS,KAAKC,yBAAyBlV,KAA9B;AAET,QAAAY,KAKF,KAAK6C,SAJP0R,QAAK,GAAA,OACLhL,kBAAe,GAAA,iBACfiL,kBAAe,GAAA,iBACfC,eAAY,GAAA;AAEd,QAAMC,YAAY,KAAKzB,cAAL;AAClB,QAAMD,aAAa,KAAKC,cAAL;AACnB,QAAM1C,gBAAgB4B,QAAQvQ;AAC9B,QAAM+S,cAAcvV,MAAMwC;AAC1B,QAAMgT,aAAa,KAAKC,eAAeR,QAAQF,UAA5B;AACnB,QAAMW,iBAAiB7E,cAAc;AACrC,QAAM6D,yBAAyBgB,iBAAiB,QAAQ;AACxD,QAAMC,uBAAuBD,iBAAiB,QAAQ;AACtD,QAAIlD,eAAe,CAAC,CAAD;AAEnB,QAAIrB,kBAAkB8D,QAAQ;AAC5BzC,qBAAeO,QAAQvD,MAAR;IAChB,OAAM;AACL,UAAMoG,UAAQzE,gBAAgBtM,KAAK8Q,oBAAD,EAAJ,MAAA9Q,MAA8BkO,OAA9B,IAAyC;AAEvEP,qBAAe/N,MAAMwQ,MAAD,EAAS5U,IAAI,WAAA;AAAM,eAAAuV;MAAK,CAA7B;IAChB;AACD,QAAInD,aAAaD,aAAahD,MAAb;AACjB,QAAMqG,aAAaZ,SAAS,IAAIO,WAAW,CAAD,IAAMA,WAAW,CAAD,IAAM;AAChE,QAAMM,YAAYX,UAAU;AAC5B,QAAMY,sBAAsBL,kBAAkBL,iBAAiB;AAG/D,QAAIV,WAAWe,iBAAiB,YAAYM;AAG5C,QAAID,qBAAqB;AAEvBpB,iBAAW9P,KAAKG,IAAL,MAAAH,MAAY4N,UAAZ;IACZ;2BAEQhQ,IAAAA;AACP,UAAMjC,OAAOR,MAAM0V,iBAAiBjT,KAAI8S,cAAc,IAAI9S,EAAxC;AAClB,UAAMwT,kBAAkBC,SAAS1V,KAAK+B,WAAW0S,UAAU,KAAK,EAAhC;AAChC,UAAMkB,qBAAqBD,SAAS1V,KAAK+B,WAAW6T,aAAa,KAAK,EAAnC;AACnC,UAAI3W,cAAce,KAAKf;AACvB,UAAI8U,cAAc1P,KAAKG,IACrBiQ,QACAgB,mBAAmBpR,KAAKC,IAAI,GAAGD,KAAKwR,MAAM7V,KAAKhB,aAAa8V,aAAaO,UAA1C,CAAZ,CAFH;AAIlB,UAAMS,iBAAiBzR,KAAKG,IAAIiQ,QAAQpQ,KAAKC,IAAIyP,aAAa4B,kBAAtB,CAAjB;AACvB,UAAI7B,cAAcG,eAAehC,YAAY8B,aAAaG,wBAAwBC,QAAlD;AAChC,UAAIpV,aAAa8U,eAAe5B,YAAY6B,aAAaC,aAAaoB,oBAAvC;AAE/B,UAAII,uBAAuBpB,aAAapV,YAAY;AAClDoV,mBAAW9P,KAAKC,IAAL,MAAAD,MAAY4N,UAAZ;AACXA,qBAAaA,WAAWpS,IAAI,WAAA;AAAM,iBAAAsU;QAAQ,CAA7B;AACbpV,qBAAaoV;AACbL,sBAAc;MACf;AAED,aAAOC,cAAc+B,gBAAgB;AACnC,YAAMC,qBAAqBjC,cAAcC;AACzC,YAAMiC,kBAAkBlC,cAAc;AAEtC,YAAIoB,mBAAmBa,sBAAsBtB,UAAUxC,WAAW8D,kBAAD,IAAuBhX,aAAa;AACnG;QACD;AACD,YAAI,CAACmW,mBAAmBc,kBAAkB,KAAK/D,WAAW+D,eAAD,IAAoBjX,aAAa;AACxF;QACD;AACD,YAAI,CAACmW,gBAAgB;AACnB,YAAEpB;QACH;AACD,UAAEC;MACH;AAEDD,oBAAczP,KAAKC,IAAI,GAAGwP,WAAZ;AACdC,oBAAc1P,KAAKG,IAAIiQ,SAASX,aAAaC,WAA/B;AAGd,UAAK0B,kBAAkB,KAAK1B,cAAc,KAAMuB,WAAW;AACzD,YAAMW,kBAAkBlC,cAAc,KAAKsB,aAAad;AAExD,aAAK,CAAC2B,OAAKC,mBAAL,KAA6B,CAACxM,oBAAoB3J,KAAKoW,kBAAkBH,gBAAgB;AAC7FjW,eAAK+M,iBAAiB;QACvB;AACD/M,aAAKoW,gBAAgBH;MACtB;AACD,UAAIrB,kBAAkB,GAAG;AACvB3V,sBAAce,KAAKS,qBAAqBmU;AACxC5U,aAAKqW,iBAAiBpX;MACvB;AACD,UAAMH,YAAYkW,WAAWlB,WAAD;AAC5B/U,mBAAamW,iBAAiBnW,aAAaA,aAAaqU,aAAanU;AAErEe,WAAKsW,eAAexX;AACpBkB,WAAKoS,gBAAgBrT;AACrB,UAAMwX,mBAAmBrB,iBAAiBnW,aAAaE,cAAcmU,aAAarU;AAElFkF,YAAM8P,WAAD,EAAclQ,QAAQ,SAAC2S,aAAD;AACzBvE,mBAAW6B,cAAc0C,WAAf,IAA8BD;MACzC,CAFD;;;AA3DF,aAAStU,IAAI,GAAGA,IAAI8S,aAAa,EAAE9S,GAAnC;cAASA,CAAAA;IA8DR;AAID,QAAIsT,uBAAuBpB,aAAa9P,KAAKG,IAAL,MAAAH,MAAY4N,UAAZ,GAAyB;AAC/DkC,iBAAW9P,KAAKC,IAAL,MAAAD,MAAY4N,UAAZ;AACXA,mBAAaA,WAAWpS,IAAI,WAAA;AAAM,eAAAsU;MAAQ,CAA7B;IACd;AAID,WAAO;MACL9F,OAAO6G,iBAAiBlD,eAAeC;MACvC3D,KAAK4G,iBAAiBjD,aAAaD;IAF9B;EAIR;AACM,UAAA,yBAAP,SAA8BxS,OAA9B;AAA8B,QAAA,UAAA,QAAA;AAAAA,cAAQ,KAAKA;;AACjC,QAAAmV,QAAU,KAAK1R,QAAL;AAClB,QAAM6R,YAAY,KAAK2B,aAAL;AAClB,QAAMC,sBAAsB,KAAKhG,uBAAL;AAC5B,QAAMiG,mBAAmB,KAAKpC,cAAc,KAAK9D;AACjD,QAAMmG,eAAe,KAAKnC,UAAU,KAAK9D;AACzC,QAAI8D,SAASmC,gBAAgB;AAE7B,QAAIrC,aAAa;AAEjB,QAAII,UAAU,WAAW;AACvB,UAAI,CAACiC,cAAc;AACjB,YAAMC,uBAAuB,KAAKA,wBAAwBrB;AAE1Df,iBAASpQ,KAAKC,IAAI,GAAGD,KAAKwR,MAAMa,sBAAsB5B,cAAc+B,uBAAuB/B,UAAtE,CAAZ;MACV;AACDP,oBAAcmC,sBAAsB5B,cAAcL,UAAU,KAAKK;IAClE,WAAU6B,kBAAkB;AAC3BpC,mBAAaoC;IACd,WAAUnX,MAAMwC,QAAQ;AACvB,UAAI8U,cAActX,MAAM,CAAD;AAEvB,eAAmB,KAAA,GAAAuX,UAAAA,OAAAjT,KAAAA,QAAAA,QAAAA,MAAO;AAArB,YAAM9D,OAAI,QAAA,EAAA;AACb,YAAM+B,aAAa/B,KAAK+B;AACxB,YAAM0T,kBAAkBC,SAAS3T,WAAW0S,UAAU,KAAK,EAA3B;AAChC,YAAMkB,qBAAqBD,SAAS3T,WAAW6T,aAAa,KAAK,EAA9B;AAEnC,YACE5V,KAAKyL,gBAAgBC,aAAaC,WAC/B,CAAC3L,KAAKhB,cACNyW,oBAAoB,KACpBE,uBAAuB,GAC1B;AACA;QACD;AACDmB,sBAAc9W;AACd;MACD;AACD,UAAMhB,aAAa8X,YAAY9X,cAAc;AAE7CuV,mBAAavV;IACd,OAAM;AACLuV,mBAAamC;IACd;AACD,WAAOnC,cAAc;EACtB;AACM,UAAA,2BAAP,SAAgC/U,OAAhC;AAAgC,QAAA,UAAA,QAAA;AAAAA,cAAQ,KAAKA;;AAC3C,QAAMsV,YAAY,KAAK2B,aAAL;AAClB,QAAMG,eAAe,KAAKnC,UAAU,KAAK9D;AACzC,QAAMqG,6BAA6B,KAAKA;AACxC,QAAIvC,SAAS;AAEb,QAAImC,cAAc;AAChBnC,eAASmC;IACV,OAAM;AACL,UAAMrC,aAAa,KAAKC,uBAAuBhV,KAA5B;AAEnBiV,eAASpQ,KAAKG,IACZhF,MAAMwC,QACNqC,KAAKC,IACH,GACAD,KAAK4S,OACF,KAAKvG,uBAAL,IAAgCoE,cAC9BP,aAAayC,6BAA6BlC,UAF/C,CAFF,CAFO;IAUV;AACD,WAAOL;EACR;AACO,UAAA,iBAAR,SAAuBA,QAAgBF,YAAvC;AACU,QAAAI,QAAU,KAAK1R,QAAL;AAClB,QAAM6R,YAAY,KAAK2B,aAAL;AAClB,QAAMS,gBAAgB,KAAKxG,uBAAL;AACtB,QAAMyG,UAAUlT,MAAMwQ,MAAD;AAErB,QAAI2C,SAAS;AACb,QAAIC,OAAO;AAEX,QAAI1C,UAAU,aAAaA,UAAU,WAAW;AAC9C,UAAM2C,YAAY7C,SAAS;AAE3B4C,aAAOC,YAAYjT,KAAKC,KAAK4S,gBAAgB3C,cAAc+C,WAAW/C,aAAaO,SAAhE,IAA6E;AAChGsC,eAAS/S,KAAKG,IAAI,GAAG0S,gBAAgB,KAAKI,YAAYD,OAAO9C,cAAc,CAAlE;IACV,OAAM;AACL8C,aAAO9C,aAAaO;AACpB,UAAMyC,mBAAmB9C,SAAS,KAAK4C,OAAO9C;AAE9C,UAAII,UAAU,UAAU;AACtByC,kBAAUF,gBAAgBK,mBAAmB;MAC9C,WAAU5C,UAAU,OAAO;AAC1ByC,iBAASF,gBAAgBK;MAC1B;IACF;AACD,WAAOJ,QAAQtX,IAAI,SAACoC,GAAD;AACjB,aAAOmV,SAASnV,IAAIoV;IACrB,CAFM;EAGR;AAhPa/C,EAAAA,aAAAA,gBAAA7M,UAAAA,UAAA,CAAA,GACT0G,KAAK1L,aAAAA,GAAAA;IACRgS,QAAQ9R,cAAcC;IACtB2R,YAAY5R,cAAcC;IAC1BgS,iBAAiBjS,cAAcC;IAC/B+R,OAAOhS,cAAcC;IACrBoU,4BAA4BrU,cAAcC;IAC1CiU,sBAAsBlU,cAAcC;IACpCiS,cAAclS,cAAcC;;AAEhB0R,EAAAA,aAAAA,iBAAA7M,UAAAA,UAAA,CAAA,GACT0G,KAAKQ,cAAAA,GAAAA;IACRgG,OAAO;IACPF,QAAQ;IACRF,YAAY;IACZK,iBAAiB;IACjBoC,4BAA4B;IAC5BH,sBAAsBrB;IACtBX,cAAc;;AAnBLP,EAAAA,eAAW,WAAA,CADvBhS,YAAAA,GACYgS,YAAAA;AAkPb,SAAAA;AAAC,EAlPgCnG,IAAAA;AC5EjC,SAASqJ,6BACRC,OACAC,GACAC,GAHD;AAOC,MAAMC,eAA0C,CAAA;AAGhD,MAAMC,QAAmC,CAAA;AACzCA,QAAMH,CAAD,IAAM;AAMX,MAAMI,OAAO,IAAIC,WAA4C,SAAAC,GAAA;AAAK,WAAAA,EAAEC;EAAI,CAA3D;AACbH,OAAK5T,KAAK;IAAE9B,OAAOsV;IAAGO,MAAM;EAAlB,CAAV;AAEA,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AACJ,MAAIC;AAEJ,SAAOX,KAAKtX,KAAL,GAAa;AAGnB0X,cAAUJ,KAAKY,IAAL;AACVP,QAAID,QAAQ9V;AACZgW,qBAAiBF,QAAQD;AAGzBI,qBAAiBZ,MAAMU,CAAD,KAAO,CAAA;AAK7B,aAAWQ,KAAKN,gBAAgB;AAE/BC,kBAAYD,eAAeM,CAAD;AAK1BJ,sCAAgCH,iBAAiBE;AAMjDE,uBAAiBX,MAAMc,CAAD;AACtBF,oBAAe,OAAOZ,MAAMc,CAAD,MAAQ;AACnC,UAAIF,eAAeD,iBAAiBD,+BAA+B;AAClEV,cAAMc,CAAD,IAAMJ;AACXT,aAAK5T,KAAK;UAAE9B,OAAOuW;UAAGV,MAAMM;QAAlB,CAAV;AACAX,qBAAae,CAAD,IAAMR;MAClB;IACD;EACD;AAED,MAAI,OAAON,MAAMF,CAAD,MAAQ,aAAa;AACpC,QAAMiB,MAAM,CAAC,+BAA+BlB,GAAG,QAAQC,GAAG,GAA9C,EAAmDhK,KAAK,EAAxD;AACZ,UAAM,IAAIkL,MAAMD,GAAV;EACN;AAED,SAAOhB;AACP;AACD,SAASkB,4CACRlB,cACAD,GAFD;AAIC,MAAMoB,QAAkB,CAAA;AACxB,MAAIZ,IAAIR;AAER,SAAOQ,GAAG;AACTY,UAAM7U,KAAKiU,CAAX;AACAA,QAAIP,aAAaO,CAAD;EAChB;AACDY,QAAMC,QAAN;AACA,SAAOD;AACP;AACD,SAASE,UACRxB,OACAC,GACAC,GAHD;AAKC,MAAMC,eAAeJ,6BAA6BC,OAAOC,GAAGC,CAAX;AAEjD,SAAOmB,4CAA4ClB,cAAcD,CAAf;AAClD;AAED,IAAA;AAIC,WAAAI,YAAYmB,eAAZ;AACC,SAAKC,UAAU,CAAA;AACf,SAAKD,gBAAgBA;EACrB;;AACM,UAAA,OAAP,SAAYjZ,SAAZ;AAEC,SAAKkZ,QAAQjV,KAAKjE,OAAlB;AAEA,SAAKmZ,SAAS,KAAKD,QAAQnX,SAAS,CAApC;EACA;AACM,UAAA,MAAP,WAAA;AAEC,QAAMgC,SAAS,KAAKmV,QAAQ,CAAb;AAEf,QAAM7K,MAAM,KAAK6K,QAAQT,IAAb;AAGZ,QAAI,KAAKS,QAAQnX,SAAS,GAAG;AAC5B,WAAKmX,QAAQ,CAAb,IAAkB7K;AAClB,WAAK+K,SAAS,CAAd;IACA;AACD,WAAOrV;EACP;AACM,UAAA,OAAP,WAAA;AACC,WAAO,KAAKmV,QAAQnX;EACpB;AACM,UAAA,WAAP,SAAgBsX,IAAhB;AACC,QAAIC,IAAID;AAER,QAAMrZ,UAAU,KAAKkZ,QAAQI,CAAb;AAEhB,WAAOA,IAAI,GAAG;AAEb,UAAMC,UAAUnV,KAAK4S,OAAOsC,IAAI,KAAK,CAArB,IAA0B;AAC1C,UAAME,SAAS,KAAKN,QAAQK,OAAb;AAGf,UAAI,KAAKN,cAAcjZ,OAAnB,IAA8B,KAAKiZ,cAAcO,MAAnB,GAA4B;AAC7D,aAAKN,QAAQK,OAAb,IAAwBvZ;AACxB,aAAKkZ,QAAQI,CAAb,IAAkBE;AAElBF,YAAIC;MACJ,OAAM;AAEN;MACA;IACD;EACD;AACM,UAAA,WAAP,SAAgBD,GAAhB;AAEC,QAAMvX,UAAS,KAAKmX,QAAQnX;AAC5B,QAAM/B,UAAU,KAAKkZ,QAAQI,CAAb;AAChB,QAAMG,YAAY,KAAKR,cAAcjZ,OAAnB;AAClB,QAAI0Z;AAEJ,WAAO,MAAM;AAEZ,UAAMC,WAAWL,IAAI,KAAK;AAC1B,UAAMM,UAAUD,UAAU;AAG1B,UAAIE,OAAsB;AAE1B,UAAID,UAAU7X,SAAQ;AAErB,YAAM+X,SAAS,KAAKZ,QAAQU,OAAb;AACfF,sBAAc,KAAKT,cAAca,MAAnB;AAEd,YAAIJ,cAAcD,WAAW;AAC5BI,iBAAOD;QACP;MACD;AAED,UAAID,UAAU5X,SAAQ;AACrB,YAAMgY,SAAS,KAAKb,QAAQS,OAAb;AACf,YAAMK,cAAc,KAAKf,cAAcc,MAAnB;AAEpB,YAAIC,eAAeH,QAAQ,OAAOJ,YAAYC,cAAc;AAC3DG,iBAAOF;QACP;MACD;AAGD,UAAIE,SAAS,MAAM;AAClB,aAAKX,QAAQI,CAAb,IAAkB,KAAKJ,QAAQW,IAAb;AAClB,aAAKX,QAAQW,IAAb,IAAqB7Z;AACrBsZ,YAAIO;MACJ,OAAM;AAEN;MACA;IACD;EACD;AACF,SAAA/B;AAAC,EAAA;AClMD,SAASmC,WAAW1a,OAAmB2a,MAAvC;AACE,MAAMnY,UAASmY,KAAKnY;AACpB,MAAMoY,SAAuB,CAAA;AAE7B,WAASnY,IAAI,GAAGA,IAAID,UAAS,GAAG,EAAEC,GAAG;AACnC,QAAMoY,QAAQ3E,SAASyE,KAAKlY,CAAD,GAAK,EAAV;AACtB,QAAMqY,QAAQ5E,SAASyE,KAAKlY,IAAI,CAAL,GAAS,EAAd;AAEtBmY,WAAOlW,KAAK1E,MAAMwP,MAAMqL,OAAOC,KAAnB,CAAZ;EACD;AACD,SAAOF;AACR;AAED,SAASG,iBAAiBvb,YAAoBwB,MAA9C;AACE,MAAIQ,SAASR,IAAD,GAAQ;AAClB,WAAOA;EACR;AACD,MAAMga,WAAWha,KAAKia,OAAO,CAAZ;AACjB,MAAMC,OAAOF,aAAa,MAAM,IAAKA,aAAa,MAAM,KAAK;AAC7D,MAAIG,WAAWxJ,WAAW3Q,IAAD;AAEzB,MAAIA,KAAKoa,MAAM,KAAX,GAAmB;AACrBD,gBAAY3b,aAAa;EAC1B;AACD,MAAI0b,MAAM;AACR,WAAO1b,aAAa2b;EACrB;AACD,SAAOA;AACR;AAED,SAASE,0BAA0B7a,MAAgB8a,SAAnD;AACE,MAAM9b,aAAagB,KAAK+a;AACxB,MAAM9b,cAAce,KAAKgb;AACzB,MAAMC,eAAejb,KAAKgO,SAASiN,gBAAgB;AACnD,MAAMC,gBAAgBlb,KAAKgO,SAASkN,iBAAiB;AAErD,MAAI,CAAClc,cAAc,CAACC,aAAa;AAC/B,WAAO6b;EACR;AAED,MAAMK,QAAQlc,eAAeic,gBAAgB,KAAKlc,aAAaic,iBAAiBhc,cAAcic;AAE9F,SAAOC,SAASL,UAAUI,iBAAiBD;AAC5C;AAqFD,IAAA;AAAmC/R,EAAAA,WAAAA,gBAAAA,MAAAA;AAAnC,WAAAkS,iBAAA;;EA8nBC;;AAjmBQ,UAAA,YAAP,SAAiB5b,OAAmB6Q,WAA4BkC,SAAhE;AAAA,QAAA,QAAA;AACQ,QAAAnS,KAGF,KAAK6C,SAFPpB,kBAAe,GAAA,iBACfhD,aAAU,GAAA;AAGZW,UAAMqE,QAAQ,SAAC7D,MAAD;AACZ,UAAI,CAACA,KAAKyS,YAAY;AACpB;MACD;AACD,UAAMxS,UAAUD,KAAKC;AACrB,UAAM8B,aAAa/B,KAAK+B;AACxB,UAAMiM,WAAWhO,KAAKgO;AACtB,UAAIiN,eAAe9J,WAAWpP,WAAWkZ,YAAZ;AAC7B,UAAIC,gBAAgB/J,WAAWpP,WAAWmZ,aAAZ;AAG9B,UAAIG,MAAMJ,YAAD,GAAgB;AACvBA,uBAAe7V,MAAK6V,gBAAgBjN,SAASiN,gBAAgB;MAC9D;AACD,UAAII,MAAMH,aAAD,GAAiB;AACxBA,wBAAgB9V,MAAK8V,iBAAiBlN,SAASkN,gBAAgB;MAChE;AAKD,UACEjb,WAAW,EAAE,kBAAkB8B,eAAe,EAAE,mBAAmBA,eAChE/B,KAAKiN,eAAeC,YAAYC,SACnC;AACA,YAAMmO,mBAAmBrb,QAAQ4H,cAAgC,MAAIhG,kBAAJ,oBAAxC;AAEzB,YAAIyZ,kBAAkB;AACpB,cAAMC,cAActb,QAAQ+H,cAAc/H,QAAQiI,cAC9CjI,QAAQub,cAAcF,iBAAiBpT;AAC3C,cAAMuT,eAAexb,QAAQgI,eAAehI,QAAQkI,eAChDlI,QAAQyb,eAAeJ,iBAAiBnT;AAE5C,cAAItJ,YAAY;AACdoc,2BAAeQ;AACfP,4BAAgBK;UACjB,OAAM;AACLN,2BAAeM;AACfL,4BAAgBO;UACjB;QACF;MACF;AACDzN,eAASiN,eAAeA;AACxBjN,eAASkN,gBAAgBA;IAE1B,CA7CD;AA8CA,QAAMS,WAAW,KAAK1Y,QAAQ0Y;AAC9B,QAAIxB,OAAiB,CAAA;AAErB,QAAMjF,iBAAiB7E,cAAc;AAErC,QAAI7Q,MAAMwC,QAAQ;AAChBmY,aAAOwB,WAAW,KAAKC,YAAYpc,OAAO0V,cAAxB,IAA0C,KAAK2G,SAASrc,OAAO0V,cAArB;IAC7D;AAED,WAAO,KAAK4G,UAAUtc,OAAO2a,MAAM5H,SAASlC,cAAc,KAAnD;EACR;AACO,UAAA,cAAR,SAAoB7Q,OAAmB0V,gBAAvC;;AACE,QAAM6G,cAAc,KAAKC,gBAAL;AACpB,QAAML,WAAW,KAAKM,aAAL;AAEjB,QAAMC,WAAW,KAAKC,YAAY3c,OAAO;MACvC2a,MAAM,CAAC,CAAD;MACNlC,MAAM;MACNjW,QAAQ;MACRoa,aAAa;IAJ0B,GAKtCL,aAAaJ,UAAUzG,cALT;AAOjB,YAAO,KAAAgH,aAAQ,QAARA,aAAQ,SAAR,SAAAA,SAAU/B,KAAKta,IAAI,SAACwc,MAAD;AAAU,aAAA,KAAGA;IAAM,CAAtC,OAAA,QAAA,OAAA,SAAA,KAA2C,CAAA;EACnD;AACO,UAAA,cAAR,SACE7c,OACA8c,aACAP,aACAJ,UACAzG,gBALF;AAOS,QAAAqH,YAAaR,YAAW,CAAA;AACxB,QAAAS,SAAkBb,SAAQ,CAAA,GAAlBc,SAAUd,SAAQ,CAAA;AACjC,QAAMe,WAAWld,MAAMwC;AAErB,QAAAmY,OAIEmC,YAAW,MAHLK,aAGNL,YAAW,QAFbrE,OAEEqE,YAAW,MADbF,cACEE,YAAW;AAGf,QAAIF,cAAcM,aAAaD,UAAUE,cAAcP,cAAcG,YAAYG,WAAW;AAC1F,UAAME,YAAYzY,aAAauY,WAAWN,aAAaL,WAAzB;AAC9B,UAAMc,WAAWD,YAAYvY,KAAKyY,IAAI,KAAKC,SAASvd,OAAO4c,aAAaM,UAAUxH,cAA5C,CAAT;AAE7B,aAAAzN,UAAAA,UAAA,CAAA,GACK6U,WAAAA,GAAAA;QACHta,QAAQ2a,aAAa;QACrBxC,MAAI,cAAA,cAAA,CAAA,GAAMA,IAAAA,GAAAA,CAAMuC,QAAAA,CAAAA;QAChBN,aAAaM;QACbzE,MAAMA,OAAO4E;QACbG,QAAQ;;IAEX,WAAUZ,eAAeM,UAAU;AAClC,aAAAjV,UAAAA,UAAA,CAAA,GACK6U,WAAAA,GAAAA;QACHF,aAAaM;QACbM,QAAQR,SAASG,cAAcF,SAASE;;IAE3C,OAAM;AACL,aAAO,KAAKM,eAAezd,OAAO8c,aAAaI,UAAUX,aAAaJ,UAAUzG,cAAzE;IACR;EAEF;AACO,UAAA,iBAAR,SACE1V,OACA8c,aACAI,UACAX,aACAJ,UACAzG,gBANF;AAQS,QAAAqH,YAAwBR,YAAW,CAAA,GAAxBnG,YAAamG,YAAW,CAAA;AAExC,QAAAK,cAIEE,YAAW,aAHbnC,OAGEmC,YAAW,MAFLK,aAENL,YAAW,QADbrE,OACEqE,YAAW;AACf,QAAMta,UAASqC,KAAKG,IAAIkY,UAAUN,cAAcxG,SAAjC;AACf,QAAMsH,QAAgB,CAAA;AAEtB,aAASC,WAAWf,cAAcG,WAAWY,YAAYnb,SAAQ,EAAEmb,UAAU;AAC3E,UAAIA,aAAaf,aAAa;AAC5B;MACD;AACD,UAAMgB,WAAW/Y,KAAKyY,IAAI,KAAKC,SAASvd,OAAO4c,aAAae,UAAUjI,cAA5C,CAAT;AACjB,UAAMmI,WAAW,KAAKlB,YAAY3c,OAAO;QACvC2a,MAAI,cAAA,cAAA,CAAA,GAAMA,IAAAA,GAAAA,CAAMgD,QAAAA,CAAAA;QAChBnb,QAAQ2a,aAAa;QACrB1E,MAAMA,OAAOmF;QACbhB,aAAae;MAJ0B,GAKtCpB,aAAaJ,UAAUzG,cALT;AAOjB,UAAImI,UAAU;AACZH,cAAMhZ,KAAKmZ,QAAX;MACD;IACF;AACDH,UAAMI,KAAK,SAAC5b,GAAGC,GAAJ;AACT,UAAM4b,UAAU7b,EAAEsb;AAClB,UAAMQ,UAAU7b,EAAEqb;AAElB,UAAIO,YAAYC,SAAS;AAEvB,eAAOD,UAAU,IAAI;MACtB;AACD,UAAME,aAAatZ,aAAazC,EAAEM,QAAQ2Z,QAAX;AAC/B,UAAM+B,aAAavZ,aAAaxC,EAAEK,QAAQ2Z,QAAX;AAE/B,aAAO8B,aAAaC,cAAchc,EAAEuW,OAAOtW,EAAEsW;IAC9C,CAZD;AAeA,WAAOiF,MAAM,CAAD;EACb;AACO,UAAA,sBAAR,SAA4B1d,OAAmBme,cAA/C;AACE,QAAMjH,sBAAsB,KAAKhG,uBAAL,IAAiC,KAAK+F,aAAL,KAAuBjX,MAAMwC,SAAS;AACnG,QAAI4b,uBAAuBlH;AAC3B,QAAImH,WAAW;AACf,QAAIC,YAAY;AAEhBte,UAAMqE,QAAQ,SAAC7D,MAAD;AACZ,UAAMhB,aAAagB,KAAK+a;AACxB,UAAM9b,cAAce,KAAKgb;AAEzB,UAAI,CAAChc,cAAc,CAACC,aAAa;AAC/B4e,oBAAY;AACZ;MACD;AAED,UAAM5C,eAAejb,KAAKgO,SAASiN,gBAAgB;AACnD,UAAMC,gBAAgBlb,KAAKgO,SAASkN,iBAAiB;AAGrD,UAAM6C,kBAAkB9e,eAAeic,gBAAgB,KAClDlc,aAAaic,iBAAiBhc,cAAcic;AAEjD2C,kBAAYE;AAEZD,mBAAa5C,gBAAgB6C;AAC7BH,8BAAwB3C;IACzB,CApBD;AAsBA,QAAI4C,UAAU;AACZ,UAAMG,eAAeJ,uBAAuBE,aAAaD;AAEzD,UAAI,KAAKI,SAAS;AACV,YAAA7d,KAA2B,KAAK8d,cAAL,GAA1BC,aAAU,GAAA,CAAA,GAAEC,aAAU,GAAA,CAAA;AAC7B,YAAMC,mBAAiB9Z,QAAQyZ,aAAaG,YAAYC,UAA1B;AAE9B,YAAIT,cAAc;AAChB,iBAAOU;QACR;AACD,YAAMC,iBAAe,KAAKC;AAC1B,YAAMC,cAAchf,MAAMK,IAAI,SAACG,MAAD;AAC5B,iBAAO6a,0BAA0B7a,MAAMqe,gBAAP;QACjC,CAFmB;AAGpB,YAAMI,gBAAgBD,YAAY/c,OAAO,SAACid,MAAMC,gBAAgB1c,GAAvB;AACvC,iBAAOyc,OAAOnE,iBAAiBoE,gBAAgBnf,MAAMyC,CAAD,EAAIF,WAAW6c,cAAcN,eAAa,CAAD,CAA/D;QAC/B,GAAE,CAFmB;AAGtB,YAAMO,gBAAgBL,YAAY/c,OAAO,SAACid,MAAMC,gBAAgB1c,GAAvB;AACvC,iBAAOyc,OAAOnE,iBAAiBoE,gBAAgBnf,MAAMyC,CAAD,EAAIF,WAAW+c,cAAcR,eAAa,CAAD,CAA/D;QAC/B,GAAE,CAFmB;AAKtB,YAAIG,iBAAiB/H,uBAAuBA,uBAAuBmI,eAAe;AAChF,iBAAOR;QACR;MACF;AAED,aAAOL;IACR;AACD,WAAO;EACR;AAEO,UAAA,0BAAR,SAAgCxe,OAAmBsb,SAAnD;AACQ,QAAA1a,KAGF,KAAK6C,SAFPgb,UAAO,GAAA,SACPM,eAAY,GAAA;AAEd,WAAO/e,MAAMK,IAAI,SAACG,MAAD;AACf,UAAMye,gBAAgBR,UAClB1D,iBAAiBva,KAAK+a,eAAe/a,KAAK+B,WAAW6c,cAAcL,aAAa,CAAD,CAA/D,IAChB;AACJ,UAAMM,gBAAgBZ,UAClB1D,iBAAiBva,KAAK+a,eAAe/a,KAAK+B,WAAW+c,cAAcP,aAAa,CAAD,CAA/D,IAChB/I;AAEJ,UAAMmJ,iBAAiB9D,0BAA0B7a,MAAM8a,OAAP;AAChD,UAAIiE,QAAQ;AACZ,UAAIC,QAAQ;AACZ,UAAIL,kBAAkBE,eAAe;AACnCE,gBAAQ;MACT,WAAUJ,kBAAkBF,eAAe;AAC1CO,gBAAQ;MACT;AAED,aAAO;QACLC,SAASR;QACTS,SAASL;QACTre,MAAM+D,QAAQoa,gBAAgBF,eAAeI,aAAhC;QACbM,cAAcR;QACdI;QACAC;MANK;IAQR,CAzBM;EA0BR;AACO,UAAA,uBAAR,SAA6Bxf,OAAmBsb,SAAhD;AACE,QAAM/F,cAAcvV,MAAMwC;AAC1B,QAAM0U,sBAAsB,KAAKhG,uBAAL,IAAgC,KAAK+F,aAAL,KAAuBpS,KAAKC,IAAI,GAAGyQ,WAAZ,IAA2B;AAC9G,QAAMqK,YAAY,KAAKC,wBAAwB7f,OAAOsb,OAApC;AAClB,QAAMwE,iBAAiB/d,IAAI6d,UAAUvf,IAAI,SAAC0f,MAAD;AAAU,aAAAA,KAAK/e;IAAI,CAAjC,CAAD;AAC1B,QAAMgf,WAAW9I,sBAAsB4I;AACvC,QAAMG,aAAa/I,sBAAsBnV,IAAI6d,UAAUvf,IAAI,SAAC0f,MAAD;AAAU,aAAAA,KAAKJ;IAAY,CAAzC,CAAD;AAC5C,QAAMO,YAAYN,UAAUvf,IAAI,SAAC0f,MAAD;AAC9B,aAAA9X,UAAAA,UAAA,CAAA,GACK8X,IAAAA,GAAAA;QACHI,QAAQ;QACRnf,MAAM+e,KAAKJ,eAAeM;;IAE7B,CANiB;AAQlB,QAAID,aAAa,GAAG;AAClB,aAAO;QACLI,OAAOF;QACPzH,MAAM;MAFD;IAIR;AAED,QAAM4H,aAAaL,WAAW;AAC9B,QAAMM,kBAAkBJ,UAAU1d;2BAEzBC,IAAAA;AACP,UAAM8d,kBAAkBxe,IAAIme,UAAU7f,IAAI,SAAC0f,MAAD;AAAU,eAAAA,KAAKI,SAASJ,KAAK/e,OAAO;MAAC,CAAnD,CAAD;AAC3B,UAAMwf,gBAAgBze,IAAIme,UAAU7f,IAAI,SAAC0f,MAAD;AAAU,eAAAA,KAAKI,SAAS,IAAIJ,KAAKJ;MAAY,CAA3D,CAAD;AACzB,UAAIc,aAAavJ,sBAAsBqJ,mBAAmBC;AAE1DN,gBAAU7b,QAAQ,SAAC0b,MAAD;AAChB,YAAIA,KAAKI,QAAQ;AACf;QACD;AAED,YAAIE,YAAY;AACd,cAAIN,KAAK/e,OAAO+e,KAAKL,SAAS;AAC5Be,wBAAY5b,KAAKG,IAAIyb,WAAWV,KAAKL,UAAUK,KAAKJ,YAAxC;UACb;QACF,OAAM;AACL,cAAII,KAAK/e,OAAO+e,KAAKN,SAAS;AAC5BgB,wBAAY5b,KAAKC,IAAI2b,WAAWV,KAAKN,UAAUM,KAAKJ,YAAxC;UACb;QACF;MACF,CAdD;AAgBAO,gBAAU7b,QAAQ,SAAC0b,MAAD;AAChB,YAAI,CAACA,KAAKI,QAAQ;AAChBJ,eAAK/e,OAAO+D,QAAQgb,KAAKJ,eAAec,WAAWV,KAAKN,SAASM,KAAKL,OAAnD;AAEnB,cACGW,cAAc,CAACpb,SAAS8a,KAAK/e,OAAO+e,KAAKL,SAAS,IAA3B,KACpB,CAACW,cAAc,CAACpb,SAAS8a,KAAK/e,OAAO+e,KAAKN,SAAS,IAA3B,GAC5B;AACAM,iBAAKI,SAAS;UACf;QACF;MACF,CAXD;AAaA,UAAID,UAAUQ,MAAM,SAACX,MAAD;AAAU,eAAAA,KAAKI;MAAM,CAArC,GAAwC;;MAE3C;;AApCH,aAAS1d,IAAI,GAAGA,IAAI6d,iBAAiB,EAAE7d,GAAvC;4BAASA;;IAqCR;AACD,QAAMke,gBAAgBzJ,sBAAsBnV,IAAIme,UAAU7f,IAAI,SAAC0f,MAAD;AAAU,aAAAA,KAAK/e;IAAI,CAAjC,CAAD;AAG/C,QAAIiE,SAAS0b,gBAAgB,GAAG,IAApB,GAA4B;AACtCT,gBAAU7b,QAAQ,SAAC0b,MAAD;AAChBA,aAAK/e,QAAQ2f;MACd,CAFD;IAGD;AAGD,WAAO;MACLP,OAAOF;MACPzH,MAAM1W,IAAIme,UAAU7f,IAAI,SAAC0f,MAAD;AACtB,YAAIa,YAAY;AAEhB,YAAIb,KAAK/e,OAAO+e,KAAKL,WAAWK,KAAK/e,OAAO+e,KAAKN,SAAS;AACxDmB,sBAAY;QACb;AACD,YAAIjB,eAAeI,KAAKJ;AAExB,YAAIU,YAAY;AACdV,yBAAe9a,KAAKC,IAAI6a,cAAcI,KAAKN,OAA5B;QAChB,OAAM;AACLE,yBAAe9a,KAAKG,IAAI2a,cAAcI,KAAKL,OAA5B;QAChB;AACD,eAAO7a,KAAKyY,IAAIyC,KAAK/e,OAAO2e,YAArB,IAAqCiB;MAC7C,CAdS,CAAD;IAFJ;EAkBR;AACO,UAAA,yBAAR,SAA+B5gB,OAAmBsb,SAAlD;AACE,QAAMhG,YAAY,KAAK2B,aAAL;AAClB,QAAM2I,YAAY,KAAKC,wBAAwB7f,OAAOsb,OAApC;AAElB,WAAOsE,UAAUpd,SAAST,IAAI6d,UAAUvf,IAAI,SAAC0f,MAAD;AAAU,aAAAA,KAAK/e;IAAI,CAAjC,CAAD,IAAuCsU,aAAatV,MAAMwC,SAAS,KAAK;EACtG;AACO,UAAA,WAAR,SACExC,OACAyC,GACAoe,GACAnL,gBAJF;AAME,QAAMoL,YAAY9gB,MAAMwP,MAAM/M,GAAGoe,CAAf;AAClB,QAAM3J,sBAAsB,KAAKhG,uBAAL;AAC5B,QAAIoK,UAAU,KAAKyF,oBAAoBD,SAAzB;AACR,QAAAlgB,KAAqB,KAAK8d,cAAL,GAApBe,UAAO,GAAA,CAAA,GAAEC,UAAO,GAAA,CAAA;AAEvB,QAAI,KAAKsB,eAAe;AACtB,UAAIvB,WAAWnE,WAAWA,WAAWoE,SAAS;AAC5C,eAAO;MACR;AACD,UAAMuB,qBAAqB,KAAKC,uBAC9BJ,WACAxF,UAAUmE,UAAUA,UAAUC,OAFL;AAK3B,aAAO7a,KAAKsc,IAAIF,qBAAqB/J,qBAAqB,CAAnD;IACR;AACD,QAAIkK,YAAY;AAEhB,QAAI,KAAK3C,SAAS;AAChB,UAAInD,UAAUmE,SAAS;AACrBnE,kBAAUmE;MACX,WAAUnE,UAAUoE,SAAS;AAC5BpE,kBAAUoE;MACX;AACD,UAAM2B,WAAWxc,KAAKyY,IAAIhC,UAAUmE,OAAnB;AAEjB,UAAMwB,qBAAqB,KAAKC,uBAC9BJ,WACAxF,OAFyB;AAK3B,UACE,CAAC,KAAKgG,qBACF5L,iBAAiBmL,MAAM7gB,MAAMwC,SAASC,MAAM,MAC7Cwe,sBAAsB/J,qBACzB;AACA,YAAMqK,MAAM,KAAKC,qBAAqBV,WAAWxF,OAArC;AAEZ8F,oBAAYG,IAAI9I;MACjB;AAED,aAAO2I,YAAYC;IACpB;AAED,QAAII,SAAS/B,OAAD,GAAW;AAErB,UAAIpE,UAAUmE,SAAS;AACrB,eAAO5a,KAAKsc,IAAI7F,UAAUmE,SAAS,CAA5B,IAAiC5a,KAAKsc,IAAIzB,SAAS,CAAlB,IAAuB0B;MAChE,WAAU9F,UAAUoE,SAAS;AAC5B,eAAO7a,KAAKsc,IAAI7F,UAAUoE,SAAS,CAA5B,IAAiC7a,KAAKsc,IAAIzB,SAAS,CAAlB,IAAuB0B;MAChE;IACF,WAAU9F,UAAUmE,SAAS;AAC5B,aAAO5a,KAAKC,IAAID,KAAKsc,IAAI1B,SAAS,CAAlB,GAAsB5a,KAAKsc,IAAI7F,SAAS,CAAlB,CAA/B,IAAuDzW,KAAKsc,IAAIzB,SAAS,CAAlB,IAAuB0B;IACtF;AAED,WAAO9F,UAAUmE,UAAU2B;EAC5B;AACO,UAAA,WAAR,SAAiBphB,OAAmB0V,gBAApC;AAAA,QAAA,QAAA;AACE,QAAMwH,WAAWld,MAAMwC;AACvB,QAAMkf,oBAAoB,KAAKje,QAAQ8Y;AACjC,QAAA3b,KAAmCW,SAASmgB,iBAAD,IAC7CA,oBACA,CAACA,mBAAmBA,iBAApB,GAFG3E,YAAS,GAAA,CAAA,GAAE3G,YAAS,GAAA,CAAA;AAI3B,QAAM6B,QAAQ,SAAC0J,SAAD;AACZ,UAAMC,UAAqC,CAAA;AAC3C,UAAMhF,cAAc1G,SAASyL,SAAS,EAAV;AAE5B,eAAShE,WAAW9Y,KAAKG,IAAI4X,cAAcG,WAAWG,QAAlC,GAA6CS,YAAYT,UAAU,EAAES,UAAU;AACjG,YAAIA,WAAWf,cAAcxG,WAAW;AACtC;QACD;AACD,YAAIqC,OAAO7S,MAAK2X,SACdvd,OACA4c,aACAe,UACAjI,cAJS;AAOX,YAAI+C,OAAO,KAAKkF,aAAaT,UAAU;AACrCzE,iBAAO;QACR;AACDmJ,gBAAQ,KAAGjE,QAAJ,IAAkB9Y,KAAKsc,IAAI1I,MAAM,CAAf;MAC1B;AACD,aAAOmJ;IACR;AAED,WAAOnI,UAAUxB,OAAO,KAAK,KAAGiF,QAAhB;EACjB;AACO,UAAA,YAAR,SACEld,OACA2a,MACA5H,SACA2C,gBAJF;AAAA,QAAA,QAAA;AAGE,QAAA,YAAA,QAAA;AAAA3C,gBAAAA,CAAAA;;AAGM,QAAAnS,KAKF,KAAK6C,SAJPud,gBAAa,GAAA,eACba,eAAY,GAAA,cACZpD,UAAO,GAAA,SACP6C,mBAAgB,GAAA;AAElB,QAAM/L,cAAcvV,MAAMwC;AAC1B,QAAMsf,YAAY,KAAKpD,cAAL;AAClB,QAAM3K,aAAahB,QAAQ,CAAD,KAAO;AACjC,QAAMmE,sBAAsB,KAAKhG,uBAAL;AAC5B,QAAMoE,YAAY,KAAK2B,aAAL;AAClB,QAAMrD,aAAa,KAAKC,cAAL;AACnB,QAAM+G,SAASF,WAAW1a,OAAO2a,IAAR;AACzB,QAAIoH;AACJ,QAAMC,eAAepH,OAAOpY;AAC5B,QAAIjD,aAAawU;AACjB,QAAIkO,gBAAgB;AACpB,QAAIC;AAEJtH,WAAOvW,QAAQ,SAAC8d,YAAYC,UAAb;AACb,UAAMC,mBAAmBF,WAAW3f;AACpC,UAAI8Y,UAAU1V,MAAKmb,oBAAoBoB,YAAY,IAArC;AAEd,UAAInB,eAAe;AACjB1F,kBAAUzW,KAAKC,IAAIgd,UAAU,CAAD,GAAKjd,KAAKG,IAAIsW,SAASwG,UAAU,CAAD,CAA3B,CAAvB;MACX;AACD,UAAMQ,SAAShN,aAAa9S,SAAS;AACrC,UAAMod,YAAYuC,WAAW9hB,IAAI,SAACG,MAAMkG,OAAP;AAC/B,YAAMyY,iBAAiB9D,0BAA0B7a,MAAM8a,OAAP;AAEhD,eAAO;UACL5U;UACAlG;UACAhB,YAAY2f;UACZ5D,eAAe4D;UACfE,eAAeF;UACfF,eAAeE;QANV;MAQR,CAXiB;AAYlB,UAAM8B,qBAAqBrb,MAAKsb,uBAAuBiB,YAAY7G,OAAxC;AAC3B,UAAMiH,SAASrL,sBAAsBoL,WAAWrB,qBAAqBqB;AACrE,UAAME,mCAAmCvB,qBAAqBqB;AAC9D,UAAMG,2BAA2BvL,sBAAsBoL;AAEvD,UAAI7D,WAAWwC,sBAAsBwB,6BAA6BD,kCAAkC;AAElG,YACElB,oBAAoBkB,mCAAmCC,6BACnD/M,iBAAiB0M,aAAaJ,eAAe,IAAII,aAAa,IAClE;AACAF,wBAAc,CAAC3iB,UAAD;AACdwiB,wBAAcI,WAAW9hB,IAAI,SAACqiB,GAAGjgB,GAAJ;AAAU,mBAAA8S,cAAc8M,mBAAmB5f;UAAC,CAA3D;AAEd,cAAMkgB,gBAAc/c,MAAKia,wBAAwBsC,YAAY7G,OAAzC;AAEpBsE,oBAAUvb,QAAQ,SAAC0b,MAAMtd,GAAP;AAChBsd,iBAAKd,gBAAgB0D,cAAYlgB,CAAD,EAAIgd;AACpCM,iBAAKV,gBAAgBsD,cAAYlgB,CAAD,EAAIid;AACpCK,iBAAKvgB,aAAauF,QAAQgb,KAAKvgB,YAAYugB,KAAKd,eAAec,KAAKV,aAA3C;UAE1B,CALD;QAMD,OAAM;AACG,cAAAuD,UAAUhd,MAAK4b,qBAAqBW,YAAY7G,OAAtC,EAAA;AAElBsE,oBAAUvb,QAAQ,SAAC0b,MAAMtd,GAAP;AAChBsd,iBAAKvgB,aAAaojB,QAAMngB,CAAD,EAAIzB;AAC3B+e,iBAAKd,gBAAgB2D,QAAMngB,CAAD,EAAIgd;AAC9BM,iBAAKV,gBAAgBuD,QAAMngB,CAAD,EAAIid;UAC/B,CAJD;QAKD;MACF;AAEDE,gBAAUvb,QAAQ,SAAC0b,MAAMtd,GAAP;AAEd,YAAAjC,OAGEuf,KAAI,MAFNvgB,aAEEugB,KAAI;AACR,YAAItJ,iBAAiBjX;AACrB,YAAMqjB,WAAWV,WAAW1f,IAAI,CAAL;AAC3B,YAAMnD,YAAYujB,WACdA,SAAS/L,eAAgB+L,SAASjM,gBAAiBtB,YACnD;AAEJ,YAAI0L,eAAe;AACjBvK,4BAAkB8L;QACnB;AAGD,YAAM/T,WAAWhO,KAAKgO;AAEtBA,iBAAS+M,gBAAgBwE,KAAKxE;AAC9B/M,iBAASgN,iBAAiBF;AAC1B9M,iBAASyQ,gBAAgBc,KAAKd;AAC9BzQ,iBAAS6Q,gBAAgBU,KAAKV;AAE9B7e,aAAKsiB,eAAe;UAClBxjB;UACAC;UACAC,YAAYiX;UACZhX,aAAa6b;QAJK,CAApB;MAMD,CA9BD;AA+BA/b,oBAAcqU,aAAa0H;AAC3B,UAAIuG,eAAe,KAAKO,WAAWP,cAAc;AAC/CI,wBAAgB1iB;MACjB;IACF,CAxFD;AA0FA,QAAImW,gBAAgB;AAElB,aAAO;QACL7G,OAAO,CAACkF,UAAD;QACPjF,KAAK,CAACmT,aAAD;QACLF;QACA5B,QAAQ+B;MAJH;IAMR;AAGD,QAAMvc,SAASpG,aAAawU;AAE5B/T,UAAMqE,QAAQ,SAAC7D,MAAD;AACZA,WAAKoS,iBAAkBjN;IACxB,CAFD;AAGA,WAAO;MACLoc;MACA5B,QAAQ+B,cAAc,CAACA,YAAY,CAAD,IAAMvc,MAAlB,IAA4B;MAClDkJ,OAAO,CAACkF,aAAapO,MAAd;MACPmJ,KAAK,CAACiF,UAAD;;IAJA;EAMR;AACM,UAAA,2BAAP,WAAA;AACE,WAAO;EACR;AACM,UAAA,yBAAP,WAAA;AACE,WAAO,KAAK7C,uBAAL;EACR;AACO,UAAA,eAAR,WAAA;AACE,QAAMiL,WAAW,KAAKA;AACtB,WAAO5a,SAAS4a,QAAD,IAAaA,WAAW,CAACA,UAAUA,QAAX;EACxC;AACO,UAAA,kBAAR,WAAA;AACE,QAAMI,cAAc,KAAKA;AACzB,WAAOhb,SAASgb,WAAD,IAAgBA,cAAc,CAACA,aAAaA,WAAd;EAC9C;AACO,UAAA,gBAAR,WAAA;AACE,QAAMuF,YAAY,KAAKA;AACvB,WAAOvgB,SAASugB,SAAD,IAAcA,YAAY,CAACA,WAAWA,SAAZ;EAC1C;AA5nBalG,EAAAA,eAAAA,gBAAA3T,UAAAA,UAAA,CAAA,GACT0G,KAAK1L,aAAAA,GAAAA;IACRsZ,aAAapZ,cAAcC;IAC3B+Y,UAAUhZ,cAAcC;IACxB0e,WAAW3e,cAAcC;IACzB4d,eAAe7d,cAAcC;IAC7Bye,cAAc1e,cAAcC;IAC5Bqb,SAAStb,cAAcC;IACvB2b,cAAc5b,cAAcC;IAC5Bke,kBAAkBne,cAAcC;IAChC2f,cAAc5f,cAAcC;IAC5B4f,eAAe7f,cAAcC;IAC7BqY,cAActY,cAAcC;IAC5BsY,eAAevY,cAAcC;;AAEjBwY,EAAAA,eAAAA,iBAAA3T,UAAAA,UAAA,CAAA,GACT0G,KAAKQ,cAAAA,GAAAA;IACRoN,aAAa,CAAC,GAAG,CAAJ;IACbJ,UAAU;IACV2F,WAAW,CAAC,GAAG9L,QAAJ;IACX6L,cAAc;IACdb,eAAe;IACfvC,SAAS;IACT6C,kBAAkB;IAClBvC,cAAc,CAAC,QAAQ,MAAT;IACdtD,cAAc;IACdC,eAAe;;AA3BNE,EAAAA,iBAAa,WAAA,CADzB9Y,YAAAA,GACY8Y,cAAAA;AA8nBb,SAAAA;AAAC,EA9nBkCjN,IAAAA;ACzInC,SAASsU,YAAYlQ,SAArB;AACE,MAAImQ,WAAW;AAEfnQ,UAAQ1O,QAAQ,SAACsO,OAAD;AACd,QAAI8O,SAAS9O,KAAD,GAAS;AACnBuQ,iBAAWre,KAAKC,IAAIoe,UAAUvQ,KAAnB;IACZ;EACF,CAJD;AAKA,SAAO8O,SAASyB,QAAD,IAAaA,WAAW;AACxC;AACD,SAASC,YAAYpQ,SAArB;AACE,MAAIqQ,WAAWpN;AAEfjD,UAAQ1O,QAAQ,SAACsO,OAAD;AACd,QAAI8O,SAAS9O,KAAD,GAAS;AACnByQ,iBAAWve,KAAKG,IAAIoe,UAAUzQ,KAAnB;IACZ;EACF,CAJD;AAKA,SAAO8O,SAAS2B,QAAD,IAAaA,WAAW;AACxC;AACD,SAASC,gBAAgB7Q,cAAwB8Q,cAAwBC,cAAzE;AACE,SAAON,YAAYzQ,YAAD,IACdgR,eAAehR,cAAc8Q,cAAcC,YAA7B;AACnB;AAED,SAASC,eAAehR,cAAwBC,YAAsB8Q,cAAtE;AACE,MAAM/gB,UAASgQ,aAAahQ;AAE5B,MAAI,CAACA,SAAQ;AACX,WAAO;EACR;AACD,MAAMihB,cAAcN,YAAY1Q,UAAD;AAC/B,MAAMiR,gBAAgBT,YAAYzQ,YAAD;AACjC,MAAImR,YAAY;AAEhB,MAAI,CAACJ,cAAc;AACjB,WAAO;EACR;AAGD,WAASK,eAAe,GAAGA,eAAephB,SAAQ,EAAEohB,cAAc;AAChE,QAAM7P,aAAavB,aAAaoR,YAAD;AAC/B,QAAM9P,WAAWrB,WAAWmR,YAAD;AAE3B,QAAI,CAACnC,SAAS1N,UAAD,KAAgB,CAAC0N,SAAS3N,QAAD,GAAY;AAChD;IACD;AACD,QAAMa,WAAWZ,aAAa2P;AAC9B,QAAMG,SAAS/P,WAAW2P;AAI1BE,gBAAYC,eAAe/e,KAAKC,IAAI6e,WAAWA,YAAYhP,WAAWkP,MAA3C,IAAqDlP,WAAWkP;EAC5F;AAED,SAAOF;AACR;AACD,SAASG,aAAatR,cAAwBC,YAAsBhL,MAApE;AAOI,MAAAnI,YAIEmI,KAAI,WAHNjI,aAGEiI,KAAI,YAFNlI,aAEEkI,KAAI,YADNhI,cACEgI,KAAI;AACR,WACMmc,eAAetkB,WACnBskB,eAAetkB,YAAYE,YAC3B,EAAEokB,cACF;AACApR,iBAAaoR,YAAD,IAAiB/e,KAAKG,IAAIwN,aAAaoR,YAAD,GAAgBrkB,UAArC;AAC7BkT,eAAWmR,YAAD,IAAiB/e,KAAKC,IAAI2N,WAAWmR,YAAD,GAAgBrkB,aAAaE,WAAhD;EAC5B;AACF;AAsCD,IAAA;AAA+BiK,EAAAA,WAAAA,YAAAA,MAAAA;AAA/B,WAAAqa,aAAA;;EAgNC;;AAlMQ,UAAA,YAAP,SAAiB/jB,OAAmB6Q,WAA4BkC,SAAhE;AACE,QAAMiR,QAAQ,KAAKC,UAAL;AAEZ,QAAYC,kBAGVF,MAAK,YAFMG,mBAEXH,MAAK,aADAI,aACLJ,MAAK;AAEP,QAAAT,eACE,KAAK9f,QAAL;AAEE,QAAA7C,KAGF,KAAKyjB,YAAYH,eAAjB,GAFUI,iBAAc,GAAA,YACbC,kBAAe,GAAA;AAE9B,QAAMjP,YAAY,KAAK2B,aAAL;AAClB,QAAMrD,aAAa,KAAKC,cAAL;AAGnB,QAAM0B,cAAcvV,MAAMwC;AAE1B,QAAI,CAAC+S,eAAe,CAAC2O,mBAAmB,CAACC,kBAAkB;AACzD,aAAO;QAAEtV,OAAOkE;QAASjE,KAAKiE;MAAvB;IACR;AACD,QAAMyR,cAAcJ,WAAW5hB;AAC/B,QAAIgQ,eAAe/N,MAAMyf,eAAD,EAAkB7jB,IAAI,WAAA;AAAM,aAAA2V;IAAQ,CAAzC;AACnB,QAAIvD,aAAahO,MAAMyf,eAAD,EAAkB7jB,IAAI,WAAA;AAAM,aAAA;IAAS,CAA1C;AACjB,QAAMijB,eAAeU,MAAMjR,QAAQ1S,IAAI,SAACsS,OAAD;AAAW,aAAAA,SAAS4R,kBAAkB3Q;IAAW,CAAnE;AAErB,aAAS6Q,aAAa,GAAGA,aAAalP,aAAakP,cAAcD,aAAa;AAE5E,UAAMzQ,aAAasP,gBAAgB5Q,YAAY6Q,cAAcC,YAA3B;AAElC,eAASmB,YAAY,GAAGA,YAAYF,eAAeC,aAAaC,YAAYnP,aAAa,EAAEmP,WAAW;AACpG,YAAMlkB,OAAOR,MAAMykB,aAAaC,SAAd;AACZ,YAAAhY,KAKF0X,WAAWM,SAAD,GAJAC,sBAAmB,GAAA,YACpBC,qBAAkB,GAAA,WAChBC,uBAAoB,GAAA,aACrBC,sBAAmB,GAAA;AAEjC,YAAMvlB,aAAawU,aAAa4Q,uBAAuBJ,kBAAkB3Q;AACzE,YAAMtU,YAAYslB,sBAAsBN,iBAAiBhP;AACzD,YAAM7V,cAAcolB,wBAAwBN,kBAAkB3Q,cAAcA;AAC5E,YAAMpU,aAAaslB,uBAAuBR,iBAAiBhP,aAAaA;AAExEwO,qBAAatR,cAAcC,YAAY;UACrCnT,WAAWslB;UACXplB,YAAYslB;UACZvlB;UACAE,aAAaA,cAAcmU;QAJU,CAA3B;AAMZpT,aAAKsiB,eAAe;UAClBxjB;UACAC;UACAC;UACAC;QAJkB,CAApB;MAMD;IACF;AACD,QAAMslB,iBAAiBlU,cAAc;AAErC,QAAImU,cAAcjS,QAAQvQ,SAASuQ,UAAU,CAAC,CAAD;AAE7C,QAAIiS,YAAYxiB,WAAW0hB,iBAAiB;AAC1C,UAAMtO,UAAQmP,iBAAiBlgB,KAAKC,IAAL,MAAAD,MAAYmgB,WAAZ,IAA2BngB,KAAKG,IAAL,MAAAH,MAAYmgB,WAAZ;AAE1DA,oBAAcvgB,MAAMyf,eAAD,EAAkB7jB,IAAI,WAAA;AAAM,eAAAuV;MAAK,CAAtC;IACf;AACDpD,mBAAeA,aAAanS,IAAI,SAACsS,OAAD;AAAW,aAAA8O,SAAS9O,KAAD,IAAUA,QAAQ;IAAC,CAAvD;AACfF,iBAAaA,WAAWpS,IAAI,SAACsS,OAAD;AAAW,aAAA8O,SAAS9O,KAAD,IAAUA,QAAQ;IAAC,CAArD;AACb,QAAMsS,cAAcF,iBAChB1B,gBAAgB2B,aAAaxS,cAAc+Q,YAA5B,IACfF,gBAAgB5Q,YAAYuS,aAAazB,YAA1B;AAEnBvjB,UAAMqE,QAAQ,SAAC7D,OAAD;AACZA,MAAAA,MAAKoS,iBAAkBqS;IACxB,CAFD;AAIA,WAAO;MACLpW,OAAO2D,aAAanS,IAAI,SAACsS,OAAD;AAAW,eAAAA,QAAQsS;MAAW,CAA/C;MACPnW,KAAK2D,WAAWpS,IAAI,SAACsS,OAAD;AAAW,eAAAA,QAAQsS;MAAW,CAA7C;IAFA;EAIR;AACM,UAAA,2BAAP,WAAA;AACE,QAAMjB,QAAQ,KAAKvgB,QAAQugB;AAE3B,WAAOA,MAAMxhB,SAASwhB,MAAM,CAAD,EAAIxhB,SAAS;EACzC;AACM,UAAA,yBAAP,WAAA;AACU,QAAU0iB,iBAAmB,KAAKzhB,QAAL;AAErC,QAAI,OAAOyhB,mBAAmB,UAAU;AACtC,aAAOA,eAAe1lB;IACvB;AACD,QAAM8V,YAAY,KAAK2B,aAAL;AAClB,WACEiO,mBACC,KAAKhU,uBAAL,IAAiCoE,aAAa,KAAKJ,yBAAL,IAAkCI;EAEpF;AACS,UAAA,cAAV,SAAsB4O,iBAAtB;AACU,QAAUgB,iBAAmB,KAAKzhB,QAAL;AAErC,QAAI,OAAOyhB,mBAAmB,UAAU;AACtC,aAAOA;IACR;AACD,QAAM5P,YAAY,KAAK2B,aAAL;AAClB,QAAMkO,gBAAgBD,iBAClBA,kBACC,KAAKhU,uBAAL,IAAiCoE,aAAa4O,kBAAkB5O;AAErE,WAAO;MAAE9V,YAAY2lB;MAAe1lB,aAAa0lB;IAA1C;EACR;AACO,UAAA,YAAR,WAAA;AACE,QAAMnB,QAAQ,KAAKvgB,QAAQugB;AAC3B,QAAMG,mBAAmBH,MAAMxhB;AAC/B,QAAM0hB,kBAAkBC,mBAAmBH,MAAM,CAAD,EAAIxhB,SAAS;AAC7D,QAAM4iB,QAAqB,CAAA;AAC3B,QAAMC,UAAmC,CAAA;AACzC,QAAM7S,eAAe/N,MAAMyf,eAAD,EAAkB7jB,IAAI,WAAA;AAAM,aAAA2V;IAAQ,CAAzC;AACrB,QAAMvD,aAAahO,MAAMyf,eAAD,EAAkB7jB,IAAI,WAAA;AAAM,aAAA;IAAS,CAA1C;AAEnB,aAASilB,KAAK,GAAGA,KAAKnB,kBAAkB,EAAEmB,IAAI;AAC5C,eAASC,KAAK,GAAGA,KAAKrB,iBAAiB,EAAEqB,IAAI;AAC3C,YAAMC,OAAOxB,MAAMsB,EAAD,EAAKC,EAAV;AAEb,YAAI,CAACC,MAAM;AACT;QACD;AACD,YAAIH,QAAWC,KAAE,MAAIC,EAAV,GAAiB;AAC1B;QACD;AACD,YAAM9d,OAAO,KAAKge,UAAUJ,SAASG,MAAMF,IAAIC,IAAIrB,iBAAiBC,gBAAvD;AAEbL,qBAAatR,cAAcC,YAAYhL,IAA3B;AACZ2d,cAAM1gB,KAAK+C,IAAX;MACD;IACF;AACD2d,UAAMtH,KAAK,SAAC5b,GAAGC,GAAJ;AAAU,aAACD,EAAEsjB,OAAOrjB,EAAEqjB,OAAO,KAAK;IAAE,CAA/C;AAGA,WAAO;MACLJ;MACA5lB,YAAY0kB;MACZzkB,aAAa0kB;MACbpR,SAASP;IAJJ;EAMR;AACO,UAAA,YAAR,SACE6S,SACAG,MACAF,IACAC,IACArB,iBACAC,kBANF;AAQE,QAAMH,QAAQ,KAAKvgB,QAAQugB;AAE3B,QAAIvkB,cAAc;AAClB,QAAID,aAAa;AAGjB,aAASkmB,KAAKH,IAAIG,KAAKxB,iBAAiB,EAAEwB,IAAI;AAC5C,UAAI1B,MAAMsB,EAAD,EAAKI,EAAV,MAAkBF,MAAM;AAC1BhmB,qBAAakmB,KAAKH,KAAK;AACvB;MACD;AACD;IACD;AACD,aAASI,KAAKL,IAAIK,KAAKxB,kBAAkB,EAAEwB,IAAI;AAC7C,UAAI3B,MAAM2B,EAAD,EAAKJ,EAAV,MAAkBC,MAAM;AAC1B/lB,sBAAckmB,KAAKL,KAAK;AACxB;MACD;AACD;IACD;AAGD,aAASM,IAAIN,IAAIM,IAAIN,KAAK7lB,aAAa,EAAEmmB,GAAG;AAC1C,eAASpN,IAAI+M,IAAI/M,IAAI+M,KAAK/lB,YAAY,EAAEgZ,GAAG;AACzC6M,gBAAWO,IAAC,MAAIpN,CAAT,IAAgB;MACxB;IACF;AAED,QAAM/Q,OAAkB;MACtB+d;MACAlmB,WAAWimB;MACXhmB,YAAY+lB;MACZ9lB;MACAC;IALsB;AAOxB,WAAOgI;EACR;AA9Masc,EAAAA,WAAAA,gBAAA9b,UAAAA,UAAA,CAAA,GACT0G,KAAK1L,aAAAA,GAAAA;IACR+gB,OAAO7gB,cAAcC;IACrBmgB,cAAcpgB,cAAcC;IAC5ByiB,UAAU1iB,cAAcC;;AAEZ2gB,EAAAA,WAAAA,iBAAA9b,UAAAA,UAAA,CAAA,GACT0G,KAAKQ,cAAAA,GAAAA;IACR6U,OAAO,CAAA;IACP6B,UAAU;IACVtC,cAAc;;AAXLQ,EAAAA,aAAS,WAAA,CADrBjhB,YAAAA,GACYihB,UAAAA;AAgNb,SAAAA;AAAC,EAhN8BpV,IAAAA;ACrH/B,IAAA;AAQE,WAAAmX,UAAYxb,QAAZ;AACE,QAAMyb,YAAS9d,UAAA;MACbsT,eAAe;MACfC,gBAAgB;MAChBhc,YAAY;MACZC,aAAa;MACbH,WAAW;MACXC,YAAY;MACZS,OAAO,CAAA;OACJsK,MAAAA;AAEL,aAAW3H,QAAQojB,WAAW;AAC5B,WAAKpjB,IAAL,IAAaojB,UAAUpjB,IAAD;IACvB;EACF;;AACM,UAAA,UAAP,SAAenD,YAAoBC,aAAnC;AACE,QAAMumB,SAAS,KAAKxmB,aAAaA,aAAa,KAAKA,aAAa;AAChE,QAAMymB,SAAS,KAAKxmB,cAAcA,cAAc,KAAKA,cAAc;AAEnE,SAAKO,MAAMqE,QAAQ,SAAC7D,MAAD;AACjB,UAAIwlB,WAAW,GAAG;AAChBxlB,aAAKlB,aAAa0mB;AAClBxlB,aAAKhB,cAAcwmB;MACpB;AACD,UAAIC,WAAW,GAAG;AAChBzlB,aAAKjB,cAAc0mB;AACnBzlB,aAAKf,eAAewmB;MACrB;IACF,CATD;AAWA,SAAKzmB,aAAaA;AAClB,SAAKC,cAAcA;EACpB;AACM,UAAA,OAAP,SAAYe,MAAZ;AACE,SAAKR,MAAM0E,KAAKlE,IAAhB;EACD;AACM,UAAA,mBAAP,WAAA;AACE,WAAO,KAAK+a,gBAAgB,KAAKC;EAClC;AACM,UAAA,UAAP,WAAA;AACE,WAAO,KAAKhc,aAAa,KAAKC;EAC/B;AACM,UAAA,cAAP,WAAA;AACE,WAAQ,KAAK+b,mBAAmB,IAAK,IAAI,KAAKD,gBAAgB,KAAKC;EACpE;AACM,UAAA,WAAP,WAAA;AACE,WAAQ,KAAK/b,gBAAgB,IAAK,IAAI,KAAKD,aAAa,KAAKC;EAC9D;AACH,SAAAqmB;AAAC,EAAA;ACrDD,SAASI,QAAQC,cAAsB3jB,SAAvC;AACE,MAAIiW,OAAO0N,eAAe3jB;AAE1B,MAAIiW,OAAO,GAAG;AACZA,WAAO,IAAIA;EACZ;AAED,SAAOA,OAAO;AACf;AACD,SAAS2N,QACP5lB,MACA6lB,aACAC,aACAC,kBACAC,oBALF;AAOEhmB,OAAKf,cAAc6mB,YAAY7mB;AAC/Be,OAAKhB,aAAa8mB,YAAY9mB;AAC9B6mB,cAAY5mB,cAAc8mB,iBAAiB9mB;AAC3C4mB,cAAY7mB,aAAa+mB,iBAAiB/mB;AAE1C,MAAIgnB,oBAAoB;AACtBhmB,SAAKjB,aAAa8mB,YAAY9mB,aAAa8mB,YAAY5mB;AACvDe,SAAKlB,YAAY+mB,YAAY/mB;EAC9B,OAAM;AACLkB,SAAKlB,YAAY+mB,YAAY/mB,YAAY+mB,YAAY7mB;AACrDgB,SAAKjB,aAAa8mB,YAAY9mB;EAC/B;AACF;AAkDD,IAAA;AAAiCmK,EAAAA,WAAAA,cAAAA,MAAAA;AAAjC,WAAA+c,eAAA;;EAuJC;;AAtIQ,UAAA,YAAP,SAAiBzmB,OAAmB6Q,WAA4BkC,SAAhE;AAAA,QAAA,QAAA;AACU,QAAA2T,cAAgB,KAAKjjB,QAAL;AACxB,QAAMyT,sBAAsB,KAAKhG,uBAAL;AAC5B,QAAMyV,uBAAuBzP,sBAAsBwP;AACnD,QAAMpR,YAAY,KAAK2B,aAAL;AAClB,QAAMrD,aAAa,KAAKC,cAAL;AACnB,QAAMf,cAAcC,QAAQvQ,SAASuQ,UAAU,CAAC,CAAD;AAC/C,QAAMgB,aAAalD,cAAc,QAC7BhM,KAAKC,IAAL,MAAAD,MAAYiO,WAAZ,IACAjO,KAAKG,IAAL,MAAAH,MAAYiO,WAAZ,IAA2B6T,uBAAuB/S;AACtD,QAAME,WAAWC,aAAa4S,uBAAuB/S;AACrD,QAAMnO,YAAY,IAAIqgB,SAAS,CAAA,CAAb;AAElB9lB,UAAMqE,QAAQ,SAAC7D,MAAD;AACZ,UAAMomB,QAAQ,IAAId,SAAS;QACzBtmB,YAAYgB,KAAK+a;QACjB9b,aAAae,KAAKgb;QAClBD,eAAe/a,KAAK+a;QACpBC,gBAAgBhb,KAAKgb;MAJI,CAAb;AAOd5V,YAAKihB,iBAAiBphB,WAAWmhB,KAAjC;AACAnhB,gBAAUf,KAAKkiB,KAAf;AACAnhB,gBAAUqhB,QAAQ5P,sBAAsB5B,WAAWqR,uBAAuB/S,UAA1E;IACD,CAXD;AAYA5T,UAAMqE,QAAQ,SAAC7D,MAAMiC,GAAP;AACZ,UAAMskB,UAAUthB,UAAUzF,MAAMyC,CAAhB;AAChB,UAAMjD,aAAaunB,QAAQvnB,aAAa8V;AACxC,UAAM7V,cAAcsnB,QAAQtnB,cAAcmU;AAC1C,UAAMrU,aAAawU,aAAagT,QAAQxnB;AACxC,UAAMD,YAAYynB,QAAQznB;AAE1BkB,WAAKsiB,eAAe;QAClBxjB;QACAC;QACAC;QACAC;MAJkB,CAApB;IAMD,CAbD;AAeA,WAAO;MACLoP,OAAO,CAACkF,UAAD;MACPjF,KAAK,CAACgF,QAAD;IAFA;EAIR;AACO,UAAA,mBAAR,SAAyBrO,WAAqBjF,MAA9C;AACE,QAAIiF,UAAUuhB,SAAV,MAAyB,GAAG;AAC9BvhB,gBAAU8V,gBAAgB/a,KAAKhB;AAC/BiG,gBAAU+V,iBAAiBhb,KAAKf;AAChCgG,gBAAUjG,aAAagB,KAAKhB;AAC5BiG,gBAAUhG,cAAce,KAAKf;AAC7B;IACD;AAED,QAAI4mB;AACJ,QAAIY,UAAUjR;AACd,QAAIwQ,qBAAqB;AACzB,QAAMF,cAAc;MAClB9mB,YAAY;MACZC,aAAa;IAFK;AAIpB,QAAM8mB,mBAAmB;MACvB/mB,YAAY;MACZC,aAAa;IAFU;AAIzB,QAAMynB,aAAa,KAAKC,WAAW,MAAhB;AACnB,QAAMC,cAAc,KAAKD,WAAW,OAAhB;AAEpB1hB,cAAUzF,MAAMqE,QAAQ,SAACgjB,OAAD;AACtB,UAAMC,oBAAoBpB,QAAQmB,MAAME,iBAAN,GAA0BF,MAAMG,QAAN,CAA3B,IAA8CN;AAC/E,UAAMO,qBAAqBvB,QAAQmB,MAAMK,YAAN,GAAqBL,MAAML,SAAN,CAAtB,IAA0CI;AAC5E,UAAM5nB,aAAa6nB,MAAM7nB;AACzB,UAAMC,cAAc4nB,MAAM5nB;AAC1B,eAASgD,IAAI,GAAGA,IAAI,GAAG,EAAEA,GAAG;AAC1B,YAAI0c,iBAAc;AAClB,YAAIwI,kBAAe;AACnB,YAAIzQ,sBAAmB;AACvB,YAAIyP,uBAAoB;AAExB,YAAIlkB,MAAM,GAAG;AAEX0c,2BAAiB3f;AACjBmoB,4BAAkBloB,eAAee,KAAKf,eAAe4nB,MAAM7L,iBAAiBhb,KAAKf;AACjFyX,gCAAsB1X;AACtBmnB,iCAAuBlnB,cAAckoB;QACtC,OAAM;AAELA,4BAAkBloB;AAClB0f,2BAAiB3f,cAAcgB,KAAKhB,cAAc6nB,MAAM9L,gBAAgB/a,KAAKhB;AAC7EmnB,iCAAuBlnB;AACvByX,gCAAsB1X,aAAa2f;QACpC;AAED,YAAMyI,WAAWzI,iBAAiBwI;AAClC,YAAME,YAAY1I,iBAAiBwI;AACnC,YAAMjQ,gBAAgBR,sBAAsByP;AAC5C,YAAMmB,iBAAiBnB,uBAAuBA;AAE9C,YAAIlO,OAAOyN,QAAQ1lB,KAAKgnB,QAAL,GAAgBI,QAAjB,IAA6BV;AAC/CzO,gBAAQyN,QAAQ1lB,KAAKwmB,SAAL,GAAiBa,SAAlB,IAA+BT;AAC9C3O,gBAAQyN,QAAQmB,MAAME,iBAAN,GAA0B7P,aAA3B,IAA4CwP,aAAaI;AACxE7O,gBAAQyN,QAAQmB,MAAMK,YAAN,GAAqBI,cAAtB,IAAwCV,cAAcK;AAErE,YAAIhP,SAAS5T,KAAKG,IAAIyT,MAAMwO,OAAf,GAAyB;AACpCA,oBAAUxO;AACV4N,wBAAcgB;AACdb,+BAAsB/jB,MAAM;AAC5B6jB,sBAAY9mB,aAAa2f;AACzBmH,sBAAY7mB,cAAckoB;AAC1BpB,2BAAiB/mB,aAAa0X;AAC9BqP,2BAAiB9mB,cAAcknB;QAChC;MACF;IACF,CA7CD;AA+CAP,YAAQ5lB,MAAM6lB,aAAaC,aAAaC,kBAAkBC,kBAAnD;EACR;AACM,UAAA,2BAAP,WAAA;AACE,WAAO;EACR;AACM,UAAA,yBAAP,WAAA;AACE,WAAO,KAAKtV,uBAAL;EACR;AACO,UAAA,aAAR,SAAmBsU,MAAnB;AACE,QAAM/hB,UAAU,KAAKA;AACrB,QAAMskB,iBAAiBtkB,QAAQskB;AAE/B,QAAIA,mBAAmBvC,MAAM;AAC3B,aAAO;IACR,WAAUuC,mBAAmB,UAAU;AACtC,aAAOtkB,QAAW+hB,OAAI,QAAR;IACf;AACD,WAAO;EACR;AArJaiB,EAAAA,aAAAA,gBAAAxe,UAAAA,UAAA,CAAA,GACT0G,KAAK1L,aAAAA,GAAAA;IACRyjB,aAAavjB,cAAcC;IAC3B8jB,YAAY/jB,cAAcC;IAC1BgkB,aAAajkB,cAAcC;IAC3B2kB,gBAAgB5kB,cAAcC;;AAElBqjB,EAAAA,aAAAA,iBAAAxe,UAAAA,UAAA,CAAA,GACT0G,KAAKQ,cAAAA,GAAAA;IACRuX,aAAa;IACbQ,YAAY;IACZE,aAAa;IACbW,gBAAgB;;AAbPtB,EAAAA,eAAW,WAAA,CADvB3jB,YAAAA,GACY2jB,YAAAA;AAuJb,SAAAA;AAAC,EAvJgC9X,IAAAA;;;;AE9E3B,SAAUqZ,UAASC,KAAQ;AAC/B,SAAO,OAAOA,QAAQ;AACvB;ACbK,SAAUC,WAA6CC,QAA4C;AACvG,MAAIC;AAEJ,MAAI,CAACD,QAAQ;AACX,WAAO;EACR;AAAC,MAAIE,UAASF,MAAD,GAAU;AACtBC,SAAKE,SAASC,cAAsBJ,MAA/B;EACN,WAAUA,kBAAkBK,SAAS;AACpCJ,SAAKD;EACN,WAAU,WAAWA,UAAU,aAAaA,QAAQ;AACnDC,SAAKD,OAAOM,SAAUN,OAAOO;EAC9B;AAED,SAAON;AACR;AAEK,SAAUO,iBAAiBC,SAA0B;AACzD,SAAO,SAAUC,WAAgBC,YAAkB;AACjDF,YAAQG,QAAQ,SAACC,MAAY;AAC3B,UAAIA,QAAQH,WAAW;AACrB;MACD;AACDA,gBAAUG,IAAD,IAAS,WAAA;;AAAU,YAAOC,OAAA,CAAA;iBAAAC,KAAA,GAAPA,KAAOC,UAAAC,QAAPF,MAAO;AAAPD,eAAOC,EAAA,IAAAC,UAAAD,EAAA;;AACjC,YAAMG,UAASC,KAAA,KAAKR,UAAL,GAAiBE,IAAjB,EAA0BO,MAAAD,IAAAL,IAA1B;AAGf,YAAII,WAAW,KAAKP,UAAL,GAAkB;AAC/B,iBAAO;QACR,OAAM;AACL,iBAAOO;QACR;;KAZL;;AAgBH;AE9BD,IAAAG,YAAA,WAAA;AAIE,WAAAA,UAAYC,OAAa;AAFjB,SAAAC,WAAW,IAAIC,sBAAJ;AAGjB,SAAKC,WAAWH;EACjB;AANH,MAAA,UAAAD,UAAA;AAOEK,SAAAC,eAAkB,SAAA,WAAA;IAAlBC,KAAA,WAAA;AACE,aAAO,KAAKH;;IAEdI,KAAA,SAAmBP,OAAY;AAC7B,UAAMQ,WAAWR,UAAU,KAAKG;AAChC,WAAKA,WAAWH;AAEhB,UAAIQ,UAAU;AACZ,aAAKP,SAASQ,QAAQ,UAAUT,KAAhC;MACD;;;;GATH;AAWO,UAASU,YAAhB,SAAiBC,UAAgC;AAC/C,SAAKV,SAASW,GAAG,UAAUD,QAA3B;;AAEK,UAAWE,cAAlB,SAAmBF,UAAiC;AAClD,SAAKV,SAASa,IAAI,UAAUH,QAA5B;;AAEJ,SAACZ;AAAA,EAxBD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AMHA,IAAMgB,MAAK,OAAOC,WAAW,cAAcA,OAAOC,UAAUC,YAAY;IAE3DC,SAAS,cAAcC,KAAKL,GAAE;IAC9BM,uBAAuB;IACvBC,wBAAwB;EACnCC,wBAAwB;EACxBC,QAAQ;EACRC,YAAY;;IAIDC,8BAA2BC,UAAA,CAAA,GACnCC,mBAAmB;IAGXC,YAAY;EACvBC,OAAO;EACPC,KAAK;EACLC,MAAM;;IAGKC,sBAAsB;EACjCC,eAAe;EACfC,gBAAgB;EAChBC,iBAAiB;EACjBC,iBAAiB;EACjBC,eAAe;;IAGJC,uBAAiE;EAC5EC,MAAM;EACNC,UAAU;EACVC,KAAK;EACLC,SAAS;EACTC,MAAM;EACNC,MAAM;EACNC,UAAU;EACVC,YAAY;;IAIDC,uBAAuB,CAClC,sBACA,eACA,YACA,mBACA,aACA,oBACA,eACA,uBACA,6BACA,qBACA,aACA,aACA,sBACA,uBACA,sBACA,kBACA,gBACA,YAAY;IAIFC;CAAZ,SAAYA,aAAU;AACpBA,EAAAA,YAAAA,YAAAA,QAAAA,IAAAA,CAAAA,IAAAA;AACAA,EAAAA,YAAAA,YAAAA,SAAAA,IAAAA,CAAAA,IAAAA;AACAA,EAAAA,YAAAA,YAAAA,SAAAA,IAAAA,CAAAA,IAAAA;AACF,GAJYA,eAAAA,aAAU,CAAA,EAAA;IAMVC;CAAZ,SAAYA,YAAS;AACnBA,EAAAA,WAAAA,WAAAA,QAAAA,IAAAA,CAAAA,IAAAA;AACAA,EAAAA,WAAAA,WAAAA,SAAAA,IAAAA,CAAAA,IAAAA;AACAA,EAAAA,WAAAA,WAAAA,SAAAA,IAAAA,CAAAA,IAAAA;AACF,GAJYA,cAAAA,YAAS,CAAA,EAAA;IAMTC;CAAZ,SAAYA,cAAW;AAErBA,EAAAA,aAAAA,aAAAA,YAAAA,IAAAA,CAAAA,IAAAA;AAEAA,EAAAA,aAAAA,aAAAA,0BAAAA,IAAAA,CAAAA,IAAAA;AAEAA,EAAAA,aAAAA,aAAAA,2BAAAA,IAAAA,CAAAA,IAAAA;AAEAA,EAAAA,aAAAA,aAAAA,yBAAAA,IAAAA,CAAAA,IAAAA;AACF,GATYA,gBAAAA,cAAW,CAAA,EAAA;IAYVC,gBAAgB;AC3E7B,IAAA,mBAAA,SAAA,QAAA;AAAsCC,EAAAA,WAAAA,mBAAAA,MAAAA;AAIpC,WAAAC,kBAAYC,YAAqBC,YAA4C;AAA7E,QAAA,QACEC,OAAAA,KAAAA,MAAMF,YAAY5B,UAAAA;MAChBiB,MAAM;MACNJ,MAAMU,UAAUQ;MAChBC,SAAS;QAAEC,KAAKR;QAAeS,MAAMT;;OAClCI,UAAU,CACI,KAAC;AAEpB,QAAIM,MAAKtB,SAASU,UAAUa,SAAS;AACnC,UAAID,MAAKE,KAAKC,SAASH,MAAKE,KAAKE,QAAQ;AACvCJ,cAAKK,aAAaC,YAAYC;;AAEhC,UAAMC,UAAUR,MAAKQ;AACrB,UAAMN,OAAOF,MAAKE;AAClB,UAAML,UAAUG,MAAKH;AAErB,UAAIA,QAAQM,OAAO;AACjBD,aAAKC,QAAQN,QAAQM;iBACZK,QAAQL,OAAO;AACxBD,aAAKC,QAAQK,QAAQL;;AAEvB,UAAIN,QAAQO,QAAQ;AAClBF,aAAKE,SAASP,QAAQO;iBACbI,QAAQJ,QAAQ;AACzBF,aAAKE,SAASI,QAAQJ;;;;;AAG3B,MAAAK,UAAAjB,kBAAAkB;AACMD,UAAA,mBAAP,WAAA;AACE,WAAO;MACL/B,MAAMU,UAAUa;MAChBtB,UAAU,KAAKA;MACfC,KAAK,KAAKA;MACV4B,SAAS,KAAKA;MACdN,MAAM,KAAKA;MACXL,SAAS,KAAKA;MACdZ,YAAY,KAAKA;;;AAGdwB,UAAA,qBAAP,WAAA;AACE,QAAME,SAAM9C,UAAAA,UAAA,CAAA,GACP8B,OAAAA,UAAMiB,mBAAkB,KAAA,IAAA,CAAE,GAAA;MAC7BlC,MAAMU,UAAUQ;MAChBjB,UAAU,KAAKA;;AAEjB,QAAI,KAAKG,MAAM;AACb6B,aAAO7B,OAAO,KAAKA;;AAErB,WAAO6B;;AAEX,SAAAnB;AAAA,EAtDsCqB,QAAQ;ACXvC,IAAMC,oBAAoB;AAC1B,IAAMC,mBAAmB;AAEhC,IAAA,cAAA,SAAA,QAAA;AAAiCxB,EAAAA,WAAAA,cAAAA,MAAAA;AAAjC,WAAAyB,eAAA;AAAA,QAAA,QAAA,WAAA,QAAA,OAAA,MAAA,MAAA,SAAA,KAAA;AACShB,UAAAA,OAA6B;AAC7BA,UAAAA,YAAY;AACZA,UAAAA,iBAAgC;;;AA8ExC,MAAAS,UAAAO,aAAAN;AA7EQD,UAAA,iBAAP,WAAA;AACE,WAAO,KAAKQ,MAAM,CAAC,KAAyB;;AAEvCR,UAAA,eAAP,WAAA;AACE,QAAM5B,UAAU,KAAKoC,MAAM,CAAC,EAAEpC;AAE9B,QAAIA,SAAS;AACX,UAAI,KAAKqC,kBAAkB,MAAM;AAC/B,aAAKA,iBAAiBrC,QAAQsC,MAAMC,WAAW;iBACtC,KAAKF,gBAAgB;AAC9BrC,gBAAQsC,MAAMC,UAAU,KAAKF;aACxB;AACLrC,gBAAQsC,MAAME,eAAe,SAAS;;;;AAIrCZ,UAAA,aAAP,WAAA;AACE,QAAI,KAAK/B,MAAM;AACb,UAAMG,UAAU,KAAKoC,MAAM,CAAC,EAAEpC;AAE9B,UAAIA,SAAS;AACXA,gBAAQsC,MAAMC,UAAU;;;;AAIvBX,UAAA,iBAAP,SAAsBa,MAA4C;AAChE,QAAIA,MAAM;AACR,UAAMC,cAAc,KAAKC,eAAc;AAEvC,UAAI,CAACD,aAAa;AAChB,aAAKN,QAAQ,CAAC,IAAIzB,iBAAiB,KAAKiC,QAAQhC,YAAU5B,UAAAA,UAAA,CAAA,GACrDyD,IAAI,GAAA;UACP5C,MAAMU,UAAUsC;UAChB9C,KAAKmC;WACL;aACG;AACL,iBAAWY,QAAQL,MAAM;AACvBC,sBAAYI,IAAI,IAAIL,KAAKK,IAAI;;;WAG5B;AACL,WAAKV,QAAQ,CAAA;;;AAGVR,UAAA,YAAP,SAAiBQ,OAAmBW,WAA4BC,SAAiB;AAC/E,QAAI,CAACZ,MAAMa,QAAQ;AACjB,aAAO;QACLC,OAAOF;QACPG,KAAKH;;;AAGT,QAAMI,cAAcJ,QAAQC,SAAMI,eAAA,CAAA,GAAOL,SAAO,IAAA,IAAI,CAAC,CAAC;AACtD,QAAMP,OAAOL,MAAM,CAAC;AACpB,QAAMkB,SAASb,KAAKc,cAAc,KAAKC,cAAa;AAEpDf,SAAKgB,eAAe,KAAKC,uBAAsB,IAAK,IAAIjB,KAAKkB,aAAa;AAE1E,QAAIZ,cAAc,OAAO;AACvB,UAAMa,SAASC,KAAKC,IAAG,MAARD,MAAYT,WAAW;AAEtCX,WAAKsB,gBAAgBH;AAErB,aAAO;QACLV,OAAOE;QACPD,KAAKC,YAAYY,IAAI,SAACC,KAAG;AAAK,iBAAAA,MAAMX;SAAM;;WAEvC;AACL,UAAMY,SAASL,KAAKM,IAAG,MAARN,MAAYT,WAAW;AAEtCX,WAAKsB,gBAAgBG,SAASZ;AAE9B,aAAO;QACLJ,OAAOE,YAAYY,IAAI,SAACC,KAAG;AAAK,iBAAAA,MAAMX;SAAM;QAC5CH,KAAKC;;;;AAIb,SAAAjB;AAAA,EAjFiCiC,gBAAI;SCMrBC,UAASC,IAAoB;AAC3C,SAAOA,OAAOjG;AAChB;AAEA,SAAgBkG,UAASC,KAAQ;AAC/B,SAAO,OAAOA,QAAQ;AACxB;AAEA,SAAgBC,UAASD,KAAQ;AAC/B,SAAO,OAAOA,QAAQ;AACxB;AACA,SAAgBE,UAASF,KAAQ;AAC/B,SAAO,OAAOA,QAAQ;AACxB;AAEA,SAAgBG,KAAQC,KAAU;AAChC,SAAOA,IAAIC,OAAO,SAACC,MAAMC,KAAG;AAC1B,WAAA1B,eAAAA,eAAA,CAAA,GAAWyB,MAAI,IAAA,GAAKC,KAAG,IAAA;KACtB,CAAA,CAAE;AACP;AACA,SAAgBC,aAAapC,SAA4B;AAErD,MAAAqC,cAEErC,QAAO,aADNsC,eAAY,OACbtC,SAHE,CAAA,aAAA,CAGL;AAED,SAAA5D,UAAAA,UAAA,CAAA,GACKmG,iBAAiBF,WAAW,CAAC,GAC7BC,YAAY;AAEnB;AACA,SAAgBC,iBAAiBvC,SAA4B;AAC3D,MAAMwC,cAAmC,CAAA;AACzC,MAAMH,cAAmC,CAAA;AACzC,MAAMI,iBAAiBjB,iBAAKiB;AAE5B,WAAWvC,QAAQF,SAAS;AAC1B,QAAM0C,QAAQ1C,QAAQE,IAAI;AAE1B,QAAI,EAAEA,QAAQnE,wBAAwB;AACpCsG,kBAAYnC,IAAI,IAAIwC;;AAGtB,QAAIxC,QAAQuC,gBAAgB;AAC1BD,kBAAYtC,IAAI,IAAIwC;;;AAGxB,SAAAtG,UAAAA,UAAA,CAAA,GACKoG,WAAW,GAAA;IACdH;;AAEJ;AAEA,SAAgBM,WAAiEnD,OAAa;AAC5F,MAAMoD,SAAwC,CAAA;AAC9C,MAAMC,YAA6D,CAAA;AACnE,MAAMC,sBAAwD,CAAA;AAE9DtD,QAAMuD,OAAO,SAAClD,MAAI;AAAK,WAAAA,KAAK3C,YAAY;GAAI,EAAE8F,QAAQ,SAACC,IAAY;QAAV/F,WAAQ,GAAA;AAC/D4F,wBAAoB5F,QAAS,IAAI;GAClC;AAED,MAAIgG;AACJ,MAAIC,uBAAuB;AAE3B3D,QAAMwD,QAAQ,SAACnD,MAAMuD,GAAC;AACpB,QAAIvD,KAAK3C,YAAY,MAAM;AACzBiG,6BAAuB;eACd,CAACtD,KAAKtC,YAAYiC,MAAM4D,IAAI,CAAC,GAAG;AAGzCvD,WAAK3C,WAAWsC,MAAM4D,IAAI,CAAC,EAAElG;AAC7BiG,6BAAuB;WAClB;AACL,UAAI,CAACA,sBAAsB;AACzBD,4BAAoBG,QAAQP,mBAAmB;AAC/CK,+BAAuB;AACvBL,4BAAoBI,iBAAiB,IAAI;;AAE3CrD,WAAK3C,WAAWgG;;AAGlB,QAAMhG,WAAW2C,KAAK3C;AACtB,QAAIoG,QAAQT,UAAU3F,QAAQ;AAE9B,QAAI,CAACoG,OAAO;AACVA,cAAQ;QACNpG;QACAsC,OAAO,CAAA;;AAETqD,gBAAU3F,QAAQ,IAAIoG;AACtBV,aAAOW,KAAKD,KAAK;;AAGnBA,UAAM9D,MAAM+D,KAAK1D,IAAI;GACtB;AACD,SAAO+C;AACT;AAEA,SAAgBY,eACdC,UACAC,UACAC,iBACAC,eAAqB;AAErB,MAAMC,SAASC,KAAKL,UAAUC,UAAU,SAACvG,KAAG;AAAK,WAAAA;GAAG;AACpD,MAAI4G,kBAAkB;AACtB,MAAIC,gBAAgB;AAGpBH,SAAOI,WAAWjB,QAAQ,SAACC,IAAsB;QAArBiB,YAAS,GAAA,CAAA,GAAEC,YAAS,GAAA,CAAA;AAC9C,QAAIR,mBAAmBO,aAAaA,aAAaN,eAAe;AAC9D,UAAIG,oBAAoB,IAAI;AAC1BA,0BAAkBI;AAClBH,wBAAgBG;aACX;AACLJ,0BAAkB9C,KAAKM,IAAIwC,iBAAiBI,SAAS;AACrDH,wBAAgB/C,KAAKC,IAAI8C,eAAeG,SAAS;;;GAGtD;AACD,SAAO;IACLC,aAAaL;IACbM,WAAWL;;AAEf;AACA,SAAgBM,mBACd1B,QACAzC,WACAoE,YAAsD;AAEtD,MAAIC,gBAAyB,CAAA;AAE7B,MAAIrE,cAAc,SAAS;AACzB,QAAMsE,QAAQC,UAAU9B,QAAQ,SAACU,OAAK;AAAK,aAAAA,MAAMrG,SAASS,WAAWS;KAAM;AAE3E,QAAIsG,UAAU,IAAI;AAChB,aAAO,CAAA;;AAGT,QAAME,qBAAqBD,UAAU9B,QAAQ,SAACU,OAAK;AACjD,aAAOoB,UAAUH,YAAY,SAACK,WAAS;AAAK,eAAAA,UAAU1H,aAAaoG,MAAMpG;OAAQ,KAAK;KACvF;AACD,QAAM2H,WAAWF,sBAAsB,IAAI1D,KAAKM,IAAIkD,OAAOE,kBAAkB,IAAIF;AAEjFD,oBAAgB5B,OAAOkC,MAAM,GAAGD,QAAQ;SACnC;AACL,QAAMJ,QAAQM,cAAcnC,QAAQ,SAACU,OAAK;AAAK,aAAAA,MAAMrG,SAASS,WAAWS;KAAM;AAE/E,QAAIsG,UAAU,IAAI;AAChB,aAAO,CAAA;;AAET,QAAMO,uBAAuBD,cAAcnC,QAAQ,SAACU,OAAK;AACvD,aAAOoB,UAAUH,YAAY,SAACK,WAAS;AAAK,eAAAA,UAAU1H,aAAaoG,MAAMpG;OAAQ,KAAK;KACvF;AACD,QAAM+H,aAAaD,wBAAwB,IAAI/D,KAAKC,IAAIuD,OAAOO,oBAAoB,IAAIP;AAEvFD,oBAAgB5B,OAAOkC,MAAMG,aAAa,CAAC;;AAG7C,SAAOT;AACT;AAEA,SAAgBU,uBACdC,WACAnH,YAAmB;AAEnB,MAAM4E,SAASD,WAAWwC,SAAS;AAEnC,MAAI,CAACvC,OAAO,CAAC,GAAG;AACd,WAAO,CAAA;;AAET,SAAOA,OAAO,CAAC,EAAEpD,MAAM4B,IAAI,SAACvB,MAAI;AAC9B,WAAO,IAAI9B,iBAAiBC,YAAU5B,UAAA,CAAA,GACjCyD,IAAI,CAAA;GAEV;AACH;AACA,SAAgBuF,0BACdC,oBACAF,WACAG,gBACAtH,YAAmB;AAEnB,MAAMuH,aAAaF,mBAAmBzC;AACtC,MAAMA,SAASD,WAAWwC,SAAS;AAEnC,MAAMK,qBAAqBlB,mBAAmBiB,YAAY,SAAS3C,MAAM;AACzE,MAAM6C,mBAAmBnB,mBAAmBiB,YAAY,OAAO3C,MAAM;AACrE,MAAM2B,aAAa9D,eAAAA,eAAAA,eAAAA,CAAAA,GACd+E,oBAAkB,IAAA,GAClB5C,QAAM,IAAA,GACN6C,kBAAgB,IAAA;AAEf,MAAAxC,KAGFO,eACF+B,WAAWnE,IAAI,SAACkC,OAAK;AAAK,WAAAA,MAAMpG;GAAQ,GACxCqH,WAAWnD,IAAI,SAACkC,OAAK;AAAK,WAAAA,MAAMpG;GAAQ,GACxCmI,mBAAmBK,QAAQ,CAAC,GAC5BL,mBAAmBK,QAAQ,CAAC,CAAC,GAN7BtB,cAAW,GAAA,aACXC,YAAS,GAAA;AAQX,MAAIsB,mBAAmB5D,KAAKwC,WAAWO,MAAMV,aAAaC,YAAY,CAAC,EAAEjD,IAAI,SAACkC,OAAK;AACjF,WAAOA,MAAM9D,MAAM4B,IAAI,SAACvB,MAAI;AAC1B,aAAO,IAAI9B,iBAAiBC,YAAU5B,UAAA,CAAA,GAAOyD,IAAI,CAAA;KAClD;GACF,CAAC;AAEF,MAAI,CAACyF,gBAAgB;AACnBK,uBAAmBA,iBAAiB5C,OAAO,SAAClD,MAAI;AAC9C,aAAOA,KAAK5C,SAASU,UAAUa;KAChC;;AAGH,SAAOmH;AACT;AAEA,SAAgBC,oBAAoBpG,OAA+BQ,SAAyB;AAExF,MAAA6F,OAKE7F,QAAO,MAJTsF,iBAIEtF,QAAO,gBAHT8F,aAGE9F,QAAO,YAFT+F,iBAEE/F,QAAO,gBADTd,SACEc,QAAO;AACX,MAAI,CAAC6F,MAAM;AACT;;AAEF,MAAIP,gBAAgB;AAClBO,SAAKG,eAAe,CAAA,CAAE;;AAExB,MAAIF,YAAY;AACdD,SAAKI,WAAW,CAAA,CAAE;;AAEpB,MAAI/G,QAAQ;AACV2G,SAAKK,UAAUhH,QAAQ,IAAI;;AAG7B2G,OAAKM,UAAU3G,KAAK;AAEpB,MAAIuG,kBAAkB,CAAC7G,UAAU2G,KAAKO,UAAS,EAAG/F,QAAQ;AACxDwF,SAAKQ,WAAW,GAAG,GAAG,IAAI;;AAE9B;AACA,SAAgBC,kBAAkB9G,OAA+BQ,SAAyB;AAEtF,MAAAd,SAMEc,QAAO,QALTsF,iBAKEtF,QAAO,gBAJT8F,aAIE9F,QAAO,YAHThC,aAGEgC,QAAO,YAFT+F,iBAEE/F,QAAO,gBADT6F,OACE7F,QAAO;AACX,MAAIuG,eAAmC,CAAA;AAEvC,MAAIV,MAAM;AACRA,SAAKG,eAAeV,iBAAiB,CAAA,IAAK,IAAI;AAC9CO,SAAKI,WAAWH,aAAa,CAAA,IAAK,IAAI;AACtCD,SAAKM,UAAU3G,KAAK;AAEpB+G,mBAAeV,KAAKS,kBAAiB;aAC5BpH,QAAQ;AACjBqH,mBAAenB,0BAA0BlG,OAAOsH,cAAchH,OAAO,CAAC,CAAC8F,gBAAgB,CAAC,CAACtH,UAAU;aAC1F+H,gBAAgB;AACzBQ,mBAAerB,uBAAuB1F,OAAO,CAAC,CAACxB,UAAU;;AAG3D,SAAOuI;AACT;AAGA,SAAgBE,yBAAyBC,WAGxC;AAEG,MAAAzH,YAEEyH,UAAS,WADXC,gBACED,UAAS;yBACFxG,OAAI;AACb,QAAM1C,aAAkC;MACtCoJ,YAAY;MACZC,cAAc;MACdC,KAAA,WAAA;AACE,YAAM9G,UAAU,KAAKwG,aAAaxG;AAClC,YAAIE,SAAQF,SAAS;AACnB,iBAAOA,QAAQE,KAAI;eACd;AACL,iBAAOF,QAAQqC,YAAYnC,KAAI;;;MAGnC6G,KAAA,SAAwBrE,OAAU;;AAChC,YAAMsE,YAAY,KAAKR,aAAatG,KAAI;AAExC,YAAI8G,cAActE,OAAO;AACvB;;AAEF,aAAK8D,aAAanE,eAAW,KAAA,CAAA,GAC3BY,GAAC/C,KAAI,IAAGwC,OAAK;;;AAInBuE,WAAOC,eAAejI,WAAWiB,OAAM1C,UAAU;;AAvBnD,WAAW0C,QAAQyG,eAAa;YAArBzG,IAAI;;AAyBjB;AAEA,SAAgBmD,QACd8D,gBACAC,QAAW;AAAX,MAAA,WAAA,QAAA;AAAAA,aAAAA;;AAEA,MAAI3C,QAAQ;AAEZ,SAAO,MAAM;AACX,QAAMtH,MAAM,gBAAA,OAAgBiK,MAAM,EAAA,OAAG3C,OAAO;AAE5C,QAAI,EAAEtH,OAAOgK,iBAAiB;AAC5B,aAAOhK;;;AAGb;AAEA,SAAgBkK,qBAAqBhK,MAAY;AAC/C,MAAMiK,QAAQC,SAASC,cAAc,KAAK;AAE1CF,QAAMG,YAAYpK;AAClB,SAAOqK,SAAQJ,MAAMK,QAAQ;AAC/B;AAEA,SAAgBC,qBACdpI,OACAtC,UAA0B;AAE1B,MAAI2K;AAEJ,MAAIhG,UAASrC,KAAK,GAAG;AACnBqI,oBAAgBR,qBAAqB7H,KAAK;SACrC;AACLqI,oBAAgBrI;;AAElB,SAAOqI,cAAczG,IAAI,SAACvB,MAAI;AAC5B,QAAIzC;AACJ,QAAIC,OAAO;AACX,QAAIF;AAEJ,QAAI0E,UAAShC,IAAI,GAAG;AAClBxC,aAAOwC;eACE,gBAAgBA,MAAM;AAC/BzC,gBAAUyC;AACVxC,aAAOwC,KAAKiI;WACP;AAEL,aAAA1L,UAAA;QAASc;QAAUK,UAAU;SAASsC,IAAI;;AAI5C,WAAO;MACL1C;MACAD;MACAG;MACAD;MACAG,UAAU;;GAEb;AACH;AAGA,SAAgBmK,SAAWK,OAA2C;AACpE,MAAMC,QAAa,CAAA;AAEnB,MAAID,OAAO;AACT,QAAM1H,UAAS0H,MAAM1H;AAErB,aAAS+C,IAAI,GAAGA,IAAI/C,SAAQ+C,KAAK;AAC/B4E,YAAMzE,KAAKwE,MAAM3E,CAAC,CAAC;;;AAGvB,SAAO4E;AACT;AAGA,SAcgBtD,UAAa1C,KAAUiG,UAA8C;AACnF,MAAM5H,UAAS2B,IAAI3B;AACnB,WAAS+C,IAAI,GAAGA,IAAI/C,SAAQ,EAAE+C,GAAG;AAC/B,QAAI6E,SAASjG,IAAIoB,CAAC,GAAGA,CAAC,GAAG;AACvB,aAAOA;;;AAIX,SAAO;AACT;AAEA,SAAgB2B,cAAiB/C,KAAUiG,UAA8C;AACvF,MAAM5H,UAAS2B,IAAI3B;AACnB,WAAS+C,IAAI/C,UAAS,GAAG+C,KAAK,GAAG,EAAEA,GAAG;AACpC,QAAI6E,SAASjG,IAAIoB,CAAC,GAAGA,CAAC,GAAG;AACvB,aAAOA;;;AAIX,SAAO;AACT;AAEA,SAAgB8E,YAAYC,MAA0B;AACpD,MAAMC,WAAiC,CAAA;AAEvC,WAAWlI,QAAQiI,MAAM;AACvB,QAAIjI,QAAQlD,sBAAsB;AAChCoL,eAASlI,IAAI,IAAIiI,KAAKjI,IAAI;;;AAI9B,SAAOkI;AACT;AAEA,SAAgBpC,eAAenG,MAAwBsI,MAA4B;AACjF,WAAWjI,QAAQiI,MAAM;AACvB,QAAMzF,QAAQyF,KAAKjI,IAAI;AAEvB,QAAI4B,UAASY,KAAK,GAAG;AACnB7C,WAAKK,IAAI,IAAC9D,UAAAA,UAAA,CAAA,GACLyD,KAAKK,IAAI,CAAC,GACVwC,KAAK;WAEL;AACL7C,WAAKK,IAAI,IAAIiI,KAAKjI,IAAI;;;AAG5B;AAEA,SAAgBmI,cAAc/H,OAAiBC,KAAa;AAC1D,SAAOD,MAAMD,WAAWE,IAAIF,UAAUC,MAAMgI,MAAM,SAACjH,KAAK+B,GAAC;AAAK,WAAA7C,IAAI6C,CAAC,MAAM/B;GAAG;AAC9E;AAEA,SAAgBkH,OAAMlI,SAAc;AAClC,MAAM2B,MAAgB,CAAA;AACtB,WAASoB,IAAI,GAAGA,IAAI/C,SAAQ,EAAE+C,GAAG;AAC/BpB,QAAIuB,KAAKH,CAAC;;AAEZ,SAAOpB;AACT;AAEA,SAAgBwG,WAAW5F,QAA2B;AACpD,SAAOb,KAAKa,OAAOxB,IAAI,SAAC6B,IAAQ;QAAN4C,OAAI,GAAA;AAAO,WAAAA,KAAK4C,SAAQ;GAAwB,CAAC;AAC7E;AAGA,SAAgBC,eACdlJ,OACAmJ,qBAA6B;AAE7B,MAAIA,qBAAqB;AACvB,WAAAlI,eAAA,CAAA,GAAWjB,OAAK,IAAA;SACX;AACL,WAAOA,MAAMuD,OAAO,SAAClD,MAAI;AAAK,aAAAA,KAAK5C,SAASU,UAAUa;KAAO;;AAEjE;AAgBA,IAAaoK,0BAA0BC,iBAAiBpL,oBAAoB;ACzc5E,IAAA,eAAA,SAAA,QAAA;AAAkCK,EAAAA,WAAAA,eAAAA,MAAAA;AAuBhC,WAAAgL,cAAYC,WAAwB/I,SAA4B;AAAhE,QAAA,QACE9B,OAAAA,KAAAA,MAAM6K,WAAW3G,aAAapC,OAAO,CAAC,KAAC;AAX/BzB,UAAAA,aAAiC,CAAA;AACjCA,UAAAA,SAA8B,CAAA;AAC9BA,UAAAA,WAAsD,CAAA;AACtDA,UAAAA,YAAwD,CAAA;AACxDA,UAAAA,cAAc;AACdA,UAAAA,YAAY;AACdA,UAAAA,eAAuD;AAO7DA,UAAKyK,eAAe,IAAIzJ,YAAYwJ,WAAW;MAC7CE,0BAA0B1K,MAAK2K;MAC/BjN,QAAQ;MACRC,YAAY;MACZF,wBAAwB;MACxBmN,KAAK5K,MAAK4K;KACX;AACD5K,UAAK6K,YAAY7K,MAAK8K,UAAS;;;AAChC,MAAArK,UAAA8J,cAAA7J;AACDgI,SAAAA,eAAAA,SAAAA,eAAsB;SAAtB,SAAuBjH,SAA4B;AACjD,UAAMiD,KAGFV,iBAAiBvC,OAAO,GAF1BqC,cAAW,GAAA,aACRC,eAAY,OAAA,IAFX,CAAA,aAAA,CAGL;AAED,UAAMgH,eAAe,KAAKC,mBAAmBvJ,OAAO;AACpD,WAAKA,QAAQqC,cAAWjG,UAAAA,UAAA,CAAA,GACnB,KAAK4D,QAAQqC,WAAW,GACxBA,WAAW;AAEhB5B,MAAAA,eAAAA,CAAC,KAAK2I,SAAS,GAAK,KAAKxG,OAAOxB,IAAI,SAAC6B,KAAQ;YAAN4C,OAAI5C,IAAA;AAAO,eAAA4C;OAAI,GAAC,IAAA,EAAE7C,QAAQ,SAAC6C,MAAI;AACpE,iBAAW3F,SAAQF,SAAS;AACzB6F,eAAa3F,KAAI,IAAIF,QAAQE,KAAI;;OAErC;AACD,eAAWA,QAAQoC,cAAc;AAC/B,aAAKpC,IAAI,IAAIoC,aAAapC,IAAI;;AAGhC,WAAK8I,aAAaG,MAAM,KAAKA;AAC7B,UAAIG,cAAc;AAChB,aAAKE,eAAc;;;;;;AAIhBxK,UAAA,eAAP,SAAoB7B,KAAoB;AACtC,WAAO,KAAKsM,SAAStM,GAAG,KAAK;;AAGxB6B,UAAA,gBAAP,SAAqB2J,qBAA6B;AAChD,WAAOD,eAAe,KAAKgB,YAAYf,mBAAmB;;AAErD3J,UAAA,kBAAP,SAAuB2J,qBAA6B;AAClD,WAAOD,eAAe,KAAKlJ,OAAOmJ,mBAAmB;;AAGhD3J,UAAA,oBAAP,WAAA;AACE,QAAI,KAAK2K,eAAc,GAAI;AACzB,aAAO,KAAKnK;WACP;AACL,aAAO,KAAKA,MAAMuD,OAAO,SAAClD,MAAI;AAAK,eAAAA,KAAK5C,SAASU,UAAUa;OAAO;;;AAI/DQ,UAAA,YAAP,SAAiB2J,qBAA6B;AAC5C,WAAOD,eAAe,KAAK9F,QAAQ+F,mBAAmB;;AAGjD3J,UAAA,0BAAP,WAAA;AACE,WAAO,KAAK4K,iBAAiB,IAAI,EAAEC,KAAK,SAACvG,OAAK;AAAK,aAAAA,MAAMrG,SAASS,WAAWc;KAAO;;AAE/EQ,UAAA,iBAAP,WAAA;AACE,WAAO,CAAC,CAAC,KAAK8K;;AAET9K,UAAA,iBAAP,WAAA;AACE,WAAO,CAAC,CAAC,KAAK+K,gBAAe;;AAGxB/K,UAAA,cAAP,SAAmBQ,OAAyBQ,SAAuB;AAAhD,QAAA,UAAA,QAAA;AAAAR,cAAQ,KAAKkK;;AAC9B,WAAOxL,OAAAA,UAAM8L,YAAW,KAAA,MAACxK,OAAOQ,OAAO;;AAElChB,UAAA,iBAAP,SAAsBiL,aAAmD;AACvE,SAAKH,eAAeG;AACpB,SAAKC,mBAAkB;;AAGlBlL,UAAA,iBAAP,WAAA;AACE,WAAO,KAAKgK,aAAa/L;;AAGpB+B,UAAA,eAAP,SAAoB/B,MAAqB;AACvC,SAAK+L,aAAa/L,OAAOA;AACzB,SAAKuC,QAAQ,KAAK2K,mBAAkB;AAEpC,WAAO;;AAGFnL,UAAA,iBAAP,WAAA;AACE,QAAI,KAAKgK,aAAa/L,MAAM;AAC1B,WAAK+L,aAAaoB,YAAY;AAC9B,aAAO;;AAET,WAAO;;AAGFpL,UAAA,aAAP,WAAA;AACE,QAAI,KAAKgK,aAAaoB,WAAW;AAC/B,UAAMC,WAAW,KAAKrB,aAAa/L;AAEnC,WAAK+L,aAAa/L,OAAO;AACzB,WAAK+L,aAAasB,WAAU;AAC5B,WAAK9K,QAAQ,KAAK2K,mBAAkB;AACpC,aAAO,CAAC,CAACE;;AAEX,WAAO;;AAGFrL,UAAA,aAAP,SAAkBuL,SAA+C;AAC/D,SAAKvB,aAAawB,eAAeD,OAAO;AACxC,SAAK/K,QAAQ,KAAK2K,mBAAkB;;AAG/BnL,UAAA,mBAAP,SAAwB2J,qBAA6B;AACnD,QAAM/F,SAAS,KAAKA,OAAOkC,MAAM,KAAKV,aAAa,KAAKC,YAAY,CAAC;AAErE,WAAOqE,eAAe9F,QAAQ+F,mBAAmB;;AAG5C3J,UAAA,2BAAP,SAAgCQ,OAAkB;AAAlB,QAAA,UAAA,QAAA;AAAAA,cAAQ,KAAKA;;AAC3C,WAAO,KAAK4J,UAAUqB,yBAAyBjL,KAAK;;AAE/CR,UAAA,yBAAP,SAA8BQ,OAAkB;AAAlB,QAAA,UAAA,QAAA;AAAAA,cAAQ,KAAKA;;AACzC,WAAO,KAAK4J,UAAUsB,uBAAuBlL,KAAK;;AAG7CR,UAAA,YAAP,SAAiBQ,OAA2BW,WAA4BC,SAAiB;AAAzF,QAAA,QAAA;AACE,QAAMuK,kBAAkB,KAAK/H,OAAOkC,MAAK;AAEzC,QAAI,CAAC6F,gBAAgBtK,QAAQ;AAC3B,aAAO;QACLC,OAAO,CAAA;QACPC,KAAK,CAAA;;;AAKT,QAAMqK,cAAc,KAAK5B;AAEzB,QAAI4B,YAAY7K,eAAc,GAAI;AAChC,UAAI6K,YAAY3N,SAAS,SAAS;AAChC0N,wBAAgBE,QAAQ,KAAKC,iBAAgB,CAAE;iBACtCF,YAAY3N,SAAS,OAAO;AACrC0N,wBAAgBpH,KAAK,KAAKuH,iBAAgB,CAAE;;;AAIhD,QAAMlI,SAAS+H,gBAAgB7F,MAAK;AAEpC,QAAItE,cAAcJ;AAElB,QAAID,cAAc,SAAS;AACzByC,aAAOmI,QAAO;;AAGhB,QAAMC,qBAAqB,KAAKhL,QAAQgL;AACxC,QAAMtB,aAAa,KAAKA;AACxB,QAAMuB,gBAAgB,KAAKR,yBAAyBf,UAAU;AAC9D,QAAMwB,cAAc,KAAKR,uBAAuBhB,UAAU;AAC1D,QAAMyB,eAAe,KAAKA;AAC1B,QAAIC,cAAkC,CAAA;AAEtCxI,WAAOI,QAAQ,SAACM,OAAK;;AACnB,UAAMuC,OAAOvC,MAAMuC;AACnB,UAAMwF,YAAYxF,KAAK4C,SAAQ;AAC/B,UAAM6C,YAAYhI,MAAMrG,SAASS,WAAWc,WAAW,CAAC6M,UAAU,CAAC;AAEnED,oBAAcjL,cAAc,QAAKM,eAAAA,eAAA,CAAA,GAAO2K,aAAW,IAAA,GAAKC,WAAS,IAAA,IAAA5K,eAAAA,eAAA,CAAA,GAAQ4K,WAAS,IAAA,GAAKD,aAAW,IAAA;AAClGvF,WAAKoF,gBAAgBA;AACrBpF,WAAKqF,cAAcA;AAEnB,UAAMK,eAAeH,YAAYrI,OAAO,SAAClD,MAAI;AAC3C,YAAIA,KAAKjB,eAAeC,YAAY2M,aAAa,CAAC3L,KAAKpB,KAAKC,OAAO;AACjEyM,uBAAaM,WAAW5L,MAAM,IAAI;;AAEpC,eAAQA,KAAKd,QAAQL,SAASmB,KAAKpB,KAAKC,SAAUsM,mBAAmBnL,MAAMgG,IAAI;OAChF;AACD,UAAI6F;AAEJ,UAAIJ,WAAW;AACbI,uBAAenN,MAAKoN,kBAAkB9F,MAAM1F,WAAWK,WAAW;iBACzD+K,aAAalL,QAAQ;AAC9BqL,uBAAe7F,KAAK+F,UAAUL,cAAcpL,WAAWK,WAAW;aAC7D;AACLkL,uBAAe;UACbpL,OAAKG,eAAA,CAAA,GAAMD,aAAW,IAAA;UACtBD,KAAGE,eAAA,CAAA,GAAMD,aAAW,IAAA;;;AAIxBqF,WAAKgG,YAAYH,YAAY;AAC7BlL,oBAAckL,aAAaI,UAAUJ,aAAavL,SAAS;AAC3DiL,qBAAc,MAAA,KAAAM,aAAaN,iBAAW,QAAA,OAAA,SAAA,SAAA,GAAEhK,IAAI,SAACqD,OAAK;AAAK,eAAA2G,YAAY3G,KAAK;OAAC,OAAC,QAAA,OAAA,SAAA,KAAI,CAAA;KAC/E;AAED,WAAO;MACLnE,OAAOqK,gBAAgB,CAAC,EAAE9E,KAAKkG,YAAW,EAAGzL;MAC7CC,KAAKoK,gBAAgBA,gBAAgBtK,SAAS,CAAC,EAAEwF,KAAKkG,YAAW,EAAGxL;;;AAIjEvB,UAAA,YAAP,SAAiBgN,eAAqC;AAAtD,QAAA,QAAA;AACE,QAAMC,eAAe,KAAKxC;AAE1B,SAAKA,WAAW,CAAA;AAChB,QAAMtE,YAAY,KAAK+G,eAAeF,cAAc5K,IAAI,SAAC+G,MAAI;AAAK,aAAAD,YAAYC,IAAI;KAAC,GAAG8D,YAAY;AAClG,QAAME,gBAAgB,KAAKtJ;AAC3B,QAAIuJ,oBAAoBzJ,WAAWwC,SAAS;AAE5C,QAAMK,qBAAqB,KAAK6G,oBAAoB,SAASD,iBAAiB;AAC9E,QAAM3G,mBAAmB,KAAK4G,oBAAoB,OAAOD,iBAAiB;AAC1EA,wBAAiB3L,eAAAA,eAAAA,eAAA,CAAA,GAAO+E,oBAAkB,IAAA,GAAK,KAAK8G,oBAAoBF,iBAAiB,GAAC,IAAA,GAAK3G,kBAAgB,IAAA;AAE/G,QAAMlB,aAAkC6H,kBAAkBhL,IAAI,SAAC6B,IAAmB;;UAAjB/F,WAAQ,GAAA,UAAEsC,QAAK,GAAA;AAC9E,UAAM8L,YAAY,CAAC9L,MAAM,CAAC,KAAKA,MAAM,CAAC,EAAEvC,SAASU,UAAUa;AAC3D,UAAMqH,QAAO,MAAA,KAAAsG,cAAcjP,QAAQ,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE2I,UAAI,QAAA,OAAA,SAAA,KAAItH,MAAK8K,UAAS;AAC5D,UAAMgC,YAAYC,YAAY9L,QAAQA,MAAMuD,OAAO,SAACE,KAAQ;YAANhG,OAAIgG,IAAA;AAAO,eAAAhG,SAASU,UAAUQ;OAAM;AAE1F0H,WAAK0G,SAASlB,SAAS;AAEvB,aAAO;QACLpO,MAAMqO,YAAY5N,WAAWc,UAAUd,WAAWS;QAClDjB;QACA2I;QACArG,OAAO6L;QACPmB,aAAahN;;KAEhB;AAED,SAAKiN,gBAAgBlI,UAAU;;AAG1BvF,UAAA,cAAP,SAAmBgB,SAA2B;AAA3B,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AACjB,QAAIA,QAAQ0M,WAAW;AACrB,WAAKhD,WAAW1G,QAAQ,SAACnD,MAAI;AAC3BA,aAAK8M,cAAcC,aAAaC;OACjC;AACD,UAAM/M,cAAc,KAAKiK,gBAAe;AAExC,UAAIjK,aAAa;AACfA,oBAAY6M,cAAcC,aAAaC;;;AAG3C,WAAO3O,OAAAA,UAAMsO,YAAW,KAAA,MAACxM,OAAO;;AAG3BhB,UAAA,aAAP,SAAkBoF,aAAqBC,WAAiB;AACtD,SAAKD,cAAcA;AACnB,SAAKC,YAAYA;AACjB,SAAK7E,QAAQ,KAAK2K,mBAAkB;;AAG/BnL,UAAA,iBAAP,WAAA;AACE,WAAO,KAAKoF;;AAGPpF,UAAA,eAAP,WAAA;AACE,WAAO,KAAKqF;;AAGPrF,UAAA,iBAAP,SAAsB/B,MAAoB0L,qBAA6B;AACrE,QAAMmE,iBAAiB,KAAK1I;AAC5B,QAAM2I,eAAe,KAAK1I;AAC1B,QAAM2I,YAAY,KAAKpK;AACvB,QAAMqK,aAAaD,UAAUF,cAAc;AAC3C,QAAMI,WAAWF,UAAUD,YAAY;AAEvC,QAAI3I,cAAc0I;AAClB,QAAIzI,YAAY0I;AAEhB,QAAMI,kBAAkBlQ,SAASW,YAAYwP;AAC7C,QAAMC,mBAAmBpQ,SAASW,YAAY0P;AAC9C,QAAI1K;AAEJ,QAAI3F,SAASW,YAAY2P,yBAAyB;AAChD3K,eAAS,KAAKgH,iBAAiBjB,mBAAmB;AAClDtE,kBAAYzB,OAAOvC,SAAS;AAC5B+D,oBAAc;WACT;AACLxB,eAAS,KAAKwD,UAAUuC,mBAAmB;AAE3C,UAAI,CAACA,qBAAqB;AACxBvE,sBAAc;AACdC,oBAAY;AAEZ,iBAASmJ,WAAWV,gBAAgBU,YAAYT,cAAc,EAAES,UAAU;AACxE,cAAMC,WAAWT,UAAUQ,QAAQ;AAEnC,cAAIC,YAAYA,SAASxQ,SAASS,WAAWc,SAAS;AACpD4F,0BAAcxB,OAAO8K,QAAQD,QAAQ;AACrC;;;AAGJ,iBAASD,WAAWT,cAAcS,YAAYV,gBAAgB,EAAEU,UAAU;AACxE,cAAMC,WAAWT,UAAUQ,QAAQ;AAEnC,cAAIC,YAAYA,SAASxQ,SAASS,WAAWc,SAAS;AACpD6F,wBAAYzB,OAAO+K,YAAYF,QAAQ;AACvC;;;;;AAMR,QAAMG,cAAyChL,OAAOxB,IAAI,SAAC6B,IAAoBG,GAAC;UAAnByC,OAAI,GAAA,MAAE3I,WAAQ,GAAA;AACzE,UAAM2Q,kBAAkBzK,IAAIgB,eAAeC,YAAYjB;AACvD,UAAM0K,iBAAiBX,mBAAmBU;AAC1C,UAAME,iBAAiBV,oBAAoBQ;AAC3C,UAAMxC,YAAYxF,KAAK4C,SAAQ;AAC/B,UAAMjJ,QAAQuO,iBACV,CAAA,IACA1C,UAAUjK,IAAI,SAACvB,MAAI;AAAK,eAAAiO,iBAAiBjO,KAAKmO,iBAAgB,IAAKnO,KAAKV,mBAAkB;OAAE;AAEhG,aAAO;QACLlC,MAAM8Q,kBAAkBD,iBAAiBpQ,WAAWc,UAAUd,WAAWS;QACzEjB;QACA+Q,UAAUpI,KAAKkG,YAAW;QAC1BvM;;KAEH;AAGD,QAAM0O,aAAa,KAAKC,cAAa;AAErC,QAAMC,kBAAkBF,WAAWR,QAAQT,eAAU,QAAVA,eAAU,SAAA,SAAVA,WAAYzN,MAAM,CAAC,CAAC;AAC/D,QAAM6O,gBAAgBH,WAAWR,QAAQR,aAAQ,QAARA,aAAQ,SAAA,SAARA,SAAU1N,MAAMsF,MAAK,EAAGiG,QAAO,EAAG,CAAC,CAAC;AAE7E,WAAO;MACLrF,SAAS,CAACtB,aAAaC,SAAS;MAChCiK,YAAY,CAACxB,gBAAgBC,YAAY;MACzCwB,aAAa,CAACH,iBAAiBC,aAAa;MAC5CG,eAAevB,eAAU,QAAVA,eAAU,SAAA,SAAVA,WAAY/P;MAC3BuR,aAAavB,aAAQ,QAARA,aAAQ,SAAA,SAARA,SAAUhQ;MACvB0F,QAAQgL;MACRK,UAAU,KAAKA;;;AAGTjP,UAAA,cAAV,SAAsB/C,QAAoB;AAApB,QAAA,WAAA,QAAA;AAAAA,eAAS,KAAKA;;AAClC,QAAM2G,SAAS,KAAKA;AAEpB,QAAI,CAACA,OAAO,CAAC,GAAG;AACd;;AAEF,QAAMqL,WAAW,KAAKA;AACtB,QAAMS,eAAeT,SAAS3N;AAC9B,QAAMqO,gBAAgBD,aAAarO,SAASY,KAAKM,IAAG,MAARN,MAAYyN,YAAY,IAAI;AAGxE,QAAI,CAACzS,UAAU0S,gBAAgB,GAAG;AAChC;;AAGF/L,WAAOI,QAAQ,SAACC,IAAQ;UAAN4C,OAAI,GAAA;AACd,UAAA+I,KAAiB/I,KAAKkG,YAAW,GAA/BzL,QAAK,GAAA,OAAEC,MAAG,GAAA;AAElBsF,WAAKgG,YAAY;QACfvL,OAAOA,MAAMc,IAAI,SAACyN,OAAK;AAAK,iBAAAA,QAAQF;SAAa;QACjDpO,KAAKA,IAAIa,IAAI,SAACyN,OAAK;AAAK,iBAAAA,QAAQF;SAAa;OAC9C;KACF;AAED,SAAKjF,WAAW1G,QAAQ,SAACnD,MAAI;AAC3B,UAAMiP,aAAajP,KAAKsB;AAExB,UAAI,CAACQ,UAASmN,UAAU,GAAG;AACzB;;AAEFjP,WAAKsB,gBAAgB2N,aAAaH;KACnC;;AAEI3P,UAAA,iBAAP,SAAsBE,QAA0B;AAAhD,QAAA,QAAA;AACE,SAAKuK,WAAW,CAAA;AAChB,SAAKC,aAAa,CAAA;AAClB,SAAKlK,QAAQ,CAAA;AACb,QAAM2M,gBAAgB,KAAKtJ;AAE3B,QAAM0B,aAAkCrF,OAAO0D,OAAOxB,IAAI,SAAC6B,IAK1D;;UAJChG,OAAI,GAAA,MACJC,WAAQ,GAAA,UACRsC,QAAK,GAAA,OACLyO,WAAQ,GAAA;AAER,UAAM9I,YAAY5G,MAAK2N,eAAe1M,KAAK;AAC3C,UAAMqG,QAAO,MAAA,KAAAsG,cAAcjP,QAAQ,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE2I,UAAI,QAAA,OAAA,SAAA,KAAItH,MAAK8K,UAAS;AAE5DxD,WAAKgG,YAAYoC,QAAQ;AACzBpI,WAAK0G,SAASpH,SAAS;AAEvB,aAAO;QACLlI;QACAC;QACA2I;QACArG,OAAO2F;QACPqH,aAAarH;;KAEhB;AAED,SAAK0G,YAAY3M,OAAO+O,QAAQ;AAChC,SAAKxB,gBAAgBlI,UAAU;AAC/B,SAAK2F,mBAAkB;AACvB,SAAK7D,WAAWnH,OAAOwG,QAAQ,CAAC,GAAGxG,OAAOwG,QAAQ,CAAC,CAAC;;AAE/C1G,UAAA,qBAAP,SAA0BQ,OAA0CtC,UAA0B;AAC5F,WAAO,KAAK6R,mBAAmB,OAAOvP,OAAOtC,QAAQ;;AAEhD8B,UAAA,sBAAP,SAA2BQ,OAA0CtC,UAA0B;AAC7F,WAAO,KAAK6R,mBAAmB,SAASvP,OAAOtC,QAAQ;;AAElD8B,UAAA,qBAAP,SAA0B/B,MAAqD;AAC7E,QAAM2F,SAAS,KAAKA;AACpB,QAAMvC,UAASuC,OAAOvC;AAEtB,QAAIpD,SAAS,SAAS;AACpB,UAAMwH,QAAQC,UAAU9B,QAAQ,SAACU,OAAK;AAAK,eAAAA,MAAMrG,SAASS,WAAWS;OAAM;AAE3EyE,aAAOoM,OAAO,GAAGvK,KAAK;eAEbxH,SAAS,OAAO;AACzB,UAAMwH,QAAQM,cAAcnC,QAAQ,SAACU,OAAK;AAAK,eAAAA,MAAMrG,SAASS,WAAWS;OAAM;AAE/EyE,aAAOoM,OAAOvK,QAAQ,GAAGpE,UAASoE,QAAQ,CAAC;WACtC;AACL,UAAMwK,aAAWhS,KAAKC;AAEtB,UAAMuH,QAAQC,UAAU9B,QAAQ,SAACU,OAAK;AAAK,eAAAA,MAAMpG,aAAa+R;OAAQ;AAEtE,UAAIxK,QAAQ,IAAI;AACd7B,eAAOoM,OAAOvK,OAAO,CAAC;;;AAI1B,SAAK0B,UAAUqC,WAAW,KAAKpC,UAAS,CAAE,CAAC;;AAEtCpH,UAAA,qBAAP,SACEmB,WACAX,OACAtC,UAA+D;;AAA/D,QAAA,aAAA,QAAA;AAAAA,iBAA4BmG,QAAQ,KAAKR,WAAW,UAAU;;AAG9D,QAAIqM,QAAgC,CAAA;AAEpC,QAAIvN,UAASnC,KAAK,GAAG;AACnB0P,cAAQ3G,OAAM/I,KAAK,EAAE4B,IAAI,WAAA;AAAM,eAAC;UAAEnE,MAAMU,UAAUa;UAAStB;;OAAW;eAC7DiS,MAAMC,QAAQ5P,KAAK,GAAG;AAC/B0P,cAAQ1P,MAAM4B,IAAI,SAAClC,QAAM;AAAK,eAAA9C,UAAAA,UAAA;UAC5Bc;WACGgC,MAAM,GAAA;UACTjC,MAAMU,UAAUa;;OAChB;;AAEJ,QAAMqH,OAAO,KAAKwD,UAAS;AAC3B,QAAMlE,YAAY,KAAK+G,eAAegD,OAAO,KAAKzF,QAAQ;AAE1D,SAAKS,mBAAmB/E,SAAS;AACjCU,SAAK0G,SAASpH,SAAS;AAEvB,QAAM7B,QAAQ;MACZrG,MAAMS,WAAWc;MACjBtB;MACA2I;MACArG,OAAO2F;MACPqH,aAAarH;;AAGf,SAAKtC,UAAU3F,QAAQ,IAAIoG;AAE3B,QAAInD,cAAc,OAAO;AACvB,WAAKyC,OAAOW,KAAKD,KAAK;AACtB,OAAAL,KAAA,KAAKyG,YAAWnG,KAAI,MAAA,IAAI4B,SAAS;WAC5B;AACL,WAAKvC,OAAOoM,OAAO,GAAG,GAAG1L,KAAK;AAC9B,OAAAsL,KAAA,KAAKlF,YAAWsF,OAAM,MAAA,IAAAvO,eAAA,CAAC,GAAG,CAAC,GAAK0E,WAAS,KAAA,CAAA;AACzC,UAAI,KAAKf,cAAc,IAAI;AACzB,UAAE,KAAKA;AACP,UAAE,KAAKC;;;AAKX,WAAO;MACLf;MACA9D,OAAO2F;;;AAIJnG,UAAA,sBAAP,WAAA;AACE,QAAIqQ,aAAa;AAEjB,SAAKzF,iBAAgB,EAAG5G,QAAQ,SAACM,OAAK;AACpC,UAAM9D,QAAQ8D,MAAM9D;AAEpB,UACEA,MAAMa,WAAWiD,MAAMkJ,YAAYnM,UAChCb,MAAM8I,MAAM,SAACzI,MAAI;AAAK,eAAAA,KAAKjB,eAAeC,YAAY2M;OAAS,GAClE;AACA;;AAEF6D,mBAAa;AACb/L,YAAMkJ,cAAW/L,eAAA,CAAA,GAAOjB,OAAK,IAAA;KAC9B;AACD,QAAI6P,YAAY;AACd,WAAK7P,QAAQ,KAAK2K,mBAAkB;;AAEtC,WAAOkF;;AAgBCrQ,UAAA,eAAV,SAAuBQ,OAAiB;AACtC,SAAK2L,aAAamE,qBAAqB9P,OAAO,KAAKkK,UAAU;;AAGvD1K,UAAA,iBAAR,WAAA;AACE,WAAOwJ,WAAW,KAAKpC,UAAU,IAAI,CAAC;;AAGhCpH,UAAA,qBAAR,WAAA;AACE,QAAMQ,QAAQuC,KAAK,KAAK6H,iBAAiB,IAAI,EAAExI,IAAI,SAACvB,MAAI;AAAK,aAAAA,KAAK2M;KAAW,CAAC;AAG9E,QAAM5B,cAAc,KAAK5B;AACzB,QAAMlJ,cAAc8K,YAAY7K,eAAc;AAE9C,QAAID,aAAa;AACf,UAAI8K,YAAY3N,SAAS,OAAO;AAC9BuC,cAAM+D,KAAKzD,WAAW;iBACb8K,YAAY3N,SAAS,SAAS;AACvCuC,cAAMqL,QAAQ/K,WAAW;;;AAI7B,WAAON;;AAGDR,UAAA,qBAAR,SAA2BgB,SAA4B;AACrD,QAAMuP,kBAAkB,KAAKvP,QAAQwP;AACrC,QAAMC,cAAc,KAAKpN;AACzB,QAAMsE,gBAAgB4I,gBAAgB5I;AAEtC,aAAWzG,QAAQuP,aAAa;AAC9B,UAAI,EAAEvP,QAAQF,YAAY2G,cAAczG,IAAI,MAAMwP,cAAcC,iBAAiB;AAC/E,eAAO;;;AAGX,aAAWzP,QAAQF,SAAS;AAC1B,UAAIyP,YAAYvP,IAAI,MAAMF,QAAQE,IAAI,KAAKyG,cAAczG,IAAI,MAAMwP,cAAcC,iBAAiB;AAChG,eAAO;;;AAGX,WAAO;;AAED3Q,UAAA,oBAAR,SAA0B6G,MAAY1F,WAA4BC,SAAiB;AACjF,QAAMsO,eAAetO,QAAQC,SAAMI,eAAA,CAAA,GAAOL,SAAO,IAAA,IAAI,CAAC,CAAC;AACvD,QAAMwP,eAAe/J,KAAKkG,YAAW;AACrC,QAAM8D,cAAcD,aAAazP,cAAc,QAAQ,UAAU,KAAK;AAEtE,QACE0P,YAAYxP,WAAWqO,aAAarO,UACjCwP,YAAYhG,KAAK,SAACnH,OAAOU,GAAC;AAAK,aAAAV,UAAUgM,aAAatL,CAAC;KAAC,GAC3D;AACA,aAAO;QACL9C,OAAKG,eAAA,CAAA,GAAMiO,cAAY,IAAA;QACvBnO,KAAGE,eAAA,CAAA,GAAMiO,cAAY,IAAA;;;AAGzB,WAAOkB;;AAED5Q,UAAA,iBAAR,SACEgN,eACAC,cAA4D;AAA5D,QAAA,iBAAA,QAAA;AAAAA,qBAAAA,CAAAA;;AAEA,QAAMjO,aAAa,KAAKgC,QAAQhC;AAChC,QAAM8R,eAAe,KAAKrG;AAE1BuC,kBAAcjJ,OAAO,SAACoF,MAAI;AAAK,aAAAA,KAAKhL,OAAO;KAAI,EAAE6F,QAAQ,SAACmF,MAAI;AAC5D,UAAMhL,MAAMgL,KAAKhL;AACjB,UAAM4S,WAAW9D,aAAa9O,GAAG;AAEjC,UAAI,CAAC4S,UAAU;AACbD,qBAAa3S,GAAG,IAAI,IAAIY,iBAAiBC,YAAU5B,UAAA,CAAA,GAC9C+L,IAAI,CAAA;iBAEA4H,SAAS9S,SAASU,UAAUa,WAAW2J,KAAKlL,SAASU,UAAUa,SAAS;AACjFsR,qBAAa3S,GAAG,IAAI,IAAIY,iBAAiBC,YAAU5B,UAAA;UACjD2C,SAASgR,SAAShR;UAClBN,MAAMsR,SAAStR;WACZ0J,IAAI,CAAA;aAEJ;AACL,YAAIA,KAAK7K,MAAM;AACbyS,mBAASzS,OAAO6K,KAAK7K;;AAEvB,YAAI6K,KAAKjL,YAAY,MAAM;AACzB6S,mBAAS7S,WAAWiL,KAAKjL;;AAE3B,YAAIiL,KAAK/K,SAAS;AAChB2S,mBAAS3S,UAAU+K,KAAK/K;;AAE1B0S,qBAAa3S,GAAG,IAAI4S;;KAEvB;AACD,QAAM5K,YAAY6G,cAAc5K,IAAI,SAAC+G,MAAI;AACvC,UAAIhL,MAAMgL,KAAKhL;AAEf,UAAIgL,KAAKhL,OAAO,MAAM;AACpBA,cAAMkG,QAAQyM,cAAc3H,KAAKlL,SAASU,UAAUa,UAAU,aAAa,EAAE;;AAE/E,UAAIqB,OAAOiQ,aAAa3S,GAAG;AAE3B,UAAI,CAAC0C,MAAM;AACT,YAAMkQ,WAAW9D,aAAa9O,GAAG;AAEjC,YAAI4S,UAAU;AACZlQ,iBAAOkQ;AAEP,cAAI5H,KAAK7K,MAAM;AACbuC,iBAAKvC,OAAO6K,KAAK7K;;AAEnB,cAAI6K,KAAK/K,SAAS;AAChByC,iBAAKzC,UAAU+K,KAAK/K;;eAEjB;AACLyC,iBAAO,IAAI9B,iBAAiBC,YAAU5B,UAAAA,UAAA,CAAA,GACjC+L,IAAI,GAAA;YACPhL;;;AAGJ2S,qBAAa3S,GAAG,IAAI0C;;AAEtB,aAAOA;KACR;AACD,WAAOsF;;AAEDnG,UAAA,kBAAR,SAAwB4D,QAA2B;AACjD,QAAMoN,gBAA4D,CAAA;AAElEpN,WAAOI,QAAQ,SAACM,OAAK;AACnB0M,oBAAc1M,MAAMpG,QAAQ,IAAIoG;KACjC;AAED,SAAKV,SAASA;AACd,SAAKC,YAAYmN;AACjB,SAAKtG,aAAa,KAAKuG,eAAc;;AAE/BjR,UAAA,sBAAR,SAA4BmB,WAA4BoE,YAA8B;AACpF,QAAM3B,SAAS0B,mBAAmB,KAAK1B,QAAQzC,WAAWoE,UAAU;AACpE,QAAMkF,WAAW,KAAKA;AAEtB7G,WAAOI,QAAQ,SAACC,IAAe;UAAbuJ,cAAW,GAAA;AAC3BA,kBAAYxJ,QAAQ,SAACnD,MAAI;AACvB4J,iBAAS5J,KAAK1C,GAAG,IAAI0C;OACtB;KACF;AAED,WAAO+C;;AAED5D,UAAA,sBAAR,SAA4B4D,QAAiD;AAC3E,QAAM6G,WAAW,KAAKA;AACtB,QAAM5G,YAAY,KAAKA;AAEvBD,WAAOI,QAAQ,SAACM,OAAK;AACnB,UAAM4M,YAAYrN,UAAUS,MAAMpG,QAAQ;AAE1C,UAAI,CAACgT,WAAW;AACd;;AAEF,UAAM1Q,QAAQ8D,MAAM9D;AAEpB,UAAIA,MAAM8I,MAAM,SAACzI,MAAI;AAAK,eAAAA,KAAKjB,eAAeC,YAAY2M;OAAS,GAAG;AACpE0E,kBAAU1D,YAAYxJ,QAAQ,SAACnD,MAAI;AACjC,cAAIA,KAAK5C,SAASU,UAAUa,WAAW,CAACiL,SAAS5J,KAAK1C,GAAG,GAAG;AAC1DqC,kBAAM+D,KAAK1D,IAAI;AACf4J,qBAAS5J,KAAK1C,GAAG,IAAI0C;;SAExB;;KAEJ;AACD,WAAO+C;;AAGD5D,UAAA,qBAAR,SAA2BQ,OAAuB;AAAvB,QAAA,UAAA,QAAA;AAAAA,cAAQ,KAAKkK;;AACtC,QAAMO,cAAc,KAAKH;AAEzB,QAAI,CAACG,aAAa;AAChB;;AAGFzK,UAAMuD,OAAO,SAAClD,MAAI;AAAK,aAAAA,KAAK5C,SAASU,UAAUa;KAAO,EAAEwE,QAAQ,SAACnD,MAAI;AACnEmG,qBAAenG,MAAMoK,WAAW;KACjC;;AAEKjL,UAAA,YAAR,WAAA;AACE,QAAMuQ,kBAAkB,KAAKvP,QAAQwP;AACrC,QAAMnN,cAAc,KAAKA;AACzB,QAAM0G,YAAY,KAAKoH;AAEvB,WAAO,IAAIZ,gBAAgBxG,WAAS3M,UAAAA,UAAA,CAAA,GAC/BiG,WAAW,GAAA;MACdpG,QAAQ;MACRC,YAAY;MACZkU,mBAAmB;MACnBC,iBAAiB;MACjBrU,wBAAwB;MACxBiN,0BAA0B,KAAKC;MAC/BoH,sBAAsB,KAAKnF;;;AAGvBnM,UAAA,mBAAR,WAAA;AACE,QAAM4L,cAAc,KAAK5B;AACzB,QAAMxJ,QAAQoL,YAAYnC,SAAQ;AAElC,WAAO;MACLvL,UAAUmC;MACVpC,MAAMS,WAAWS;MACjB0H,MAAM+E;MACNpL;MACAgN,aAAahN;;;AAGTR,UAAA,kBAAR,WAAA;AACE,WAAO,KAAKgK,aAAajJ,eAAc;;AAnvB3B+I,EAAAA,cAAAA,iBAAc1M,UAAAA,UAAA,CAAA,GACvBoF,iBAAKiB,cAAc,GAAA;IACtBuI,oBAAoB,WAAA;AAAM,aAAA;;IAC1BwE,iBAAiB;IACjBnN,aAAa,CAAA;;AAEDyG,EAAAA,cAAAA,gBAAgB1M,UAAAA,UAAAA,CAAAA,GACzBoF,iBAAKmF,aAAa,GAAA;IACrB6I,iBAAiBE,cAAca;IAC/BlO,aAAaqN,cAAca;;AAVlBzH,EAAAA,gBAAY0H,YAAA,CADxBC,YAAY,GACA3H,aAAY;AAsvBzB,SAAAA;EAtvBkCtH,gBAAI;ACQtC,IAAA,WAAA,SAAA,QAAA;AAA8B1D,EAAAA,WAAAA,WAAAA,MAAAA;AAO5B,WAAA4S,UAAY1Q,SAAwB;AAApC,QAAA,QACE9B,OAAAA,KAAAA,IAAAA,KAAO;AANCK,UAAAA,cAAc;AACdA,UAAAA,YAAY;AACZA,UAAAA,OAAO;AACPA,UAAAA,QAAwB,CAAA;AACxBA,UAAAA,WAAkD,CAAA;AAG1DA,UAAKyB,UAAO5D,UAAA;MACVuU,WAAW;MACXC,YAAY;MACZC,kBAAkB;OACf7Q,OAAO;;;AAEb,MAAAhB,UAAA0R,UAAAzR;AACMD,UAAA,SAAP,SAAc8R,WAAiB;;AAC7B,QAAMnN,kBAAkB,KAAKS;AAC7B,QAAMR,gBAAgB,KAAKS;AAC3B,QAAM7E,QAAQ,KAAKA;AACnB,QAAMa,UAASb,MAAMa;AACrB,QAAM0Q,OAAO,KAAKA;AACZ,QAAAC,KAIF,KAAKhR,SAHP6Q,mBAAgB,GAAA,kBAChBF,YAAS,GAAA,WACTC,aAAU,GAAA;AAEZ,QAAMK,iBAAiBJ,qBAAqB;AAE5C,QAAI,CAACxQ,SAAQ;AACX,WAAK6Q,QAAQD,iBAAiB,kBAAkB,kBAAkB;QAChE9T,KAAKgU;QACL7F,WAAW;OACZ;AACD;eACS3H,oBAAoB,MAAMC,kBAAkB,IAAI;AACzD,UAAMwN,aAAaH,iBAAiB,IAAI5Q,UAAS;AACjD,WAAK6Q,QAAQ,UAAU;QACrBvN;QACAC;QACAG,iBAAiBqN;QACjBpN,eAAeoN;OAChB;AACD;;AAGF,QAAMC,eAAeP,YAAYC;AACjC,QAAMO,eAAerQ,KAAKC,IAAG,MAARD,MAAYzB,MAAMmE,eAAe,EAAE+K,YAAY;AACpE,QAAM6C,aAAatQ,KAAKM,IAAG,MAARN,MAAYzB,MAAMoE,aAAa,EAAE4N,UAAU;AAC9D,QAAMC,WAAWjS,MAAM4B,IAAI,SAACvB,MAAI;AAE5B,UAAA6O,eAEE7O,KAAI,cADN2R,aACE3R,KAAI;AAER,UAAI,CAAC6O,aAAarO,UAAU,CAACmR,WAAWnR,UAAUgI,cAAcqG,cAAc8C,UAAU,GAAG;AACzF,eAAO;;AAET,UAAME,WAAWzQ,KAAKM,IAAG,MAARN,MAAYyN,YAAY;AACzC,UAAMiD,SAAS1Q,KAAKC,IAAG,MAARD,MAAYuQ,UAAU;AAErC,UAAIE,WAAWf,aAAaU,gBAAgBP,aAAaa,SAAShB,WAAW;AAC3E,eAAO;;AAET,aAAO;KACR;AACD,QAAMiB,gBAAgB,IAAIjO;AAC1B,QAAMkO,cAAcjO,gBAAgBvD,UAAS;AAC7C,QAAMyR,UAAUhB,aAAaQ,eAAeX;AAC5C,QAAMoB,QAAQV,gBAAgBE,aAAaZ;AAC3C,QAAI5M,kBAAkB0N,SAAS/D,QAAQ,IAAI;AAC3C,QAAI1J,gBAAgByN,SAAS9D,YAAY,IAAI;AAE7C,QAAI5J,oBAAoB,IAAI;AAC1BA,wBAAkBJ;AAClBK,sBAAgBJ;;AAGlB,QAAI,CAACgN,YAAY;AACf7M,wBAAkB9C,KAAKM,IAAIwC,iBAAiBJ,eAAe;AAC3DK,sBAAgB/C,KAAKC,IAAI8C,eAAeJ,aAAa;;AAEvD,QAAIG,oBAAoBJ,mBAAmBiO,iBAAiBE,SAAS;AACnE/N,yBAAmB;;AAErB,QAAIC,kBAAkBJ,iBAAiBiO,eAAeE,OAAO;AAC3D/N,uBAAiB;;AAEnB,QAAI2B,mBAAmBnG,MAAMsF,MAAMf,iBAAiBC,gBAAgB,CAAC;AAGrE,QAAI2B,iBAAiB2C,MAAM,SAACzI,MAAI;AAAK,aAAAA,KAAKyL,cAAc;KAAI,GAAG;AAE7D,UAAI0G,cAAc;AAElB,eAAS5O,IAAIW,kBAAkB,GAAGX,KAAK,GAAG,EAAEA,GAAG;AAC7C,YAAI,CAAC5D,MAAM4D,CAAC,EAAEkI,WAAW;AACvBvH,4BAAkBX;AAClB4O,wBAAc;AACd;;;AAGJ,UAAI,CAACA,aAAa;AAChB,iBAAS5O,IAAIY,gBAAgB,GAAGZ,IAAI/C,SAAQ,EAAE+C,GAAG;AAC/C,cAAI,CAAC5D,MAAM4D,CAAC,EAAEkI,WAAW;AACvBtH,4BAAgBZ;AAChB4O,0BAAc;AACd;;;;AAIN,UAAIA,aAAa;AACfrM,2BAAmBnG,MAAMsF,MAAMf,iBAAiBC,gBAAgB,CAAC;;;AAIrE,QAAMiO,kBAAkBtM,iBAAiBkE,KAAK,SAAChK,MAAI;AAAK,aAAAA,KAAKyL,cAAc;KAAI;AAE/E,QAAI3H,oBAAoBI,mBAAmBH,kBAAkBI,eAAe;AAC1E,WAAKkN,QAAQ,UAAU;QACrBvN;QACAC;QACAG;QACAC;OACD;AAED,UAAI,CAACiO,iBAAiB;AACpB;;;AAKJ,QAAIA,iBAAiB;AACnB,UAAMC,kBAAiB,KAAAvM,iBAAiB,CAAC,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE2F;AAC5C,UAAM6G,gBAAe,KAAAxM,iBAAiBA,iBAAiBtF,SAAS,CAAC,OAAC,QAAA,OAAA,SAAA,SAAA,GAAEiL;AAEpE,WAAK,CAAC2F,kBAAkB,CAACc,UAAUG,gBAAgB;AACjD,YAAME,gBAAgB1N,UAAUiB,kBAAkB,SAAC9F,MAAI;AAAK,iBAAA,CAACA,KAAKyL;SAAS;AAC3E,YAAM+G,uBAAuBD,kBAAkB,KAAKzM,iBAAiBtF,SAAS+R,iBAAiB;AAE/F,YAAIzM,iBAAiB0M,mBAAmB,GAAG;AACzC,eAAKnB,QAAQ,kBAAkB;YAC7B/T,KAAKiV,gBAAgB,KAAKzM,iBAAiByM,aAAa,EAAEjV,MAAMgU;YAChEmB,SAAS3M,iBAAiB0M,mBAAmB,EAAElV;YAC/CuG,UAAUiC,iBAAiBb,MAAM,GAAGuN,sBAAsB,CAAC,EAAEjR,IAAI,SAACvB,MAAI;AAAK,qBAAAA,KAAK1C;aAAG;YACnFmO,WAAW;WACZ;;kBAEO2F,kBAAkB,CAACa,YAAYK,cAAc;AACvD,YAAMC,gBAAgBrN,cAAcY,kBAAkB,SAAC9F,MAAI;AAAK,iBAAA,CAACA,KAAKyL;SAAS;AAC/E,YAAMiH,wBAAwBH,gBAAgB;AAE9C,YAAIzM,iBAAiB4M,qBAAqB,GAAG;AAC3C,eAAKrB,QAAQ,iBAAiB;YAC5B/T,KAAKiV,gBAAgB,KAAKzM,iBAAiByM,aAAa,EAAEjV,MAAMgU;YAChEmB,SAAS3M,iBAAiB4M,qBAAqB,EAAEpV;YACjDuG,UAAUiC,iBAAiBb,MAAMyN,qBAAqB,EAAEnR,IAAI,SAACvB,MAAI;AAAK,qBAAAA,KAAK1C;aAAG;YAC9EmO,WAAW;WACZ;;;eAGI,CAAC,KAAKkH,qBAAoB,GAAI;AACvC,WAAK,CAACvB,kBAAkB,CAACc,UAAUD,SAAS;AAC1C,aAAKZ,QAAQ,kBAAkB;UAC7B/T,KAAKqC,MAAMmE,eAAe,EAAExG;UAC5BmO,WAAW;SACZ;kBACS2F,kBAAkB,CAACa,YAAYC,OAAO;AAChD,aAAKb,QAAQ,iBAAiB;UAC5B/T,KAAKqC,MAAMoE,aAAa,EAAEzG;UAC1BmO,WAAW;SACZ;;;;AAUAtM,UAAA,uBAAP,WAAA;AACE,QAAMiS,iBAAiB,KAAKjR,QAAQ6Q,qBAAqB;AACzD,QAAMrR,QAAQ,KAAKA;AACnB,QAAMiT,oBAAoB,KAAKC,gBAAe;AAC9C,QAAMnM,eAAekM,kBAAkB1P,OAAO,SAAClD,MAAI;AAAK,aAAA,CAACA,KAAKyL;KAAS;AACvE,QAAMqH,qBAAqBF,kBAAkBpS;AAC7C,QAAMuS,gBAAgBrM,aAAalG;AACnC,QAAM+D,cAAc,KAAKyO,eAAc;AACvC,QAAMxO,YAAY,KAAKyO,aAAY;AAEnC,QAAIF,kBAAkBD,oBAAoB;AACxC,aAAO;eACEC,eAAe;AACxB,UAAMG,aAAWxM,aAAa,CAAC,EAAEpJ;AACjC,UAAM6V,WAASzM,aAAaqM,gBAAgB,CAAC,EAAEzV;AAC/C,UAAM8H,aAAaP,UAAUlF,OAAO,SAACK,MAAI;AAAK,eAAAA,KAAK1C,QAAQ4V;OAAQ,IAAI;AACvE,UAAMlO,WAAWH,UAAUlF,OAAO,SAACK,MAAI;AAAK,eAAAA,KAAK1C,QAAQ6V;OAAM,IAAI;AAEnE,UAAMjB,QAAQlN,YAAYR;AAC1B,UAAMyN,UAAU7M,cAAcb;AAG9B,WAAK6M,kBAAkB,CAACa,YAAYC,OAAO;AACzC,aAAKb,QAAQ,iBAAiB;UAC5B/T,KAAK6V;UACLV,SAAS9S,MAAMqF,QAAQ,EAAE1H;UACzBmO,WAAW;SACZ;AACD,eAAO;kBACG,CAAC2F,kBAAkB,CAACc,UAAUD,SAAS;AACjD,aAAKZ,QAAQ,kBAAkB;UAC7B/T,KAAK4V;UACLT,SAAS9S,MAAMyF,UAAU,EAAE9H;UAC3BmO,WAAW;SACZ;AACD,eAAO;;eAEAqH,oBAAoB;AAC7B,UAAMM,WAAWR,kBAAkBE,qBAAqB,CAAC;AAEzD,UAAI1B,gBAAgB;AAClB,aAAKC,QAAQ,iBAAiB;UAC5BoB,SAASG,kBAAkB,CAAC,EAAEtV;UAC9BmO,WAAW;SACZ;aACI;AACL,aAAK4F,QAAQ,kBAAkB;UAC7BoB,SAASW,SAAS9V;UAClBmO,WAAW;SACZ;;AAEH,aAAO;;AAET,WAAO;;AAEFtM,UAAA,aAAP,SAAkBoF,aAAqBC,WAAiB;AACtD,SAAKD,cAAcA;AACnB,SAAKC,YAAYA;;AAEZrF,UAAA,UAAP,SAAe+R,MAAY;AACzB,SAAKA,OAAOA;;AAEP/R,UAAA,iBAAP,WAAA;AACE,WAAO,KAAKoF;;AAEPpF,UAAA,eAAP,WAAA;AACE,WAAO,KAAKqF;;AAEPrF,UAAA,YAAP,SAAiBmB,WAA0B;AACzC,QAAMiE,cAAc,KAAKA;AACzB,QAAMC,YAAY,KAAKA;AACvB,QAAM7E,QAAQ,KAAKA;AACnB,QAAM0T,YAAY1T,MAAM4E,WAAW;AACnC,QAAM6O,WAAWzT,MAAM6E,SAAS;AAChC,QAAMhE,UAASb,MAAMa;AAErB,QACEF,cAAc7D,UAAUE,OACrB6H,YAAY,MACZA,YAAYhE,UAAS,KACrB,CAAC4S,SAAS3H,aACV,CAACjD,cAAc4K,SAASvE,cAAcuE,SAASzB,UAAU,GAC5D;AACA,aAAO;;AAET,QACErR,cAAc7D,UAAUC,SACrB6H,cAAc,KACd,CAAC8O,UAAU5H,aACX,CAACjD,cAAc6K,UAAUxE,cAAcwE,UAAU1B,UAAU,GAC9D;AACA,aAAO;;AAET,WAAO;;AAEFxS,UAAA,WAAP,SAAgBmG,WAAyB;AACvC,SAAK3F,QAAQ2F;AAEb,QAAMsE,WAAkD,CAAA;AAExDtE,cAAUnC,QAAQ,SAACnD,MAAI;AACrB4J,eAAS5J,KAAK1C,GAAG,IAAI0C;KACtB;AACD,SAAK4J,WAAWA;;AAEXzK,UAAA,YAAP,SAAiBmG,WAAyB;AACxC,QAAMgO,YAAY,KAAK3T;AACvB,QAAMmE,kBAAkB,KAAKS;AAC7B,QAAMR,gBAAgB,KAAKS;AACrB,QAAApB,KAGFO,eACF,KAAKhE,MAAM4B,IAAI,SAACvB,MAAI;AAAK,aAAAA,KAAK1C;KAAG,GACjCgI,UAAU/D,IAAI,SAACvB,MAAI;AAAK,aAAAA,KAAK1C;KAAG,GAChCwG,iBACAC,aAAa,GANAG,kBAAe,GAAA,aACjBC,gBAAa,GAAA;AAQ1B,QAAIoP,WAAWpP,gBAAgBD,oBAAoBH,gBAAgBD,mBAC7DA,oBAAoB,MAAMI,oBAAoB;AAEpD,QAAI,CAACqP,UAAU;AACb,UAAMC,mBAAmBF,UAAUrO,MAAMnB,iBAAiBC,gBAAgB,CAAC;AAC3E,UAAM+B,mBAAmBR,UAAUL,MAAMf,iBAAiBC,gBAAgB,CAAC;AAC3E,UAAMsP,gBAAgBxP,KAAKuP,kBAAkB1N,kBAAkB,SAAC9F,MAAI;AAAK,eAAAA,KAAK1C;OAAG;AAEjFiW,iBAAWE,cAAcC,MAAMlT,SAAS,KACnCiT,cAAcE,QAAQnT,SAAS,KAC/BiT,cAAcG,QAAQpT,SAAS;;AAEtC,SAAKkM,SAASpH,SAAS;AACvB,SAAKkB,WAAWtC,iBAAiBC,aAAa;AAC9C,WAAOoP;;AAEFpU,UAAA,WAAP,WAAA;AACE,WAAO,KAAKQ;;AAEPR,UAAA,kBAAP,WAAA;AACE,QAAMoF,cAAc,KAAKA;AACzB,QAAMC,YAAY,KAAKA;AAEvB,QAAID,gBAAgB,IAAI;AACtB,aAAO,CAAA;;AAET,WAAO,KAAK5E,MAAMsF,MAAMV,aAAaC,YAAY,CAAC;;AAE7CrF,UAAA,UAAP,WAAA;AACE,WAAO,KAAK+R;;AAEP/R,UAAA,eAAP,SAAoB7B,KAAoB;AACtC,WAAO,KAAKsM,SAAStM,GAAG;;AAEnB6B,UAAA,mBAAP,SAAwB0U,SAAwB;AAC9C,QAAIC;AAEJ,SAAKnU,MAAMwD,QAAQ,SAACnD,MAAI;;AACtB,OAAA,KAAAA,KAAK+T,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE5Q,QAAQ,SAAC6Q,MAAI;AACvB,YAAIA,KAAK1W,QAAQuW,SAAS;AACxBC,qBAAWE;;OAEd;KACF;AAED,WAAOF;;AAEF3U,UAAA,gBAAP,WAAA;AACE,QAAMQ,QAAQ,KAAKA;AACnB,QAAMa,UAASb,MAAMa;AAErB,QAAI,CAACA,SAAQ;AACX,aAAO;;AAET,WAAOY,KAAKC,IAAG,MAARD,MAAIR,eAAA,CAAK,CAAC,GAAKjB,MAAMa,UAAS,CAAC,EAAEmR,YAAU,KAAA,CAAA;;AAE7CxS,UAAA,iBAAP,SAAsB8R,WAAmB3Q,WAAyC;AAAzC,QAAA,cAAA,QAAA;AAAAA,kBAAY,KAAKH,QAAQ6Q;;AAChE,QAAMI,iBAAiB9Q,cAAc7D,UAAUE;AAC/C,QAAM+J,eAAe,KAAKuN,wBAAuB;AAEjD,QAAI,CAACvN,aAAalG,QAAQ;AACxB,aAAO;;AAET,QAAM0T,cAAcxN,aAAa0K,iBAAiB,IAAI5Q,SAAS,CAAC;AAChE,QAAM2T,UAAU/C,iBACZhQ,KAAKM,IAAG,MAARN,MAAY8S,YAAYrF,YAAY,IACpCzN,KAAKC,IAAG,MAARD,MAAY8S,YAAYvC,UAAU;AACtC,QAAInQ,MAAM2S;AACV,QAAIL;AAEJ,QAAI1C,gBAAgB;AAClB1K,mBAAavD,QAAQ,SAACnD,MAAI;;AACxB,SAAA,KAAAA,KAAK+T,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE5Q,QAAQ,SAAC6Q,MAAI;AACvB,cAAIF,YAAYA,SAAStS,OAAOwS,KAAKxS,KAAK;AACxC;;AAEF,cAAIA,MAAMwS,KAAKxS,OAAOwS,KAAKxS,OAAOyP,WAAW;AAC3C6C,uBAAWE;AACXxS,kBAAMwS,KAAKxS;;SAEd;OACF;WACI;AACLkF,mBAAavD,QAAQ,SAACnD,MAAI;;AACxB,SAAA,KAAAA,KAAK+T,WAAK,QAAA,OAAA,SAAA,SAAA,GAAE5Q,QAAQ,SAAC6Q,MAAI;AACvB,cAAMlC,SAASkC,KAAKxS,MAAMwS,KAAK9C;AAE/B,cAAI4C,YAAYA,SAAStS,MAAMsS,SAAS5C,QAAQY,QAAQ;AACtD;;AAGF,cAAItQ,MAAMsQ,UAAUA,UAAUb,WAAW;AACvC6C,uBAAWE;AACXxS,kBAAMsQ;;SAET;OACF;;AAGH,WAAO;MACL9R,MAAMkU;MACNF,MAAMF;;;AAGH3U,UAAA,0BAAP,WAAA;AACE,QAAMQ,QAAQ,KAAKkT,gBAAe;AAElC,QAAMuB,WAAWzU,MAAM4B,IAAI,SAAC6B,IAA4B;UAA1ByL,eAAY,GAAA,cAAE8C,aAAU,GAAA;AACpD,UAAMnR,UAASqO,aAAarO;AAE5B,UAAIA,YAAW,KAAKA,YAAWmR,WAAWnR,QAAQ;AAChD,eAAO;;AAET,aAAOqO,aAAa7E,KAAK,SAACxI,KAAK+B,GAAC;AAAK,eAAAoO,WAAWpO,CAAC,MAAM/B;OAAG;KAC3D;AACD,QAAM4D,aAAagP,SAASvG,QAAQ,IAAI;AACxC,QAAM7I,WAAWoP,SAAStG,YAAY,IAAI;AAE1C,WAAO9I,aAAa,KAAK,CAAA,IAAKrF,MAAMsF,MAAMG,YAAYJ,WAAW,CAAC;;AAE7D7F,UAAA,UAAP,WAAA;AACE,SAAKkV,IAAG;AACR,SAAK9P,cAAc;AACnB,SAAKC,YAAY;AACjB,SAAK7E,QAAQ,CAAA;AACb,SAAKuR,OAAO;;AAEhB,SAAAL;AAAA,EA3a8ByD,qBAAS;;ACvBiCrW,EAAAA,WAAAA,WAAAA,MAAAA;AAAxE,WAAAsW,YAAA;AAAA,QAAA,QAAA,WAAA,QAAA,OAAA,MAAA,MAAA,SAAA,KAAA;AACY7V,UAAAA,QAAgB,CAAA;AAChBA,UAAAA,YAA4B;AAC5BA,UAAAA,cAAc;AAEhBA,UAAAA,eAAe;AACfA,UAAAA,SAA8B,CAAA;AAC9BA,UAAAA,iBAAiB;;;AAyE1B,MAAAS,UAAAoV,UAAAnV;AAvEQD,UAAA,YAAP,WAAA;AACE,SAAKqV,cAAcC,KAAKC,IAAG;;AAGtBvV,UAAA,WAAP,WAAA;AACE,WAAO,KAAKQ;;AAEPR,UAAA,eAAP,SAAoB+J,WAAkB;AACpC,SAAKA,YAAYA;;AAEZ/J,UAAA,SAAP,SAAcmG,WAAmBqP,OAA2B;AAC1D,WAAO,KAAKrO,UAAUhB,WAAWqP,KAAK;;AAEjCxV,UAAA,SAAP,SAAcwV,OAA+B;AAA7C,QAAA,QAAA;AAAc,QAAA,UAAA,QAAA;AAAAA,cAAAA,CAAAA;;AACZ,SAAKC,SAAMrY,UAAAA,UAAA,CAAA,GAAQ,KAAKqY,MAAM,GAAKD,KAAK;AACxC,SAAKtD,QAAQ,UAAU;MACrBsD;KACD;AAEDE,iBAAa,KAAKC,YAAY;AAC9B,SAAKA,eAAelZ,OAAOmZ,WAAW,WAAA;AACpCrW,YAAK2S,QAAQ,iBAAiB;QAC5BsD;OACD;KACF;;AAEIxV,UAAA,UAAP,SAAe6V,cAAiE;;AAAjE,QAAA,iBAAA,QAAA;AAAAA,sBAAAA,MAAmC,KAAA,KAAK9L,eAAS,QAAA,OAAA,SAAA,SAAA,GAAEpB,cAAQ,QAAA,OAAA,SAAA,KAAI,CAAA;;AAC5E,QAAMmN,aAAa,KAAKC;AACxB,QAAMC,YAAY,CAAC,EAAEF,WAAWvB,MAAMlT,UAAUyU,WAAWtB,QAAQnT,UAAUyU,WAAWrB,QAAQpT;AAChG,QAAMmU,QAAQ,KAAKC;AACnB,QAAMQ,gBAAgB,KAAKC;AAC3B,QAAM/P,YAAY2P,WAAWK;AAG7B,SAAKD,iBAAiB;AACtB,SAAKT,SAAS,CAAA;AACd,SAAKjV,QAAQ2F;AACbA,cAAUnC,QAAQ,SAACnD,MAAMuD,GAAC;AACxBvD,WAAKzC,UAAUyX,aAAazR,CAAC;KAC9B;AAGD,SAAK8N,QAAQ,WAAW;MACtB1R,OAAO2F;MACPiQ,UAAU1N,SAAQmN,YAAY;MAC9BC,YAAY,KAAKC;MACjBP;MACAS;MACAD;KACD;AAED,WAAOA;;AAEFhW,UAAA,YAAP,SAAiBQ,OAAegV,OAA+B;AAA/B,QAAA,UAAA,QAAA;AAAAA,cAAAA,CAAAA;;AAC9B,QAAMH,cAAc,KAAKA;AACzB,QAAMlB,YAAY,KAAK3T;AACvB,QAAM2F,YAAY3F,MAAM4B,IAAI,SAACvB,MAAI;AAAK,aAAAzD,UAAAA,UAAA,CAAA,GACjCyD,IAAI,GAAA;QACPwV,WAAW,GAAA,OAAGhB,aAAW,GAAA,EAAA,OAAIxU,KAAK1C,GAAG;;KACrC;AACF,QAAM0G,SAASC,KAAKqP,WAAWhO,WAAW,SAACtF,MAAI;AAAK,aAAAA,KAAKwV;KAAU;AAEnE,SAAKH,iBAAiB,CAAC,CAACrR,OAAO0P,MAAMlT,UAAU,CAAC,CAACwD,OAAO2P,QAAQnT,UAAU,CAAC,CAACwD,OAAO4P,QAAQpT;AAC3F,SAAKoU,SAAMrY,UAAAA,UAAA,CAAA,GAAQ,KAAKqY,MAAM,GAAKD,KAAK;AACxC,SAAKO,cAAclR;AAEnB,WAAOA;;AAEF7E,UAAA,UAAP,WAAA;AACE,SAAKkV,IAAG;;AAEZ,SAAAE;AAAA,EAhFwED,qBAAS;AC1BjF,IAAA,kBAAA,SAAA,QAAA;AAA+ErW,EAAAA,WAAAA,kBAAAA,MAAAA;AAA/E,WAAAwX,mBAAA;;;AAkCC,MAAAtW,UAAAsW,iBAAArW;AAjCQD,UAAA,SAAP,SAAcmG,WAAmBqP,OAA2B;AAC1D,QAAMzL,YAAY,KAAKA;AACvB,QAAMlF,SAAS3F,OAAAA,UAAMqX,OAAM,KAAA,MAACpQ,WAAWqP,KAAK;AAE1C,QAAAgB,WAKE3R,OAAM,UAJR2P,UAIE3P,OAAM,SAHR4R,UAGE5R,OAAM,SAFR0P,QAEE1P,OAAM,OADRsR,OACEtR,OAAM;AACV,QAAM6R,WAAQjV,eAAA,CAAA,GAAO+U,UAAQ,IAAA;AAG7BhC,YAAQxQ,QAAQ,SAACyB,OAAK;AACpBiR,eAAS1G,OAAOvK,OAAO,CAAC;AACxBsE,gBAAU4M,YAAYH,SAAS/Q,KAAK,EAAErH,OAAQ;KAC/C;AACDqY,YAAQzS,QAAQ,SAACC,IAAsB;;UAArBiB,YAAS,GAAA,CAAA,GAAEC,YAAS,GAAA,CAAA;AACpC,UAAMtE,OAAO6V,SAAS1G,OAAO9K,WAAW,CAAC,EAAE,CAAC;AAE5CwR,eAAS1G,OAAO7K,WAAW,GAAGtE,IAAI;AAClCkJ,gBAAU6M,aAAa/V,KAAKzC,UAAU,MAAA,KAAAsY,SAASvR,YAAY,CAAC,OAAC,QAAA,OAAA,SAAA,SAAA,GAAE/G,aAAO,QAAA,OAAA,SAAA,KAAI,IAAI;KAC/E;AACDmW,UAAMvQ,QAAQ,SAACyB,OAAK;;AAClB,UAAM5E,OAAOsV,KAAK1Q,KAAK;AAEvBiR,eAAS1G,OAAOvK,OAAO,GAAG5E,IAAI;AAC9BkJ,gBAAU6M,aAAa/V,KAAKzC,UAAU,MAAA,KAAAsY,SAASjR,QAAQ,CAAC,OAAC,QAAA,OAAA,SAAA,SAAA,GAAErH,aAAO,QAAA,OAAA,SAAA,KAAI,IAAI;KAC3E;AAED,SAAKyY,QAAQ9M,UAAUpB,QAAQ;AAC/B,WAAO9D;;AAEX,SAAAyR;AAAA,EAlC+ElB,QAAQ;ACOvF,IAAA,sBAAA,SAAA,QAAA;AAAyCtW,EAAAA,WAAAA,sBAAAA,MAAAA;AAAzC,WAAAgY,uBAAA;;;AAkBC,MAAA9W,UAAA8W,qBAAA7W;AAjBQD,UAAA,YAAP,SAAiBmG,WAA6B;AAC5C,QAAMtB,SAAS3F,OAAAA,UAAMiI,UAAS,KAAA,MAAChB,SAAS;AAEtC,QAAAoO,QAEE1P,OAAM,OADRsR,OACEtR,OAAM;AACV0P,UAAMvQ,QAAQ,SAACyB,OAAK;AAClB,UAAMsR,UAAU5Q,UAAUV,KAAK,EAAEsR;AAEjC,UAAIA,QAAQ1Y,QAAQ,CAAC0Y,QAAQ3Y,SAAS;AACpC2Y,gBAAQ3Y,UAAUiK,qBAAqB0O,QAAQ1Y,IAAI,EAAE,CAAC;;AAExD8X,WAAK1Q,KAAK,EAAErH,UAAU2Y,QAAQ3Y;KAC/B;AAED,WAAOyG;;AAEX,SAAAiS;AAAA,EAlByCR,eAAe;ACexD,IAAA,gBAAA,SAAA,QAAA;AAAmCxX,EAAAA,WAAAA,gBAAAA,MAAAA;AAYjC,WAAAkY,eACYC,SACVjW,SAA6B;AAF/B,QAAA,QAIE9B,OAAAA,KAAAA,IAAAA,KAAO;AAHGK,UAAAA,UAAA0X;AAXF1X,UAAAA,gBAA+B;AAE/BA,UAAAA,eAAe;AACfA,UAAAA,cAAc;AAIhBA,UAAAA,iBAAiB3C;AAgMjB2C,UAAAA,WAAW,WAAA;AACjB,UAAM2X,gBAAgB3X,MAAK4X,aAAY;AACvC,UAAMC,gBAAgB7X,MAAK8X,gBAAe;AAE1C9X,YAAK+X,aAAaF,aAAa;AAE/B,UAAIF,kBAAkB,QAAS3X,MAAKgY,kBAAkBH,kBAAkB,KAAMF,kBAAkBE,eAAe;AAC7GA,0BAAkB7X,MAAKgY,iBAAiB;AACxC;;AAEFhY,YAAKgY,iBAAiB;AACtBhY,YAAK2S,QAAQ,IAAIsF,iBAAe,UAAU;QACxCrW,WAAW+V,gBAAgBE,gBAAgB,QAAQ;QACnDtF,WAAWsF;QACXK,mBAAmBlY,MAAKmY,qBAAoB;OAC7C,CAAC;;AAvMFnY,UAAKyB,UAAO5D,UAAA;MACV2M,WAAW;MACX4N,cAAc;MACd3Y,YAAY;MACZ4Y,iBAAiB;OACd5W,OAAO;AAGZzB,UAAKsY,MAAK;;;AACX,MAAA7X,UAAAgX,eAAA/W;AACMD,UAAA,aAAP,WAAA;AACE,WAAO,KAAKiX;;AAEPjX,UAAA,eAAP,WAAA;AACE,WAAO,KAAK+J;;AAEP/J,UAAA,qBAAP,WAAA;AACE,WAAO,KAAK4X;;AAEP5X,UAAA,kBAAP,WAAA;AACE,WAAO,KAAK8X;;AAEP9X,UAAA,iBAAP,WAAA;AACE,WAAO,KAAK2B;;AAEP3B,UAAA,uBAAP,WAAA;AACE,YAAQ,KAAKkX,iBAAiB,KAAK,KAAKY;;AAEnC9X,UAAA,eAAP,WAAA;AACE,WAAO,KAAKkX;;AAEPlX,UAAA,eAAP,SAAoBqC,KAAW;AAC7B,SAAK6U,gBAAgB7U;;AAEhBrC,UAAA,kBAAP,WAAA;AACE,QAAM+X,cAAc,KAAKA;AACzB,QAAM/Y,aAAa,KAAKgC,QAAQhC;AAEhC,QAAMgZ,OAAO,SAAA,OAAShZ,aAAa,SAAS,KAAK;AAEjD,QAAIyD,UAASsV,WAAW,GAAG;AACzB,aAAOtb,OAAOuC,aAAa,gBAAgB,aAAa,KACnDuJ,SAAS0P,gBAAgBD,IAAI,KAAKzP,SAAS2P,KAAKF,IAAI;WACpD;AACL,aAAOD,YAAYC,IAAI;;;AAGpBhY,UAAA,YAAP,SAAiBE,QAA2B;AAC1C,SAAKyB,cAAczB,OAAOyB;AAC1B,SAAKmW,eAAe5X,OAAO4X;AAC3B,SAAKZ,gBAAgBhX,OAAOgX;AAE5B,SAAKiB,SAAS,KAAKjB,aAAa;;AAE3BlX,UAAA,YAAP,WAAA;AACE,WAAO;MACL2B,aAAa,KAAKA;MAClBmW,cAAc,KAAKA;MACnBZ,eAAe,KAAKA;;;AAGjBlX,UAAA,WAAP,SAAgBqC,KAAW;AACzB,QAAM0V,cAAc,KAAKA;AACzB,QAAM/Y,aAAa,KAAKgC,QAAQhC;AAC1B,QAAAiF,KAASjF,aAAa,CAACqD,KAAK,CAAC,IAAI,CAAC,GAAGA,GAAG,GAAvC+V,IAAC,GAAA,CAAA,GAAEC,IAAC,GAAA,CAAA;AAEX,QAAI5V,UAASsV,WAAW,GAAG;AACzBA,kBAAYO,OAAOF,GAAGC,CAAC;WAClB;AACLN,kBAAYQ,aAAaH;AACzBL,kBAAYS,YAAYH;;;AAGrBrY,UAAA,WAAP,SAAgBqC,KAAW;AACzB,QAAI,CAACA,KAAK;AACR;;AAEF,QAAM0V,cAAc,KAAKA;AACzB,QAAM/Y,aAAa,KAAKgC,QAAQhC;AAC1B,QAAAiF,KAASjF,aAAa,CAACqD,KAAK,CAAC,IAAI,CAAC,GAAGA,GAAG,GAAvC+V,IAAC,GAAA,CAAA,GAAEC,IAAC,GAAA,CAAA;AAGX,SAAKnB,iBAAkB7U;AAEvB,QAAII,UAASsV,WAAW,GAAG;AACzBA,kBAAYU,SAASL,GAAGC,CAAC;WACpB;AACLN,kBAAYQ,cAAcH;AAC1BL,kBAAYS,aAAaH;;;AAGtBrY,UAAA,SAAP,WAAA;AACE,QAAM4X,kBAAkB,KAAKA;AAC7B,QAAM5Y,aAAa,KAAKgC,QAAQhC;AAChC,QAAM0Z,SAASd,oBAAoBrP,SAAS2P;AAC5C,QAAMS,sBAAsBD,SACxB;MAAErZ,KAAK;MAAGC,MAAM;QAChBsY,gBAAgBgB,sBAAqB;AACzC,QAAMC,gBAAgB,KAAK9O,UAAU6O,sBAAqB;AAE1D,SAAKd,gBAAgB,KAAKT,gBAAe,KAAO,MAAMrY,aAClD6Z,cAAcvZ,OAAOqZ,oBAAoBrZ,OACzCuZ,cAAcxZ,MAAMsZ,oBAAoBtZ;AAE5C,QAAIqZ,QAAQ;AACV,WAAK/W,cAAc3C,aAAavC,OAAOqc,aAAarc,OAAOsc;WACtD;AACL,WAAKpX,cAAc3C,aAAa4Y,gBAAgBoB,cAAcpB,gBAAgBqB;;;AAG3EjZ,UAAA,UAAP,WAAA;AACE,QAAM+J,YAAY,KAAKA;AAEvB,SAAKgO,YAAYmB,oBAAoB,UAAU,KAAKC,QAAQ;AAE5D,QAAI,KAAKC,kBAAkB;AACzB,UAAMxB,kBAAkB,KAAKA;AAE7B,UAAMyB,aAAW9Q,SAAS+Q,uBAAsB;AAChD,UAAMC,aAAa7Q,SAAQqB,UAAUwP,UAAU;AAE/C3B,sBAAgBjB,YAAY5M,SAAS;AACrCwP,iBAAWvV,QAAQ,SAACwV,WAAS;AAC3BH,mBAASI,YAAYD,SAAS;OAC/B;AACD5B,sBAAgB6B,YAAYJ,UAAQ;eAC3B,KAAKrY,QAAQ+I,WAAW;AACjCA,gBAAUrJ,MAAMgZ,UAAU,KAAKC;;;AAG3B3Z,UAAA,QAAR,WAAA;;AACQ,QAAA4P,KAKF,KAAK5O,SAJI4Y,kBAAe,GAAA,WAC1BjC,eAAY,GAAA,cACZ3Y,aAAU,GAAA,YACO6a,wBAAqB,GAAA;AAExC,QAAM5C,UAAU,KAAKA;AACrB,QAAIW,kBAAkBX;AACtB,QAAIlN,YAAYkN;AAChB,QAAI6C,mBAAmB;AAEvB,QAAI,CAACF,iBAAiB;AACpBhC,wBAAkBmC,WAAWF,qBAAqB,KAAKtR,SAAS2P;AAChE4B,yBAAmB/P,UAAUrJ,MAAMgZ;WAC9B;AACL,UAAIE,oBAAoB,MAAM;AAE5B7P,oBAAYxB,SAASC,cAAcmP,YAAY;AAE/C5N,kBAAUrJ,MAAMsZ,WAAW;AAC3BjQ,kBAAUkQ,YAAYnd;AACtB,YAAMyc,aAAa7Q,SAAQkP,gBAAgB2B,UAAU;AAErDA,mBAAWvV,QAAQ,SAACwV,WAAS;AAC3BzP,oBAAU0P,YAAYD,SAAS;SAChC;AACD5B,wBAAgB6B,YAAY1P,SAAS;AAErC,aAAKqP,mBAAmB;aACnB;AAELrP,oBAAYgQ,WAAWH,eAAe;;AAExCE,yBAAmB/P,UAAUrJ,MAAMgZ;AAEnC,UAAMhZ,QAAQkX,gBAAgBlX;AAE9BuD,WAAqCjF,aAAa,CAAC,UAAU,QAAQ,IAAI,CAAC,UAAU,QAAQ,GAA3F0B,MAAMwZ,YAAS,GAAA,CAAA,GAAExZ,MAAMyZ,YAAS,GAAA,CAAA;AAEjC,UAAInb,YAAY;AACd+K,kBAAUrJ,MAAMf,SAAS;;;AAG7B,QAAMoY,cAAcH,oBAAoBrP,SAAS2P,OAAOzb,SAASmb;AAEjEG,gBAAYqC,iBAAiB,UAAU,KAAKjB,QAAQ;AACpD,SAAKQ,cAAcG;AACnB,SAAK/P,YAAYA;AACjB,SAAK6N,kBAAkBA;AACvB,SAAKG,cAAcA;AACnB,SAAKsC,OAAM;AACX,SAAK/C,aAAa,KAAKD,gBAAe,CAAE;;AAmB5C,SAAAL;AAAA,EA1NmC7B,qBAAS;AC+D5C,IAAA,eAAA,SAAA,QAAA;AAAsFrW,EAAAA,WAAAA,eAAAA,MAAAA;AAwBpF,WAAAwb,cAAYrD,SAA+BjW,SAAgB;AAA3D,QAAA,QACE9B,OAAAA,KAAAA,IAAAA,KAAO;AANDK,UAAAA,YAAkC;AAolBlCA,UAAAA,YAAY,SAAC0E,KAA2D;UAAzD9C,YAAS8C,IAAA,WAAE6N,YAAS7N,IAAA,WAAEwT,oBAAiBxT,IAAA;AAC5D1E,YAAKgb,QAAO;AAOZhb,YAAK2S,QAAQ,IAAIsF,iBAAe9Z,oBAAoBC,eAAe;QACjEwD;QACA2Q;QACA2F;OACD,CAAC;;AAGIlY,UAAAA,YAAY,SAACib,GAAmB;AACtCjb,YAAK8H,WAAWmT,EAAEzV,iBAAiByV,EAAExV,aAAa;;AAE5CzF,UAAAA,qBAAqB,SAACib,GAAsC;AAClE,UAAMC,gBAAgBD,EAAEha;AAExBia,oBAAczW,QAAQ,SAACnD,MAAI;AAEzB,YAAM6Z,WAAW7Z,KAAKkW;AAEtB2D,iBAAStc,UAAUyC,KAAKzC;OACzB;AAED,UAAI,CAACoc,EAAExE,WAAW;AAChBzW,cAAKob,iBAAgB;AACrBpb,cAAKgb,QAAO;AACZ;;AAGI,UAAAtW,MAKFuW,EAAE1E,YAJJvB,QAAKtQ,IAAA,OACLuQ,UAAOvQ,IAAA,SACPuS,WAAQvS,IAAA,UACRkS,OAAIlS,IAAA;AAGNuQ,cAAQxQ,QAAQ,SAACyB,OAAK;AACpB,YAAMsR,UAAUP,SAAS/Q,KAAK,EAAEsR;AAEhC,YAAIA,QAAQnX,eAAeC,YAAY2M,WAAW;AAChDuK,kBAAQnX,aAAaC,YAAYC;;OAEpC;AAGD,UAAMd,cAAaO,MAAKyB,QAAQhC;AAChC,UAAM4b,aAAarG,MAAMnS,IAAI,SAACqD,OAAK;AACjC,YAAMiV,WAAWvE,KAAK1Q,KAAK,EAAEsR;AAC7B,YAAM3Y,UAAUsc,SAAStc;AAEzB,YAAIsc,SAASzc,SAASU,UAAUa,SAAS;AACvC,cAAMJ,UAAOhC,UAAA,CAAA,GAAQsd,SAAStb,OAAO;AACrC,cAAMK,OAAOib,SAASjb;AAEtB,cAAI,CAACL,QAAQM,SAASD,KAAKC,OAAO;AAChCN,oBAAQM,QAAQD,KAAKC;;AAEvB,cAAI,CAACN,QAAQO,UAAUF,KAAKE,QAAQ;AAClCP,oBAAQO,SAASF,KAAKE;;AAGxB,iBAAO,IAAIS,SAASpB,aAAa;YAC/BZ;YACAgB;WACD;;AAEH,eAAOsb;OACR;AAED,UAAMxQ,oBAAmB3K,MAAK2K;AAC9B,UAAI3K,MAAKyB,QAAQqQ,iBAAiB;AAChCnH,QAAAA,kBAAiB2Q,kBAAkBrG,QAAQpS,IAAI,SAACqD,OAAK;AAAK,iBAAA+Q,SAAS/Q,KAAK,EAAErH;SAAQ,CAAC;AACnF8L,QAAAA,kBAAiBmH,gBAAgBkD,MAAMnS,IAAI,SAACqD,OAAK;AAAK,iBAAA0Q,KAAK1Q,KAAK,EAAErH;SAAQ,CAAC;;AAGvE,UAAAwR,KAGF4K,EAAEhF,OAFJsF,YAAS,GAAA,WACTC,WAAQ,GAAA;AAGVxb,YAAK4M,aAAaqB,YAAYoN,UAAU;AAExC,UAAIE,WAAW;AACbvb,cAAKyb,kBAAkB;UACrBC,SAAS1G,MAAMnS,IAAI,SAACqD,OAAK;AAAK,mBAAA0Q,KAAK1Q,KAAK,EAAEsR;WAAO;UACjDF,SAAS,CAAA;UACTkE,UAAU;UACV5Z,WAAW5B,MAAKsS;SACjB;;AAEH,UAAI,CAACiJ,aAAaC,YAAYP,EAAEvE,eAAe;AAC7C1W,cAAKiI,aAAagG,YAAW;;;AAIzBjO,UAAAA,YAAY,SAACib,GAA2B;AAC9C,UAAIA,EAAEU,mBAAmB;AACvB3b,cAAK4b,aAAa;UAAEzN,WAAW;WAAQ,IAAI;aACtC;AACL,YAAM0N,eAAeC,gBAAgB9b,MAAKmU,gBAAe,GAAI8G,EAAEc,YAAY;AAE3E,YAAIF,aAAa/Z,SAAS,GAAG;AAC3B9B,gBAAKyL,YAAYoQ,YAAY;;;;AAK3B7b,UAAAA,mBAAmB,SAACib,GAAkB;AAO5Cjb,YAAKgc,iBAAiBje,UAAUE,KAAKE,oBAAoBE,gBAAgB4c,CAAC;;AAGpEjb,UAAAA,oBAAoB,SAACib,GAA2B;AAOtDjb,YAAKgc,iBAAiBje,UAAUC,OAAOG,oBAAoBG,iBAAiB2c,CAAC;;AA0BvEjb,UAAAA,kBAAkB,SAAC0E,KAAiD;UAA/C7F,UAAO6F,IAAA,SAAEuX,SAAMvX,IAAA,QAAEpD,OAAIoD,IAAA,MAAEwX,SAAMxX,IAAA;AAOxD1E,YAAK2S,QAAQ,IAAIsF,iBAAe9Z,oBAAoBK,eAAe;QACjEK;QACAod;QACA3a;QACA4a;QACAC,QAAQ,WAAA;AACNnc,gBAAKoc,YAAY9a,KAAK1C,GAAI;;OAE7B,CAAC;;AAGIoB,UAAAA,oBAAoB,SAAC0E,KAAiE;UAA/D8W,WAAQ9W,IAAA,UAAEgX,UAAOhX,IAAA,SAAE4S,UAAO5S,IAAA,SAAE9C,YAAS8C,IAAA;AAClE,UAAM2X,YAAWrc,MAAKqc;AACtB,UAAMC,iBAAgBtc,MAAKsc;AAC3B,UAAM/J,YAAY+J,eAAcnE,qBAAoB;AACpD,UAAMoE,iBAAiBF,UAASG,cAAa;AAC7C,UAAMC,oBAAoBJ,UAASK,QAAO;AAC1C,UAAMC,kBAAkBN,UAASO,eAAerK,WAAW3Q,SAAS;AACpE,UAAM8Q,iBAAiB9Q,cAAc7D,UAAUE;AAI/C+B,YAAK6c,cAAa;AAElB,UAAIF,iBAAiB;AACnB,YAAMG,WAAWH,gBAAgBrH;AACjC,YAAM9D,WAAWmL,gBAAgBrb;AACjC,YAAIyb,WAAQ;AACZ,YAAIC,WAAQ;AAEZ,YAAIF,UAAU;AACZC,qBAAWV,UAASY,iBAAiBH,SAASle,GAAG;;AAEnD,YAAI4S,UAAU;AACZwL,qBAAWX,UAASa,aAAa1L,SAAS5S,GAAG;;AAG/C,YAAIme,YAAYC,UAAU;AACxB,cAAIG,UAAU;AACd,cAAIC,UAAU;AAEd,cAAIL,UAAU;AACZK,sBAAUL,SAASja,OAAO4P,iBAAiB,IAAIqK,SAASvK;AACxD2K,sBAAUL,SAASha,OAAO4P,iBAAiB,IAAIoK,SAAStK;iBACnD;AACL,gBAAM6K,eAAe3a,KAAKM,IAAG,MAARN,MAAY8O,SAASrB,YAAY;AACtD,gBAAMmN,aAAa5a,KAAKC,IAAG,MAARD,MAAY8O,SAASyB,UAAU;AAClD,gBAAMsK,eAAe7a,KAAKM,IAAG,MAARN,MAAYsa,SAAS7M,YAAY;AACtD,gBAAMqN,aAAa9a,KAAKC,IAAG,MAARD,MAAYsa,SAAS/J,UAAU;AAElDmK,sBAAU1K,iBAAiB6K,eAAeC;AAC1CL,sBAAUzK,iBAAiB2K,eAAeC;;AAE5C,cAAInb,SAASib,UAAUD;AAGvB,cAAIhb,SAAS,GAAG;AACd,gBAAMsb,iBAAiBpB,UAASG,cAAa;AAC7C,gBAAMkB,oBAAoBrB,UAASK,QAAO;AAC1C,gBAAMiB,YAAYjb,KAAKC,IAAI4P,YAAY7P,KAAKC,IAAI,GAAG4Z,iBAAiBE,iBAAiB,GAAG,CAAC;AACzF,gBAAMmB,eACFlb,KAAKM,IAAIuP,WAAW7P,KAAKC,IAAI,GAAG8a,iBAAiBC,iBAAiB,CAAC,IACnEC;AAGJxb,sBAAUoQ,YAAYqL;;AAGxB5d,gBAAKsc,cAAcpD,SAAS/W,MAAM;;;AAItC,UAAM0b,kBAAmBnC,QAA+BlX,OAAO,SAAClD,MAAI;AAAK,eAAAA,KAAK5C,SAASU,UAAUsC;OAAO;AAQxG1B,YAAK2S,QAAQ,IAAIsF,iBAAe9Z,oBAAoBI,iBAAiB;QACnEid;QACA5Z;QACA8Z,SAASmC;QACTvG,SAAUA,QAA+B9S,OAAO,SAAClD,MAAI;AAAK,iBAAAA,KAAK5C,SAASU,UAAUsC;SAAO;QACzFmE,aAAa7F,MAAKsU,eAAc;QAChCxO,WAAW9F,MAAKuU,aAAY;QAC5BtT,OAAOjB,MAAKmU,gBAAgB,IAAI;QAChC9P,QAAQrE,MAAKqL,iBAAiB,IAAI;OACnC,CAAC;AAEF,UAAIyS,WAAW9d,MAAKiI,aAAa8V,oBAAmB;AAEpD,UAAIF,gBAAgB/b,UAAUwV,QAAQxV,QAAQ;AAC5Cgc,qBAAAA,WAAa,CAAC,CAAC9d,MAAKiI,aAAa8D,WAAU;;AAG7C,UAAI+R,UAAU;AACZ9d,cAAKge,QAAO;aACP;AACLhe,cAAKob,iBAAgB;AACrBpb,cAAKgb,QAAO;;;AAp1Bdhb,UAAKyB,UAAO5D,UAAAA,UAAAA,UAAA,CAAA,GACLmC,MAAKie,YAAoC/Z,cAAoC,GAAA;MAClFga,UAAU,IAAI3G,oBAAmB,EAAG4G,GAAG,iBAAiB,WAAA;AAAM,eAAAne,MAAKoe,QAAO;OAAE;QACzE3c,OAAO;AAGZ,QAAMiD,KAUF1E,MAAKyB,SATPwP,kBAAe,GAAA,iBACfmH,eAAY,GAAA,cACZ5N,YAAS,GAAA,WACT0T,WAAQ,GAAA,UACR9L,YAAS,GAAA,WACTC,aAAU,GAAA,YACVgG,kBAAe,GAAA,iBACf5L,qBAAkB,GAAA,oBACf3I,cAAW,OAAA,IATV,CAAA,mBAAA,gBAAA,aAAA,YAAA,aAAA,cAAA,mBAAA,oBAAA,CAUL;AAKC,QAAArE,aAYEqE,YAAW,YAXbua,kBAWEva,YAAW,iBAVbwa,eAUExa,YAAW,cATbya,aASEza,YAAW,YARb0a,iBAQE1a,YAAW,gBAPb2a,cAOE3a,YAAW,aANbnG,aAMEmG,YAAW,YALb+N,oBAKE/N,YAAW,mBAJb4a,iBAIE5a,YAAW,gBAHb6a,oBAGE7a,YAAW,mBAFbwO,mBAEExO,YAAW,kBADb8a,iBACE9a,YAAW;AACf,QAAM+a,iBAAiBvb,UAASoU,OAAO,IAAI1O,SAAS8V,cAAcpH,OAAO,IAAmBA;AAC5F,QAAM4E,gBAAgB,IAAI7E,cAAcoH,gBAAgB;MACtDxG;MACA7N;MACA4N;MACA3Y;KACD,EAAE0e,GAAG;MACJpF,QAAQ/Y,MAAK+e;KACd;AACD,QAAMnN,mBAAmB0K,cAAc0C,aAAY;AACnD,QAAMrU,mBAAmB,IAAIsU,iBAAiBrN,kBAAkB;MAC9DnS;MACA9B;MACA+gB;MACAC;MACA9M;KACD,EAAEsM,GAAG,UAAUne,MAAKkf,SAAS;AAC9B,QAAMtS,eAAe,IAAIuS,aAAa;MACpCd;MACA5e;MACA6e;MACAC;MACAE;MACAD;MACAI;KACD;AACD,QAAMvC,WAAW,IAAIlK,SAAS;MAC5BG;MACAD;MACAD;KACD,EAAE+L,GAAG;MACJ,UAAUne,MAAKof;MACf,iBAAiBpf,MAAKqf;MACtB,kBAAkBrf,MAAKsf;KACxB;AAEDjD,aAASkD,QAAQjD,cAAckD,eAAc,CAAE;AAC/C,QAAMvX,eAAe,IAAIsC,aAAaqH,kBAAkB;MACtDnF;MACAwE;MACAc,sBAAsBnF;MACtBlC,0BAA0BC;MAC1B7G;KACD;AAEDmE,iBAAakW,GAAG;MACd,kBAAkBne,MAAKyb;MACvB,gBAAgBzb,MAAKyf;KACtB;AAEDvB,aAAUwB,aAAa9N,gBAAgB;AACvCsM,aAAUC,GAAG,WAAWne,MAAK2f,kBAAkB;AAE/C3f,UAAK4M,eAAeA;AACpB5M,UAAKiI,eAAeA;AACpBjI,UAAK6e,iBAAiBA;AACtB7e,UAAKsc,gBAAgBA;AACrBtc,UAAK2K,mBAAmBA;AACxB3K,UAAKqc,WAAWA;AAEhBrc,UAAK2K,iBAAiBmQ,OAAM;;;AAC7B,MAAAra,UAAAsa,cAAAra;mBAzHGqa;AAyIGta,UAAA,cAAP,SAAmBgB,SAA2B;AAA3B,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AACjB,SAAKma,aAAana,OAAO;AACzB,WAAO;;AAMFhB,UAAA,oBAAP,WAAA;AACE,WAAO,KAAK6b,cAAcsD,WAAU;;AAM/Bnf,UAAA,4BAAP,WAAA;AACE,WAAO,KAAK6b,cAAcuD,mBAAkB;;AAMvCpf,UAAA,sBAAP,WAAA;AACE,WAAO,KAAK6b,cAAc0C,aAAY;;AAOjCve,UAAA,YAAP,SAAiBQ,OAA6B;AAC5C,SAAKgH,aAAaL,UAAU3G,KAAK;AACjC,SAAK6e,YAAW;AAEhB,WAAO;;AASFrf,UAAA,aAAP,SAAkBoF,aAAqBC,WAAmB0B,gBAAwB;AAChF,SAAKS,aAAaH,WAAWjC,aAAaC,SAAS;AACnD,SAAKuW,SAASvU,WAAWjC,aAAaC,SAAS;AAE/C,QAAI0B,gBAAgB;AAClB,WAAK2M,gBAAe,EAAG1P,QAAQ,SAACnD,MAAI;AAClC,YAAIA,KAAKzB,QAAQC,QAAQR,eAAe;AACtCgC,eAAKzB,UAAU,CAAA;;OAElB;AACD,WAAKkgB,WAAU;WACV;AACL,WAAK/B,QAAO;AACZ,WAAK5C,iBAAgB;;AAEvB,WAAO;;AAMF3a,UAAA,iBAAP,WAAA;AACE,WAAO,KAAK4b,SAAS/H,eAAc;;AAM9B7T,UAAA,eAAP,WAAA;AACE,WAAO,KAAK4b,SAAS9H,aAAY;;AAe5B9T,UAAA,SAAP,SAAcQ,OAAkCtC,UAA0B;AACxE,WAAO,KAAKqhB,OAAO,IAAI/e,OAAOtC,QAAQ;;AAejC8B,UAAA,UAAP,SAAeQ,OAAkCtC,UAA0B;AACzE,WAAO,KAAKqhB,OAAO,GAAG/e,OAAOtC,QAAQ;;AAgBhC8B,UAAA,SAAP,SAAcyF,OAAejF,OAAkCtC,UAA0B;AACvF,QAAM8O,gBAAwC,KAAKxF,aAAa2H,cAAa;AAC7E,QAAMqQ,YAAY5W,qBAAqBpI,OAAOtC,QAAQ;AAEtD,QAAIuH,UAAU,IAAI;AAChBuH,oBAAczI,KAAI,MAAlByI,eAAsBwS,SAAS;WAC1B;AACLxS,oBAAcgD,OAAM,MAApBhD,eAAavL,eAAA,CAAQgE,OAAO,CAAC,GAAK+Z,WAAS,KAAA,CAAA;;AAE7C,WAAO,KAAKrY,UAAU6F,aAAa;;AAgB9BhN,UAAA,qBAAP,SAA0Byf,YAAoBjf,OAAkCtC,UAA0B;AACxG,QAAMwhB,iBAAsC,KAAKlY,aAAaJ,UAAS;AACvE,QAAMuY,aAAaD,eAAeD,UAAU;AAE5C,QAAI,CAACE,YAAY;AACf,aAAO,KAAKC,OAAOpf,OAAOtC,QAAQ;;AAEpC,QAAM8O,gBAAwC,KAAKxF,aAAa2H,cAAa;AAC7E,QAAM0Q,gBAAgBF,WAAWzhB;AACjC,QAAM4hB,iBAAiBpa,UAAUsH,eAAe,SAACnM,MAAI;AAAK,aAAAA,KAAK3C,aAAa2hB;KAAa;AAEzF,WAAO,KAAKN,OAAOO,gBAAgBtf,OAAOtC,QAAQ;;AAQ7C8B,UAAA,YAAP,SAAiB/B,MAAoB0L,qBAA6B;AAChE,WAAO;MACLO,kBAAkB,KAAKA,iBAAiB6V,UAAS;MACjD5T,cAAc,KAAKA,aAAa4T,UAAS;MACzCvY,cAAc,KAAKA,aAAawY,eAAe/hB,MAAM0L,mBAAmB;MACxEkS,eAAe,KAAKA,cAAckE,UAAS;;;AASxC/f,UAAA,iBAAP,SAAsBmJ,MAA4C;AAChE,SAAK3B,aAAaR,eAAemC,IAAI;AACrC,WAAO;;AAOFnJ,UAAA,aAAP,SAAkBmJ,MAA4C;AAC5D,SAAK3B,aAAaP,WAAWkC,IAAI;AACjC,WAAO;;AAQFnJ,UAAA,qBAAP,SACEQ,OACAtC,UAA0B;AAF5B,QAAA,QAAA;AAIE,QAAM2G,SAAS,KAAK2C,aAAayY,mBAAmBzf,OAAOtC,QAAQ;AAEnE,SAAKmhB,YAAY,IAAI;AACrB,WAAAjiB,UAAAA,UAAA,CAAA,GACKyH,MAAM,GAAA;MACT6W,QAAQ,WAAA;AACNnc,cAAK2gB,mBAAmB;UAAEhiB,UAAU2G,OAAOP,MAAMpG;SAAU;;;;AAU1D8B,UAAA,sBAAP,SACEQ,OACAtC,UAA0B;AAF5B,QAAA,QAAA;AAIE,QAAM2G,SAAS,KAAK2C,aAAa2Y,oBAAoB3f,OAAOtC,QAAQ;AAEpE,SAAKmhB,YAAY,IAAI;AACrB,WAAAjiB,UAAAA,UAAA,CAAA,GACKyH,MAAM,GAAA;MACT6W,QAAQ,WAAA;AACNnc,cAAK2gB,mBAAmB;UAAEhiB,UAAU2G,OAAOP,MAAMpG;SAAU;;;;AAU1D8B,UAAA,qBAAP,SAA0B/B,MAAqD;AAC7E,SAAKuJ,aAAa0Y,mBAAmBjiB,IAAI;AACzC,SAAKohB,YAAY,IAAI;;AAShBrf,UAAA,YAAP,SAAiBE,QAA4B6G,gBAAwB;AACnE,SAAKoF,aAAajF,UAAUhH,OAAOiM,YAAY;AAC/C,SAAKjC,iBAAiBhD,UAAUhH,OAAOgK,gBAAgB;AACvD,SAAK2R,cAAc3U,UAAUhH,OAAO2b,aAAa;AACjD,QAAMrU,eAAe,KAAKA;AAC1B,QAAM4Y,iBAAiB,KAAKlW,iBAAiBmW,cAAa;AAE1D7Y,iBAAa8Y,eAAepgB,OAAOsH,YAAY;AAC/C,SAAK4U,cAAa;AAClB,SAAKR,SAASvU,WAAWG,aAAaqM,eAAc,GAAIrM,aAAasM,aAAY,CAAE;AAEnF,SAAKyM,aAAY,EAAGC,UAAS;AAE7B,QAAMhL,QAAQ;MACZuF,UAAU,KAAK7Q,iBAAiBmW,cAAa,MAAOD;MACpDtF,WAAW;;AAEb,QAAI/T,gBAAgB;AAClB,WAAKuY,WAAW9J,KAAK;WAChB;AACL,WAAK+H,QAAQ/H,KAAK;;AAEpB,WAAO;;AAMFxV,UAAA,qBAAP,SAA0ByF,OAAa;AACrC,QAAMF,aAAa,KAAK6B,UAAS;AAEjC,WAAO,KAAKqZ,iBAAiBlb,WAAWE,KAAK,EAAEvH,QAAQ;;AAMlD8B,UAAA,mBAAP,SAAwB7B,KAAoB;AAC1C,QAAM6O,gBAAgB,KAAKvD,SAAQ;AAEnC,QAAMiX,aAAahb,UAAUsH,eAAe,SAACnM,MAAI;AAAK,aAAAA,KAAK3C,aAAaC;KAAG;AAC3E,QAAMwiB,YAAY5a,cAAciH,eAAe,SAACnM,MAAI;AAAK,aAAAA,KAAK3C,aAAaC;KAAG;AAE9E,QAAIuiB,eAAe,IAAI;AACrB,aAAO;;AAET1T,kBAAcgD,OAAO0Q,YAAYC,YAAYD,aAAa,CAAC;AAC3D,WAAO,KAAKvZ,UAAU6F,aAAa;;AAM9BhN,UAAA,gBAAP,SAAqByF,OAAa;AAChC,QAAMuH,gBAAgB,KAAKvD,SAAS,IAAI;AAExCuD,kBAAcgD,OAAOvK,OAAO,CAAC;AAE7B,WAAO,KAAK0B,UAAU6F,aAAa;;AAM9BhN,UAAA,cAAP,SAAmB7B,KAAoB;AACrC,QAAM6O,gBAAgB,KAAKvD,SAAS,IAAI;AACxC,QAAMhE,QAAQC,UAAUsH,eAAe,SAACnM,MAAI;AAAK,aAAAA,KAAK1C,QAAQA;KAAG;AAEjE,WAAO,KAAKyiB,cAAcnb,KAAK;;AAQ1BzF,UAAA,cAAP,SAAmBQ,OAA4BQ,SAA2B;AAA3B,QAAA,YAAA,QAAA;AAAAA,gBAAAA,CAAAA;;AAC7C,SAAKwG,aAAawD,YAAYxK,OAAOQ,OAAO;AAC5C,WAAO;;AAOFhB,UAAA,WAAP,SAAgB2J,qBAA6B;AAC3C,WAAO,KAAKnC,aAAa2H,cAAcxF,mBAAmB;;AAOrD3J,UAAA,kBAAP,SAAuB2J,qBAA6B;AAClD,WAAO,KAAKnC,aAAakM,gBAAgB/J,mBAAmB;;AAOvD3J,UAAA,oBAAP,WAAA;AACE,WAAO,KAAKwH,aAAaF,kBAAiB;;AAOrCtH,UAAA,YAAP,SAAiB2J,qBAA6B;AAC5C,WAAO,KAAKnC,aAAaJ,UAAUuC,mBAAmB;;AAOjD3J,UAAA,mBAAP,SAAwB2J,qBAA6B;AACnD,WAAO,KAAKnC,aAAaoD,iBAAiBjB,mBAAmB;;AAOxD3J,UAAA,OAAP,SAAYmB,WAA0C;AAA1C,QAAA,cAAA,QAAA;AAAAA,kBAA6B7D,UAAUE;;AACjD,SAAKqjB,YAAY1f;AACjB,SAAK2f,mBAAmB3f,SAAS;;AAO5BnB,UAAA,QAAP,SAAa+gB,WAAmB;AAC9B,SAAKF,YAAY;AAEjB,QAAIE,WAAW;AACb,WAAKvZ,aAAawZ,eAAc;AAEhC,UAAI,KAAKxZ,aAAa8D,WAAU,GAAI;AAClC,aAAKiS,QAAO;;;;AAQXvd,UAAA,SAAP,WAAA;AACE,WAAO,CAAC,CAAC,KAAK6gB;;AAMT7gB,UAAA,UAAP,WAAA;AACE,SAAKkV,IAAG;AACR,SAAKqL,aAAY,EAAGU,QAAO;AAC3B,SAAK/W,iBAAiB+W,QAAO;AAC7B,SAAKzZ,aAAayZ,QAAO;AACzB,SAAKpF,cAAcoF,QAAO;AAC1B,SAAKrF,SAASqF,QAAO;;AAGfjhB,UAAA,eAAR,WAAA;AACE,WAAO,KAAKgB,QAAQyc;;AAEdzd,UAAA,oBAAR,WAAA;AACE,WAAO,KAAKsH,kBAAiB,EAAGlF,IAAI,SAACvB,MAAI;AACvC,aAAO;QACLzC,SAASyC,KAAKzC;QACdD,KAAK,GAAA,OAAG0C,KAAK5C,MAAI,GAAA,EAAA,OAAI4C,KAAK1C,GAAG;QAC7B4Y,SAASlW;;KAEZ;;AAEKb,UAAA,aAAR,SAAmBwV,OAA2B;AAC5C,SAAK+K,aAAY,EAAGpZ,UAAU,KAAK+Z,kBAAiB,GAAI1L,KAAK;;AAEvDxV,UAAA,UAAR,SAAgBwV,OAA2B;AACzC,SAAK+K,aAAY,EAAGhK,OAAO,KAAK2K,kBAAiB,GAAI1L,KAAK;;AAEpDxV,UAAA,UAAR,SAAgBwV,OAA+B;AAA/B,QAAA,UAAA,QAAA;AAAAA,cAAAA,CAAAA;;AACd,SAAK+K,aAAY,EAAG9E,OAAOjG,KAAK;;AAE1BxV,UAAA,gBAAR,WAAA;AACE,QAAM6b,gBAAgB,KAAKA;AAE3BA,kBAAcxB,OAAM;AAEpB,SAAKuB,SAASkD,QAAQjD,cAAckD,eAAc,CAAE;;AAE9C/e,UAAA,cAAR,SAAoBqd,UAAkB;AACpC,QAAMzB,WAAW,KAAKA;AACtB,QAAMC,gBAAgB,KAAKA;AAE3B,QAAI,CAACA,cAAckD,eAAc,GAAI;AACnC,WAAKoC,cAAa;;AAEpB,SAAK/E,cAAa;AAClB,SAAK5U,aAAaH,WAAWuU,SAAS/H,eAAc,GAAI+H,SAAS9H,aAAY,CAAE;AAC/E,QAAIuJ,UAAU;AACZ,WAAKE,QAAO;WACP;AACL,WAAKI,QAAO;;;AAGR3d,UAAA,gBAAR,WAAA;AACE,SAAK4b,SAASzU,UAAU,KAAKC,UAAU,IAAI,EAAEhF,IAAI,SAAC6B,IAAwB;UAAtB/F,WAAQ,GAAA,UAAE2I,OAAI,GAAA,MAAE5I,OAAI,GAAA;AACtE,UAAMgR,WAAWpI,KAAKkG,YAAW;AAEjC,aAAO;QACL5O,KAAKD;QACLoO,WAAWrO,SAASS,WAAWc;QAC/BkQ,cAAcT,SAAS3N;QACvBkR,YAAYvD,SAAS1N;QACrBqT,OAAO/N,KAAK4C,SAAQ,EAAGrH,IAAI,SAACvB,MAAI;AAC9B,iBAAO;YACL1C,KAAK0C,KAAK1C;YACVkE,KAAKxB,KAAKugB;YACVrP,MAAMlR,KAAKwgB;;SAEd;;KAEJ,CAAC;;AAEIrhB,UAAA,UAAR,WAAA;AACE,SAAK4b,SAAStD,OAAO,KAAKuD,cAAcnE,qBAAoB,CAAE;;AAsIxD1X,UAAA,mBAAR,SACEmB,WACAmgB,WACA9G,GAAqD;AAHvD,QAAA,QAAA;AAKE,QAAI,KAAKqG,WAAW;AAClB,WAAKC,mBAAmB,KAAKD,SAAS;AACtC;;AAEF,SAAK3O,QAAQ,IAAIsF,iBAAe8J,WAAW;MACzCpjB,UAAUsc,EAAErc;MACZojB,cAAc/G,EAAElH;MAChBtC,eAAewJ,EAAE9V,YAAY,CAAA;MAC7B4H,WAAWkO,EAAElO;MACbkV,MAAM,WAAA;AACJjiB,cAAKiiB,KAAKrgB,SAAS;;MAErBsgB,OAAO,SAACV,WAAmB;AACzBxhB,cAAKkiB,MAAMV,SAAS;;KAEvB,CAAC;;AAkHI/gB,UAAA,eAAR,SAAqBgB,SAA6B0gB,WAAmB;AAAhD,QAAA,YAAA,QAAA;AAAA1gB,gBAAAA,CAAAA;;AACnB,QAAI,CAAC0gB,aAAa1gB,QAAQ0M,WAAW;AACnC,WAAKxD,iBAAiBmQ,OAAM;;AAE9B,SAAK8G,cAAa;AAClB,QAAI,CAAC,KAAK7Z,kBAAiB,EAAGjG,QAAQ;AACpC,UAAMsH,WAAWD,SAAQ,KAAKiZ,oBAAmB,EAAGhZ,QAAQ;AAC5D,UAAIA,SAAStH,SAAS,GAAG;AAEvB,aAAKmG,aAAaL,UAAUyB,qBAAqBD,QAAQ,CAAC;AAC1D,aAAKyT,cAAa;AAClB,aAAK/U,WAAW,GAAG,GAAG,IAAI;AAC1B,aAAKkZ,aAAY,EAAG1J,QAAO;aACtB;AACL,aAAK+E,SAAStD,OAAO,CAAC;;AAExB,aAAO;;AAET,QAAI,CAAC,KAAK1N,iBAAiB,IAAI,EAAEvJ,QAAQ;AACvC,WAAKgG,WAAW,GAAG,CAAC;WACf;AACL,WAAKG,aAAagG,YAAYxM,OAAO;;AAEvC,WAAO;;AAEDhB,UAAA,qBAAR,SAA2BmB,WAA0B;AACnD,QAAMqG,eAAe,KAAKA;AAC1B,QAAMoU,WAAW,KAAKA;AAEtB,QACE,CAACpU,aAAaoa,eAAc,KACzBhG,SAASiG,UAAU1gB,SAAS,KAC5BqG,aAAasa,aAAa3gB,SAAS,KACnCqG,aAAaua,eAAc,GAC9B;AACA,WAAKxE,QAAO;;;AAGRvd,UAAA,mBAAR,WAAA;AACE,QAAMwH,eAAe,KAAKA;AAC1B,QAAMwa,cAAc,KAAKxa,aAAaoa,eAAc;AAEpD,QACEI,gBACI,CAAC,KAAKnB,aAAa,CAAC,KAAKjF,SAASiG,UAAUG,WAAW,MACxDxa,aAAawZ,eAAc,KAC3BxZ,aAAaua,eAAc,GAC9B;AACA,WAAKxE,QAAO;;;;AAh6BFjD,EAAAA,cAAAA,iBAAiBld,UAAAA,UAAAA,CAAAA,GAC1B6kB,oBAAoB,GAAA;IACvBlY,WAAW;IACX4N,cAAc;IACd8F,UAAU;IACV9L,WAAW;IACXC,YAAY;IACZgG,iBAAiB;IACjB5L,oBAAqB,WAAA;AAAM,aAAA;;;AAEfsO,EAAAA,cAAAA,gBAAgBnd;AAX1Bmd,EAAAA,gBAAY,iBAAA9I,YAAA,CADjB/J,wBAAwB,GACnB6S,aAAY;AAo6BlB,SAAAA;EAp6BsFnF,qBAAS;ACnE/F,IAAA,sBAAA,SAAA,QAAA;AAAyCrW,EAAAA,WAAAA,sBAAAA,MAAAA;AAAzC,WAAAojB,uBAAA;;;AACgBA,EAAAA,qBAAAA,gBAAa9kB,UAAAA,UAAA,CAAA,GACtBkd,aAAa3S,aAAa,GAC1Bwa,YAAYxa,aAAa;AAEhBua,EAAAA,qBAAAA,iBAAuD9kB,UAAAA,UAAAA,UAAAA,CAAAA,GAChEkd,aAAa7W,cAAc,GAC3B0e,YAAY1e,cAAc,GAAA;IAC7B+M,iBAAiB2R;IACjBnW,oBAAoB,SAACnL,MAAMgG,MAAI;AAC7B,UAAMub,SAASC,WAAWxhB,KAAKrC,WAAW4jB,MAAM,KAAK;AAErD,aAAOA,UAAUvb,KAAKoF;;;AAZfiW,EAAAA,uBAAmB1Q,YAAA,CAD/B/J,wBAAwB,GACZya,oBAAmB;AAehC,SAAAA;EAfyC5H,YAAY;ACIrD,IAAA,wBAAA,SAAA,QAAA;AAA2Cxb,EAAAA,WAAAA,wBAAAA,MAAAA;AAA3C,WAAAwjB,yBAAA;;;AACgBA,EAAAA,uBAAAA,gBAAallB,UAAAA,UAAA,CAAA,GACtBkd,aAAa3S,aAAa,GAC1B4a,cAAc5a,aAAa;AAElB2a,EAAAA,uBAAAA,iBAAyDllB,UAAAA,UAAAA,UAAAA,CAAAA,GAClEkd,aAAa7W,cAAc,GAC3B8e,cAAc9e,cAAc,GAAA;IAC/B+M,iBAAiB+R;;AARRD,EAAAA,yBAAqB9Q,YAAA,CADjC/J,wBAAwB,GACZ6a,sBAAqB;AAUlC,SAAAA;EAV2ChI,YAAY;ACJvD,IAAA,oBAAA,SAAA,QAAA;AAAuCxb,EAAAA,WAAAA,oBAAAA,MAAAA;AAAvC,WAAA0jB,qBAAA;;;AACgBA,EAAAA,mBAAAA,gBAAaplB,UAAAA,UAAA,CAAA,GACtBkd,aAAa3S,aAAa,GAC1B8a,UAAU9a,aAAa;AAEd6a,EAAAA,mBAAAA,iBAAqDplB,UAAAA,UAAAA,UAAAA,CAAAA,GAC9Dkd,aAAa7W,cAAc,GAC3Bgf,UAAUhf,cAAc,GAAA;IAC3B+M,iBAAiBiS;;AARRD,EAAAA,qBAAiBhR,YAAA,CAD7B/J,wBAAwB,GACZ+a,kBAAiB;AAU9B,SAAAA;EAVuClI,YAAY;ACMnD,IAAA,sBAAA,SAAA,QAAA;AAAyCxb,EAAAA,WAAAA,sBAAAA,MAAAA;AAAzC,WAAA4jB,uBAAA;;;AACgBA,EAAAA,qBAAAA,gBAAatlB,UAAAA,UAAA,CAAA,GACtBkd,aAAa3S,aAAa,GAC1Bgb,YAAYhb,aAAa;AAEhB+a,EAAAA,qBAAAA,iBAActlB,UAAAA,UAAAA,UAAA,CAAA,GACvBkd,aAAa7W,cAAc,GAC3Bkf,YAAYlf,cAAc,GAAA;IAC7B+M,iBAAiBmS;;AARRD,EAAAA,uBAAmBlR,YAAA,CAD/B/J,wBAAwB,GACZib,oBAAmB;AAUhC,SAAAA;EAVyCpI,YAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzB9C,IAAMsI,+BAA+B;EAC1C,kBAAkB;EAClB,oBAAoB;EACpB,mBAAmB;EACnB,oBAAoB;EACpB,kBAAkB;;AAGb,IAAMC,4BAAsC,CAAA;AAEnD,KAAWC,QAAQF,8BAA8B;AAC/CC,4BAA0BE,KAAKD,IAAI;;AAD1BA;AAIJ,IAAME,2BAAwBC,eAAA,CACnC,OACA,eACA,UACA,kBACA,WACA,UACA,WACA,QAAQ,GACLJ,2BAAyB,IAAA;SCxBdK,WAAWC,KAAQ;AACjC,SAAO,OAAOA,QAAQ;AACxB;;ACmBUC,EAAAA,WAAAA,eAAAA,MAAAA;AADV,WAAAC,gBAAA;AAAA,QAAA,QAAA,WAAA,QAAA,OAAA,MAAA,MAAA,SAAA,KAAA;AAKUC,UAAAA,kBAAcC,wBAAe;AAC7BD,UAAAA,oBAAgBC,wBAAe;;;AAsJxC,MAAAC,UAAAH,cAAAI;AAnJQD,UAAA,SAAP,WAAA;AACE,QAAME,aAAqC,CAAA;AAC3C,QAAMC,QAAQ,KAAKA;AACnB,QAAMC,YAAa,KAAKC,YAAoCD;AAC5D,QAAME,iBAAiBF,UAAUE;AAEjC,QAAMC,MAAMJ,MAAMK,OAAc;AAEhC,aAAWlB,QAAQa,OAAO;AACxB,UAAIb,QAAQgB,kBAAkBd,yBAAyBiB,QAAQnB,IAAW,IAAI,IAAI;AAChF;;AAEFY,iBAAWZ,IAAI,IAAIa,MAAMb,IAAI;;AAG/B,eAAOS,4BAACQ,KAAGG,UAAA;MAACC,KAAK,KAAKC;OAAiBV,UAAU,GAC9C,KAAKW,iBAAgB,CAAE;;AAGrBb,UAAA,oBAAP,WAAA;AAAA,QAAA,QAAA;AACE,QAAMI,YAAa,KAAKC,YAAoCD;AAC5D,QAAME,iBAAiBF,UAAUE;AACjC,QAAMQ,UAAwC,CAAA;AAC9C,QAAMX,QAAQ,KAAKA;AACnB,QAAMY,mBAAmB,KAAKC,cAAcC;AAE5C,aAAW3B,QAAQgB,gBAAgB;AACjC,UAAIhB,QAAQa,OAAO;AAChBW,gBAAgBxB,IAAI,IAAKa,MAAcb,IAAI;;;AAGhD,QAAIyB,kBAAkB;AACpBD,cAAQI,YAAYH;;AAEtB,SAAKI,YAAY,IAAIC,SAAQ;AAC7BN,YAAQO,WAAW,KAAKF;AACxB,QAAMG,OAAO,IAAIlB,UAAU,KAAKQ,YAAYK,SAAUH,OAAO;2BAElDS,YAAS;AAClB,UAAMC,kBAAmBpC,6BAAqCmC,UAAS;AAEvED,WAAKG,GAAGD,iBAAiB,SAACE,GAAM;AAC9B,YAAMC,WAAW7B,MAAKK,MAAMoB,UAAS;AAErCI,oBAAYA,SAASD,CAAC;OACvB;;AAPH,aAAWH,aAAanC,8BAA4B;cAAzCmC,SAAS;;AAUpB,SAAKK,QAAQN;AACb,SAAKH,UAAUM,GAAG,UAAU,WAAA;AAC1B3B,YAAK+B,SAAS,CAAA,CAAE;KACjB;AAEDC,wBAAoB,KAAKC,cAAa,GAAI;MACxCT;MACAU,gBAAgB7B,MAAM6B;MACtBC,YAAY9B,MAAM+B;MAClBC,gBAAgBhC,MAAMiC;MACtBC,YAAYlC,MAAMkC;MAClBC,QAAQnC,MAAMmC;KACf;AACD,SAAKnB,UAAUoB,QAAO;;AAGjBvC,UAAA,qBAAP,WAAA;AACE,QAAMI,YAAa,KAAKC,YAAoCD;AAC5D,QAAMoC,gBAAgBpC,UAAUoC;AAChC,QAAMrC,QAAQ,KAAKA;AACnB,QAAMmB,OAAO,KAAKM;AAElB,aAAWtC,QAAQkD,eAAe;AAChC,UAAIlD,QAAQa,OAAO;AAChBmB,aAAahC,IAAI,IAAKa,MAAcb,IAAI;;;AAG7C,SAAK6B,UAAUoB,QAAO;;AAGjBvC,UAAA,uBAAP,WAAA;AACE,SAAK4B,MAAMa,QAAO;;AAGZzC,UAAA,gBAAR,WAAA;AACE,QAAMG,QAAQ,KAAKA;AACnB,QAAMuC,WAAW3C,sBAAe4C,QAAQxC,MAAMuC,QAAQ;AACtD,QAAME,kBAAkBzC,MAAMyC,mBAAmBC,yBAAoBvC,eAAesC;AACpF,QAAME,SAAS3C,MAAM2C,UAAW,SAACC,MAAwB;AAAK,aAAAA,KAAKC;;AACnE,QAAMC,UAAU9C,MAAM8C,WAAY,SAACF,MAAwB;AAAK,aAAAA,KAAK5C,MAAM,GAAA,OAAGyC,iBAAe,UAAA,CAAU;;AACvG,QAAMM,SAAS/C,MAAM+C,UAAW,WAAA;AAAM,aAAC,CAAA;;AAGvC,WAAOR,SAASS,IAAI,SAACC,OAAOC,GAAC;AAC3B,UAAMC,KAGFJ,OAAOE,OAAOC,CAAC,KAAK,CAAA,GAFtBE,OAAI,GAAA,MACDC,OAAIC,QAAA,IAFH,CAAA,MAAA,CAGL;AAGD,aAAA/C,UAAAA,UAAA;QACEgD,UAAUT,QAAQG,OAAOC,CAAC;QAC1BL,KAAKF,OAAOM,OAAOC,CAAC;SACjBG,IAAI,GAAA;QACPD,MAAI7C,UAAAA,UAAA,CAAA,GACC6C,IAAI,GAAA;UACPI,KAAKP;;;KAGV;;AAEKpD,UAAA,mBAAR,WAAA;AACE,QAAMG,QAAQ,KAAKA;AACnB,QAAMyD,kBAAkB,KAAKC,oBAAmB;AAChD,QAAM3C,YAAYf,MAAMe;AAExB,QAAM4C,eAAe3D,MAAM4D,gBAAuB;AAElD,QAAI7C,cAAc,MAAM;AACtB,iBAAOnB,4BAAC+D,cAAY;QAACnD,KAAK,KAAKK;SAC5B4C,eAAe;WAEb;AACL,aAAOA;;;AAGH5D,UAAA,sBAAR,WAAA;AACE,QAAMG,QAAQ,KAAKA;AACnB,QAAMiC,cAAcjC,MAAMiC;AAC1B,QAAMF,UAAU/B,MAAM+B;AACtB,QAAM8B,eAAeC,kBAAkB,KAAKlC,cAAa,GAAI;MAC3DT,MAAM,KAAKM;MACXU,QAAQnC,MAAMmC;MACdD,YAAYlC,MAAMkC;MAClBL,gBAAgB7B,MAAM6B;MACtBC,YAAY9B,MAAM+B;MAClBC,gBAAgBhC,MAAMiC;KACvB;AAED,WAAO4B,aAAab,IAAI,SAACJ,MAAI;AAC3B,UAAIA,KAAKmB,SAASC,UAAUC,SAAS;AACnC,mBAAOrE,2BAAmBL,WAAW0C,WAAW,IAAIA,YAAYW,IAAI,IAAIX,aAAa;UAAEY,KAAKD,KAAKC;SAAK;iBAC7FD,KAAKmB,SAASC,UAAUE,SAAS;AAC1C,mBAAOtE,2BAAmBL,WAAWwC,OAAO,IAAIA,QAAQa,IAAI,IAAIb,SAAS;UAAEc,KAAKD,KAAKC;SAAK;aACrF;AACL,eAAOD,KAAKQ,KAAKI;;KAEpB;;AAtJHW,EAAAA,YAAAA,CADCC,uBAAuB,GAAA1E,cAAA,WAAA,SAAA,MAAA;AAyJ1B,SAAAA;EA3JUE,sBAAe;;ACfgBH,EAAAA,WAAAA,sBAAAA,MAAAA;AAAzC,WAAA4E,uBAAA;;;AACgBA,EAAAA,qBAAAA,YAAYC;AAC5B,SAAAD;EAFyC3E,aAAY;;ACAVD,EAAAA,WAAAA,wBAAAA,MAAAA;AAA3C,WAAA8E,yBAAA;;;AACgBA,EAAAA,uBAAAA,YAAYC;AAC5B,SAAAD;EAF2C7E,aAAY;;ACAhBD,EAAAA,WAAAA,oBAAAA,MAAAA;AAAvC,WAAAgF,qBAAA;;;AACgBA,EAAAA,mBAAAA,YAAYC;AAC5B,SAAAD;EAFuC/E,aAAY;;ACAVD,EAAAA,WAAAA,sBAAAA,MAAAA;AAAzC,WAAAkF,uBAAA;;;AACgBA,EAAAA,qBAAAA,YAAYC;AAC5B,SAAAD;EAFyCjF,aAAY;",
  "names": ["isUndefined", "value", "ComponentEvent", "eventType", "props", "_canceled", "_b", "__values", "Object", "keys", "key", "Component", "_eventHandler", "event", "_i", "params", "eventName", "ActualComponentEvent", "handlers", "length", "currentTarget", "forEach", "handler", "handlerToAttach", "eventHash", "once", "listener_1", "args", "_this", "off", "on", "name", "handlerList", "push", "handlerToDetach", "i", "splice", "key", "values", "keys", "indexOf", "value", "prevIndex", "index", "length", "object", "SUPPORT_MAP", "Map", "prevLink", "nextLink", "prev", "next", "link", "orderChanged", "changed", "fixed", "fromLinks", "toLinks", "forEach", "_a", "from", "to", "Link", "i", "connect", "filter", "_", "map", "fromLink", "toLink", "fromIndex", "getIndex", "disconnect", "undefined", "toIndex", "prevList", "list", "added", "removed", "maintained", "changedBeforeAdded", "Object", "cacheOrdered", "caculateOrdered", "cachePureChanged", "ordered", "pureChanged", "_b", "fromBefore", "toBefore", "push", "diff", "findKeyCallback", "mapClass", "HashMap", "PolyMap", "callback", "e", "prevKeys", "prevKeyMap", "keyMap", "removedMap", "addedCount", "removedCount", "prevListIndex", "set", "listIndex", "get", "reverse", "Result", "slice", "call", "newData", "result", "findKeyCallback", "Map", "undefined", "childrenCount", "el", "__DIFF_KEY__", "tslib_1", "ChildrenDiffer", "list", "_super", "ListDiffer", "diff", "prevList", "listdiff", "CFCS_DETECTED_DEPENDENCIES_VERSION", "CFCS_DETECTED_DEPENDENCIES", "getDetectedStack", "Object", "CFCS_DETECTED_DEPENDENCIES", "versionList", "CFCS_DETECTED_DEPENDENCIES_VERSION", "getCurrentDetected", "stack", "length", "detectDependencies", "host", "observers", "detected", "push", "observer", "indexOf", "endDetectDependencies", "pop", "Observer", "value", "_emitter", "Component", "_current", "defineProperty", "get", "currentDetected", "set", "_setCurrent", "subscribe", "callback", "current", "on", "unsubscribe", "off", "prevValue", "isUpdate", "trigger", "toString", "concat", "valueOf", "ComputedObserver", "_super", "__extends", "_computedCallback", "_this", "_registered", "_onCheckUpdate", "results", "forEach", "isWindow", "window", "ua", "navigator", "userAgent", "SUPPORT_COMPUTEDSTYLE", "IS_IE", "test", "SUPPORT_ADDEVENTLISTENER", "document", "WIDTH", "HEIGHT", "getAttribute", "el", "name", "toArray", "arr", "slice", "call", "hasSizeAttribute", "target", "prefix", "hasLoadingAttribute", "hasSkipAttribute", "addEvent", "element", "type", "handler", "SUPPORT_ADDEVENTLISTENER", "addEventListener", "attachEvent", "removeEvent", "removeEventListener", "detachEvent", "innerWidth", "getSize", "innerHeight", "getStyles", "SUPPORT_COMPUTEDSTYLE", "window", "getComputedStyle", "currentStyle", "size", "parseFloat", "toLowerCase", "getContentElements", "tags", "skipElements", "querySelectorAll", "__spreadArrays", "map", "tag", "join", "filter", "indexOf", "elements", "addAutoSizer", "length", "resizeAllAutoSizers", "__PREFIX__", "push", "resize", "removeAutoSizer", "index", "fixed", "style", "HEIGHT", "WIDTH", "splice", "elementPrefix", "dataWidth", "parseInt", "dataHeight", "forEach", "__extends", "Loader", "options", "_super", "_this", "e", "clear", "onError", "hasLoading", "checkElement", "withPreReady", "hasDataSize", "onReady", "isSkip", "onAlreadyReady", "onAlreadyPreReady", "constructor", "EVENTS", "onCheck", "off", "trigger", "isPreReady", "isReady", "setTimeout", "onPreReady", "Component", "ElementLoader", "ImReadyManager", "loaders", "elementInfos", "loader", "getLoader", "check", "on", "info", "checkPreReady", "onPreReadyElement", "_a", "checkReady", "onReadyElement", "hasError", "totalCount", "every", "totalErrorCount", "isPreReadyOver", "preReadyCount", "readyCount", "destroy", "tagName", "Object", "keys", "children", "setHasLoading", "some", "childrenImReady", "clone", "contentElements", "ComponentEvent", "errorCount", "getErrorCount", "ImageLoader", "src", "complete", "naturalWidth", "onAlreadyError", "addEvents", "IS_IE", "setAttribute", "VideoLoader", "readyState", "error", "ImReady", "img", "video", "DEFAULT_GRID_OPTIONS", "horizontal", "useTransform", "percentage", "isEqualSize", "isConstantSize", "gap", "attributePrefix", "resizeDebounce", "maxResizeDebounce", "autoResize", "preserveUIOnDestroy", "defaultDirection", "externalContainerManager", "externalItemRenderer", "renderOnPropertyChange", "useFit", "outlineLength", "outlineSize", "useRoundedSize", "useResizeObserver", "observeChildren", "PROPERTY_TYPE", "MOUNT_STATE", "UPDATE_STATE", "GRID_PROPERTY_TYPES", "RENDER_PROPERTY", "PROPERTY", "GRID_METHODS", "RECT_NAMES", "horizontal", "inlinePos", "contentPos", "inlineSize", "contentSize", "vertical", "getKeys", "obj", "Object", "keys", "getUpdatedItems", "items", "entries", "mountedItems", "getMountedItems", "diff", "map", "entry", "target", "item", "element", "maintained", "filter", "_a", "prevIndex", "nextIndex", "entrySize", "size", "computedInlineSize", "blockSize", "computedContentSize", "getMountedElements", "isString", "val", "isObject", "isNumber", "camelize", "str", "replace", "all", "letter", "toUpperCase", "sum", "arr", "reduce", "a", "b", "getDataAttributes", "attributePrefix", "dataAttributes", "attributes", "length", "i", "attribute", "name", "value", "indexOf", "GetterSetter", "component", "prototype", "propertyTypes", "shouldRender", "PROPERTY_TYPE", "RENDER_PROPERTY", "descriptor", "getOwnPropertyDescriptor", "getter", "get", "options", "setter", "set", "prevValue", "renderOnPropertyChange", "scheduleRender", "enumerable", "configurable", "defineProperty", "withMethods", "methods", "memberName", "forEach", "_i", "args", "result", "range", "push", "getRangeCost", "valueRange", "Math", "max", "between", "min", "throttle", "num", "unit", "reverseUnit", "round", "withGridMethods", "GRID_METHODS", "ResizeWatcher", "container", "width", "height", "_this", "_scheduleResize", "_options", "containerRectBox", "rectBox", "childrenRectBox", "sizes", "borderBoxSize", "contentBoxSize", "contentRect", "resizeDebounce", "maxResizeDebounce", "updatedEntries", "_updatedEntries", "index", "lastIndexOf", "_maxResizeDebounceTimer", "window", "setTimeout", "_onResize", "_resizeTimer", "clearTimeout", "updated", "containerEntry", "childEntries", "isResizeChildren", "isResizeContainer", "watchDirection", "prevRect", "rect", "containerEntrySize", "setRect", "resize", "isWatchWidth", "isWatchHeight", "_emitter", "trigger", "__assign", "useResizeObserver", "useWindowResize", "document", "querySelector", "_init", "_observer", "offsetWidth", "offsetHeight", "clientWidth", "clientHeight", "children", "observer", "box", "observe", "unobserve", "callback", "on", "disconnect", "removeEventListener", "_onWindowResize", "Component", "ResizeObserver", "_onObserve", "addEventListener", "__extends", "ContainerManager", "_super", "e", "DEFAULT_GRID_OPTIONS", "autoResize", "_watcher", "isObserverEnabled", "getRect", "observeChildren", "unobserveChildren", "_names", "status", "setContentSize", "getContentSize", "sizeName", "style", "destroy", "preserveUI", "cssText", "orgCSSText", "getComputedStyle", "position", "listen", "ItemRenderer", "useTransform", "percentage", "isEqualSize", "isConstantSize", "useRoundedSize", "initialRects", "_renderItem", "containerRect", "totalItems", "updateItems", "hasSizeGroup", "some", "sizeGroup", "updatedItem", "updateState", "UPDATE_STATE", "UPDATED", "updateItem", "sizePercentage", "posPercentage", "posPercetage", "sizePercetage", "checkSizeGroup", "_b", "orgRect", "isLoading", "WAIT_LOADING", "hasOrgSize", "isNotEqualSize", "notEqualSize", "left", "offsetLeft", "top", "offsetTop", "clientRect", "getBoundingClientRect", "shouldReupdate", "isFirstUpdate", "mountState", "MOUNT_STATE", "MOUNTED", "NEED_UPDATE", "cssRect", "cssTexts", "posName", "getInlineSize", "hasRectProperties", "key", "join", "GridItem", "itemStatus", "data", "UNCHECKED", "gridData", "gridRect", "names", "Grid", "containerElement", "start", "end", "_renderItems", "useResize", "updatedItems", "constructor", "defaultOptions", "externalContainerManager", "externalItemRenderer", "containerManager", "itemRenderer", "slice", "call", "outlines", "elements", "getChildren", "added", "changed", "removed", "nextItems", "beforeIndex", "afterIndex", "setItems", "renderItems", "useOrgResize", "checkReady", "minimize", "getMinimizedStatus", "getStatus", "prevInlineSize", "setStatus", "_renderComplete", "direction", "defaultDirection", "mounted", "isResize", "outlineSize", "getContainerInlineSize", "outlineLength", "preserveUIOnDestroy", "_im", "_getDirectionalGap", "parentNode", "moreUpdated", "hasTransition", "transitionDuration", "parseFloat", "ImReady", "prefix", "hasCSSSize", "_updateItems", "readyItems", "isPreReadyOver", "isRestoreOrgCSSText", "update", "check", "_clearRenderTimer", "_renderTimer", "useFit", "startOutline", "endOutline", "outlineOffset", "point", "cssContentPos", "prevOutlines", "prevOutline", "outline", "nextOutlines", "isUpdating", "applyGrid", "setOutlines", "fitOutlines", "_refreshContainerContentSize", "transitionMounted", "shouldReupdateItems", "updateEqualSizeItems", "getItems", "gap", "isVerticalGap", "contentGap", "getContentGap", "endPoint", "startPoint", "setContainerRect", "_resizeContainer", "isTrusted", "syncElements", "GRID_PROPERTY_TYPES", "getColumnPoint", "columnIndex", "columnCount", "pointCaculationName", "getColumnIndex", "nearestCalculationName", "startPos", "indexCaculationName", "points", "MasonryGrid", "columnSize", "getComputedOutlineSize", "column", "getComputedOutlineLength", "align", "columnSizeRatio", "contentAlign", "inlineGap", "itemsLength", "alignPoses", "_getAlignPoses", "isEndDirection", "pointCalculationName", "point_1", "columnDist", "isStretch", "isStartContentAlign", "Infinity", "columnAttribute", "parseInt", "maxColumnAttribute", "maxColumn", "ceil", "maxColumnCount", "nextEndColumnIndex", "nextColumnIndex", "nextInlineSize", "this_1", "_isObserverEnabled", "cssInlineSize", "cssContentSize", "cssInlinePos", "nextOutlinePoint", "indexOffset", "getInlineGap", "containerInlineSize", "columnSizeOption", "columnOption", "maxStretchColumnSize", "checkedItem", "items_1", "columnCalculationThreshold", "floor", "containerSize", "indexes", "offset", "dist", "countDist", "totalColumnSize", "single_source_shortest_paths", "graph", "s", "d", "predecessors", "costs", "open", "BinaryHeap", "x", "cost", "closest", "u", "cost_of_s_to_u", "adjacent_nodes", "cost_of_e", "cost_of_s_to_u_plus_cost_of_e", "cost_of_s_to_v", "first_visit", "pop", "v", "msg", "Error", "extract_shortest_path_from_predecessor_list", "nodes", "reverse", "find_path", "scoreFunction", "content", "bubbleUp", "sinkDown", "_n", "n", "parentN", "parent", "elemScore", "child1Score", "child2N", "child1N", "swap", "child1", "child2", "child2Score", "splitItems", "path", "groups", "path1", "path2", "parseStretchSize", "signText", "charAt", "sign", "nextSize", "match", "getExpectedItemInlineSize", "rowSize", "orgInlineSize", "orgContentSize", "inlineOffset", "contentOffset", "ratio", "JustifiedGrid", "isNaN", "maintainedTarget", "widthOffset", "scrollWidth", "heightOffset", "scrollHeight", "rowRange", "_getRowPath", "_getPath", "_setStyle", "columnRange", "_getColumnRange", "_getRowRange", "pathLink", "_getRowLink", "currentNode", "node", "currentLink", "minColumn", "minRow", "maxRow", "lastNode", "pathLength", "rangeCost", "lastCost", "abs", "_getCost", "isOver", "_searchRowLink", "links", "nextNode", "nextCost", "nextLink", "sort", "aIsOver", "bIsOver", "aRangeCost", "bRangeCost", "forceStretch", "fixedContainerInsize", "ratioSum", "inlineSum", "maintainedRatio", "nextRowSize", "stretch", "_getSizeRange", "minRowSize", "maxRowSize", "stretchRowSize_1", "stretchRange_1", "stretchRange", "inlineSizes", "minInlineSize", "prev", "itemInlineSize", "minStretch", "maxInlineSize", "maxStretch", "isMax", "isMin", "minSize", "maxSize", "originalSize", "itemInfos", "_getExpectedInlineSizes", "firstItemsSize", "info", "distSize", "firstScale", "costInfos", "passed", "infos", "isIncrease", "costInfosLength", "passedItemsSize", "restItemsSize", "distScale", "every", "lastDistScale", "costRatio", "j", "lineItems", "_getExpectedRowSize", "isCroppedSize", "expectedInlineSize", "_getExpectedInlineSize", "pow", "extraCost", "sizeCost", "passUnstretchRow", "res", "_getStretchItemInfos", "isFinite", "columnRangeOption", "nodeKey", "results", "displayedRow", "sizeRange", "passedItems", "groupsLength", "displayedSize", "passedPoint", "groupItems", "rowIndex", "groupItemslength", "allGap", "scale", "noGapExpectedContainerInlineSize", "noGapContainerInlineSize", "_", "inlineSizes_1", "infos_1", "prevItem", "setCSSGridRect", "inlineMargin", "contentMargin", "getMaxPoint", "maxPoint", "getMinPoint", "minPoint", "getOutlinePoint", "frameOutline", "useFrameFill", "getOutlineDist", "minEndPoint", "maxStartPoint", "frameDist", "outlineIndex", "endPos", "fillOutlines", "FrameGrid", "frame", "_getFrame", "frameInlineSize", "frameContentSize", "frameRects", "getRectSize", "rectInlineSize", "rectContentSize", "rectsLength", "startIndex", "rectIndex", "frameRectContentPos", "frameRectInlinePos", "frameRectContentSize", "frameRectInlineSize", "isDirectionEnd", "gridOutline", "outlineDist", "rectSizeOption", "rectSizeValue", "rects", "passMap", "y1", "x1", "type", "_findRect", "x2", "y2", "y", "rectSize", "BoxModel", "boxStatus", "scaleX", "scaleY", "getCost", "originLength", "fitArea", "bestFitArea", "itemFitSize", "containerFitSize", "isContentDirection", "PackingGrid", "aspectRatio", "containerContentSize", "model", "_findBestFitArea", "scaleTo", "boxItem", "getRatio", "minCost", "sizeWeight", "_getWeight", "ratioWeight", "child", "containerSizeCost", "getOrgSizeWeight", "getSize", "containerRatioCost", "getOrgRatio", "itemContentSize", "itemSize", "itemRatio", "containerRatio", "weightPriority", "isString", "val", "findTarget", "target", "el", "isString", "document", "querySelector", "Element", "value", "current", "withClassMethods", "methods", "prototype", "memberName", "forEach", "name", "args", "_i", "arguments", "length", "result", "_a", "apply", "Observer", "value", "_emitter", "Component", "_current", "Object", "defineProperty", "get", "set", "isUpdate", "trigger", "subscribe", "callback", "on", "unsubscribe", "off", "ua", "window", "navigator", "userAgent", "IS_IOS", "test", "CONTAINER_CLASS_NAME", "IGNORE_PROPERITES_MAP", "renderOnPropertyChange", "useFit", "autoResize", "INFINITEGRID_PROPERTY_TYPES", "__assign", "GRID_PROPERTY_TYPES", "DIRECTION", "START", "END", "NONE", "INFINITEGRID_EVENTS", "CHANGE_SCROLL", "REQUEST_APPEND", "REQUEST_PREPEND", "RENDER_COMPLETE", "CONTENT_ERROR", "ITEM_INFO_PROPERTIES", "type", "groupKey", "key", "element", "html", "data", "inserted", "attributes", "INFINITEGRID_METHODS", "GROUP_TYPE", "ITEM_TYPE", "STATUS_TYPE", "INVISIBLE_POS", "__extends", "InfiniteGridItem", "horizontal", "itemStatus", "_super", "NORMAL", "cssRect", "top", "left", "_this", "VIRTUAL", "rect", "width", "height", "mountState", "MOUNT_STATE", "UNMOUNTED", "orgRect", "__proto", "prototype", "status", "getMinimizedStatus", "GridItem", "LOADING_GROUP_KEY", "LOADING_ITEM_KEY", "LoadingGrid", "items", "initialDisplay", "style", "display", "removeProperty", "item", "loadingItem", "getLoadingItem", "options", "LOADING", "name", "direction", "outline", "length", "start", "end", "nextOutline", "__spreadArray", "offset", "contentSize", "getContentGap", "cssInlinePos", "getContainerInlineSize", "inlineSize", "maxPos", "Math", "max", "cssContentPos", "map", "pos", "minPos", "min", "Grid", "isWindow", "el", "isNumber", "val", "isString", "isObject", "flat", "arr", "reduce", "prev", "cur", "splitOptions", "gridOptions", "otherOptions", "splitGridOptions", "nextOptions", "defaultOptions", "value", "categorize", "groups", "groupKeys", "registeredGroupKeys", "filter", "forEach", "_a", "generatedGroupKey", "isContinuousGroupKey", "i", "makeKey", "group", "push", "getNextCursors", "prevKeys", "nextKeys", "prevStartCursor", "prevEndCursor", "result", "diff", "nextStartCursor", "nextEndCursor", "maintained", "prevIndex", "nextIndex", "startCursor", "endCursor", "splitVirtualGroups", "nextGroups", "virtualGroups", "index", "findIndex", "endMaintainedIndex", "nextGroup", "endIndex", "slice", "findLastIndex", "startMaintainedIndex", "startIndex", "getFirstRenderingItems", "nextItems", "getRenderingItemsByStatus", "groupManagerStatus", "usePlaceholder", "prevGroups", "startVirtualGroups", "endVirtualGroups", "cursors", "nextVisibleItems", "mountRenderingItems", "grid", "useLoading", "useFirstRender", "setPlaceholder", "setLoading", "setStatus", "syncItems", "getGroups", "setCursors", "getRenderingItems", "visibleItems", "groupManager", "InfiniteGridGetterSetter", "component", "propertyTypes", "enumerable", "configurable", "get", "set", "prevValue", "Object", "defineProperty", "registeredKeys", "prefix", "convertHTMLtoElement", "dummy", "document", "createElement", "innerHTML", "toArray", "children", "convertInsertedItems", "insertedItems", "outerHTML", "nodes", "array", "callback", "getItemInfo", "info", "nextInfo", "isFlatOutline", "every", "range", "flatGroups", "getItems", "filterVirtuals", "includePlaceholders", "withInfiniteGridMethods", "withClassMethods", "GroupManager", "container", "_loadingGrid", "externalContainerManager", "containerManager", "gap", "_mainGrid", "_makeGrid", "shouldRender", "_checkShouldRender", "scheduleRender", "itemKeys", "groupItems", "hasPlaceholder", "getVisibleGroups", "some", "_placeholder", "_getLoadingItem", "updateItems", "placeholder", "_updatePlaceholder", "_getRenderingItems", "isWaitEnd", "prevType", "endLoading", "loading", "setLoadingItem", "getComputedOutlineLength", "getComputedOutlineSize", "renderingGroups", "loadingGrid", "unshift", "_getLoadingGroup", "reverse", "appliedItemChecker", "outlineLength", "outlineSize", "itemRenderer", "passedItems", "gridItems", "isVirtual", "appliedItems", "UNCHECKED", "updateItem", "gridOutlines", "_applyVirtualGrid", "applyGrid", "setOutlines", "passed", "getOutlines", "nextItemInfos", "prevItemKeys", "_syncItemInfos", "prevGroupKeys", "nextManagerGroups", "_splitVirtualGroups", "_mergeVirtualGroups", "setItems", "renderItems", "_registerGroups", "useResize", "updateState", "UPDATE_STATE", "NEED_UPDATE", "orgStartCursor", "orgEndCursor", "orgGroups", "startGroup", "endGroup", "isMinimizeItems", "MINIMIZE_INVISIBLE_ITEMS", "isMinimizeGroups", "MINIMIZE_INVISIBLE_GROUPS", "REMOVE_INVISIBLE_GROUPS", "orgIndex", "orgGroup", "indexOf", "lastIndexOf", "groupStatus", "isOutsideCursor", "isVirtualItems", "isVirtualGroup", "getVirtualStatus", "outlines", "totalItems", "getGroupItems", "itemStartCursor", "itemEndCursor", "orgCursors", "itemCursors", "startGroupKey", "endGroupKey", "startOutline", "outlineOffset", "_b", "point", "contentPos", "insertPlaceholders", "splice", "groupKey_1", "infos", "Array", "isArray", "isRerender", "updateEqualSizeItems", "GridConstructor", "gridConstructor", "prevOptions", "PROPERTY_TYPE", "RENDER_PROPERTY", "prevOutlines", "prevOutline", "nextItemKeys", "prevItem", "nextGroupKeys", "_getGroupItems", "prevGroup", "containerElement", "useResizeObserver", "observeChildren", "externalItemRenderer", "PROPERTY", "__decorate", "GetterSetter", "Infinite", "threshold", "useRecycle", "defaultDirection", "scrollPos", "size", "_c", "isDirectionEnd", "trigger", "undefined", "nextCursor", "endScrollPos", "startEdgePos", "endEdgePos", "endOutline", "visibles", "startPos", "endPos", "hasStartItems", "hasEndItems", "isStart", "isEnd", "hasRealItem", "hasVirtualItems", "isStartVirtual", "isEndVirtual", "realItemIndex", "endVirtualItemIndex", "nextKey", "startVirtualItemIndex", "_requestVirtualItems", "totalVisibleItems", "getVisibleItems", "totalVisibleLength", "visibleLength", "getStartCursor", "getEndCursor", "startKey_1", "endKey_1", "lastItem", "firstItem", "prevItems", "isChange", "prevVisibleItems", "visibleResult", "added", "removed", "changed", "partKey", "itemPart", "parts", "part", "getRenderedVisibleItems", "visibleItem", "itemPos", "rendered", "off", "Component", "Renderer", "rendererKey", "Date", "now", "state", "_state", "clearTimeout", "_updateTimer", "setTimeout", "nextElements", "diffResult", "_diffResult", "isChanged", "isItemChanged", "_isItemChanged", "list", "elements", "renderKey", "VanillaRenderer", "render", "prevList", "ordered", "diffList", "removeChild", "insertBefore", "updated", "VanillaGridRenderer", "orgItem", "ScrollManager", "wrapper", "prevScrollPos", "getScrollPos", "nextScrollPos", "getOrgScrollPos", "setScrollPos", "_isScrollIssue", "ComponentEvent", "relativeScrollPos", "getRelativeScrollPos", "containerTag", "scrollContainer", "_init", "scrollOffset", "eventTarget", "prop", "documentElement", "body", "scrollTo", "x", "y", "scroll", "scrollLeft", "scrollTop", "scrollBy", "isBody", "scrollContainerRect", "getBoundingClientRect", "containerRect", "innerWidth", "innerHeight", "offsetWidth", "offsetHeight", "removeEventListener", "_onCheck", "_isCreateElement", "fragment_1", "createDocumentFragment", "childNodes", "childNode", "appendChild", "cssText", "_orgCSSText", "containerOption", "scrollContainerOption", "containerCSSText", "findTarget", "position", "className", "overflowX", "overflowY", "addEventListener", "resize", "InfiniteGrid", "_scroll", "e", "renderedItems", "gridItem", "_checkEndLoading", "addedItems", "unobserveChildren", "isRestore", "isResize", "_onRenderComplete", "mounted", "isResizeContainer", "_renderItems", "updatedItems", "getUpdatedItems", "childEntries", "_onRequestInsert", "target", "update", "remove", "removeByKey", "infinite", "scrollManager", "prevScrollSize", "getScrollSize", "prevContainerSize", "getSize", "prevVisibleArea", "getVisibleArea", "_syncInfinite", "prevPart", "nextPart", "nextItem", "getItemPartByKey", "getItemByKey", "prevPos", "nextPos", "prevStartPos", "prevEndPos", "nextStartPos", "nextEndPos", "nextScrollSize", "nextContainerSize", "endOffset", "nextScollPos", "completeMounted", "isUpdate", "shouldRerenderItems", "_update", "constructor", "renderer", "on", "_render", "attributePrefix", "useTransform", "percentage", "isConstantSize", "isEqualSize", "resizeDebounce", "maxResizeDebounce", "useRoundedSize", "wrapperElement", "querySelector", "_onScroll", "getContainer", "ContainerManager", "_onResize", "ItemRenderer", "_onChange", "_onRequestAppend", "_onRequestPrepend", "setSize", "getContentSize", "_onContentError", "setContainer", "_onRendererUpdated", "getWrapper", "getScrollContainer", "_syncGroups", "_syncItems", "insert", "itemInfos", "groupIndex", "nextGroupInfos", "rightGroup", "append", "rightGroupKey", "rightItemIndex", "getStatus", "getGroupStatus", "appendPlaceholders", "removePlaceholders", "prependPlaceholders", "prevInlineSize", "getInlineSize", "setGroupStatus", "_getRenderer", "updateKey", "removeGroupByKey", "firstIndex", "lastIndex", "removeByIndex", "_waitType", "_checkStartLoading", "hasNoData", "waitEndLoading", "destroy", "_getRendererItems", "_resizeScroll", "computedContentPos", "computedContentSize", "eventType", "nextGroupKey", "wait", "ready", "isTrusted", "getContainerElement", "getLoadingType", "isLoading", "startLoading", "hasLoadingItem", "loadingType", "DEFAULT_GRID_OPTIONS", "MasonryInfiniteGrid", "MasonryGrid", "column", "parseFloat", "JustifiedInfiniteGrid", "JustifiedGrid", "FrameInfiniteGrid", "FrameGrid", "PackingInfiniteGrid", "PackingGrid", "REACT_INFINITEGRID_EVENT_MAP", "REACT_INFINITEGRID_EVENTS", "name", "push", "REACT_INFINITEGRID_PROPS", "__spreadArray", "isFunction", "val", "__extends", "InfiniteGrid", "_this", "React", "__proto", "prototype", "attributes", "props", "GridClass", "constructor", "defaultOptions", "Tag", "tag", "indexOf", "__assign", "ref", "_wrapperRef", "_renderContainer", "options", "containerElement", "_containerRef", "current", "container", "_renderer", "Renderer", "renderer", "grid", "eventName", "nativeEventName", "on", "e", "callback", "_grid", "setState", "mountRenderingItems", "_getItemInfos", "useFirstRender", "useLoading", "loading", "usePlaceholder", "placeholder", "horizontal", "status", "updated", "propertyTypes", "destroy", "children", "toArray", "attributePrefix", "VanillaInfiniteGrid", "itemBy", "item", "key", "groupBy", "infoBy", "map", "child", "i", "_a", "data", "rest", "__rest", "groupKey", "jsx", "visibleChildren", "_getVisibleChildren", "ContainerTag", "containerTag", "visibleItems", "getRenderingItems", "type", "ITEM_TYPE", "VIRTUAL", "LOADING", "__decorate", "withInfiniteGridMethods", "MasonryInfiniteGrid", "VanillaMasonryInfiniteGrid", "JustifiedInfiniteGrid", "VanillaJustifiedInfiniteGrid", "FrameInfiniteGrid", "VanillaFrameInfiniteGrid", "PackingInfiniteGrid", "VanillaPackingInfiniteGrid"]
}
